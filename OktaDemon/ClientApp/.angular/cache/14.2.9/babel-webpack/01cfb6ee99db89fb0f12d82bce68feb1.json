{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { __rest } from '../_virtual/_tslib.js';\nimport { warn } from '../util/console.js';\nimport { split2 } from '../util/misc.js';\nimport * as index from './remediators/index.js';\nimport { GenericRemediator } from './remediators/GenericRemediator/GenericRemediator.js';\nimport { IdxFeature } from './types/api.js';\n\nfunction isTerminalResponse(idxResponse) {\n  const {\n    neededToProceed,\n    interactionCode\n  } = idxResponse;\n  return !neededToProceed.length && !interactionCode;\n}\n\nfunction canSkipFn(idxResponse) {\n  return idxResponse.neededToProceed.some(({\n    name\n  }) => name === 'skip');\n}\n\nfunction canResendFn(idxResponse) {\n  return Object.keys(idxResponse.actions).some(actionName => actionName.includes('resend'));\n}\n\nfunction getMessagesFromIdxRemediationValue(value) {\n  if (!value || !Array.isArray(value)) {\n    return;\n  }\n\n  return value.reduce((messages, value) => {\n    if (value.messages) {\n      messages = [...messages, ...value.messages.value];\n    }\n\n    if (value.form) {\n      const messagesFromForm = getMessagesFromIdxRemediationValue(value.form.value) || [];\n      messages = [...messages, ...messagesFromForm];\n    }\n\n    if (value.options) {\n      let optionValues = [];\n      value.options.forEach(option => {\n        if (!option.value || typeof option.value === 'string') {\n          return;\n        }\n\n        optionValues = [...optionValues, option.value];\n      });\n      const messagesFromOptions = getMessagesFromIdxRemediationValue(optionValues) || [];\n      messages = [...messages, ...messagesFromOptions];\n    }\n\n    return messages;\n  }, []);\n}\n\nfunction getMessagesFromResponse(idxResponse, options) {\n  var _a;\n\n  let messages = [];\n  const {\n    rawIdxState,\n    neededToProceed\n  } = idxResponse;\n  const globalMessages = (_a = rawIdxState.messages) === null || _a === void 0 ? void 0 : _a.value.map(message => message);\n\n  if (globalMessages) {\n    messages = [...messages, ...globalMessages];\n  }\n\n  if (!options.useGenericRemediator) {\n    for (let remediation of neededToProceed) {\n      const fieldMessages = getMessagesFromIdxRemediationValue(remediation.value);\n\n      if (fieldMessages) {\n        messages = [...messages, ...fieldMessages];\n      }\n    }\n  }\n\n  const seen = {};\n  messages = messages.reduce((filtered, message) => {\n    var _a;\n\n    const key = (_a = message.i18n) === null || _a === void 0 ? void 0 : _a.key;\n\n    if (key && seen[key]) {\n      return filtered;\n    }\n\n    seen[key] = message;\n    filtered = [...filtered, message];\n    return filtered;\n  }, []);\n  return messages;\n}\n\nfunction getEnabledFeatures(idxResponse) {\n  const res = [];\n  const {\n    actions,\n    neededToProceed\n  } = idxResponse;\n\n  if (actions['currentAuthenticator-recover']) {\n    res.push(IdxFeature.PASSWORD_RECOVERY);\n  }\n\n  if (neededToProceed.some(({\n    name\n  }) => name === 'select-enroll-profile')) {\n    res.push(IdxFeature.REGISTRATION);\n  }\n\n  if (neededToProceed.some(({\n    name\n  }) => name === 'redirect-idp')) {\n    res.push(IdxFeature.SOCIAL_IDP);\n  }\n\n  if (neededToProceed.some(({\n    name\n  }) => name === 'unlock-account')) {\n    res.push(IdxFeature.ACCOUNT_UNLOCK);\n  }\n\n  return res;\n}\n\nfunction getAvailableSteps(authClient, idxResponse, useGenericRemediator) {\n  var _a;\n\n  const res = [];\n  const remediatorMap = Object.values(index).reduce((map, remediatorClass) => {\n    if (remediatorClass.remediationName) {\n      map[remediatorClass.remediationName] = remediatorClass;\n    }\n\n    return map;\n  }, {});\n\n  for (let remediation of idxResponse.neededToProceed) {\n    const T = getRemediatorClass(remediation, {\n      useGenericRemediator,\n      remediators: remediatorMap\n    });\n\n    if (T) {\n      const remediator = new T(remediation);\n      res.push(remediator.getNextStep(authClient, idxResponse.context));\n    }\n  }\n\n  for (const [name] of Object.entries(idxResponse.actions || {})) {\n    let stepObj = {\n      name,\n      action: function () {\n        var _ref = _asyncToGenerator(function* (params) {\n          return authClient.idx.proceed({\n            actions: [{\n              name,\n              params\n            }]\n          });\n        });\n\n        return function action(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()\n    };\n\n    if (name.startsWith('currentAuthenticator')) {\n      const [part1, part2] = split2(name, '-');\n      const actionObj = idxResponse.rawIdxState[part1].value[part2];\n\n      const rest = __rest(actionObj, [\"href\", \"method\", \"rel\", \"accepts\", \"produces\"]);\n\n      const value = (_a = actionObj.value) === null || _a === void 0 ? void 0 : _a.filter(item => item.name !== 'stateHandle');\n      stepObj = Object.assign(Object.assign(Object.assign({}, rest), value && {\n        value\n      }), stepObj);\n    }\n\n    res.push(stepObj);\n  }\n\n  return res;\n}\n\nfunction filterValuesForRemediation(idxResponse, remediationName, values) {\n  const remediations = idxResponse.neededToProceed || [];\n  const remediation = remediations.find(r => r.name === remediationName);\n\n  if (!remediation) {\n    warn(`filterValuesForRemediation: \"${remediationName}\" did not match any remediations`);\n    return values;\n  }\n\n  const valuesForRemediation = remediation.value.reduce((res, entry) => {\n    const {\n      name,\n      value\n    } = entry;\n\n    if (name === 'stateHandle') {\n      res[name] = value;\n    } else {\n      res[name] = values[name];\n    }\n\n    return res;\n  }, {});\n  return valuesForRemediation;\n}\n\nfunction getRemediatorClass(remediation, options) {\n  const {\n    useGenericRemediator,\n    remediators\n  } = options;\n\n  if (!remediation) {\n    return undefined;\n  }\n\n  if (useGenericRemediator) {\n    return GenericRemediator;\n  }\n\n  return remediators[remediation.name];\n}\n\nfunction getRemediator(idxRemediations, values, options) {\n  const remediators = options.remediators;\n  const useGenericRemediator = options.useGenericRemediator;\n  let remediator;\n\n  if (options.step) {\n    const remediation = idxRemediations.find(({\n      name\n    }) => name === options.step);\n\n    if (remediation) {\n      const T = getRemediatorClass(remediation, options);\n      return T ? new T(remediation, values, options) : undefined;\n    } else {\n      warn(`step \"${options.step}\" did not match any remediations`);\n      return;\n    }\n  }\n\n  const remediatorCandidates = [];\n\n  if (useGenericRemediator) {\n    remediatorCandidates.push(new GenericRemediator(idxRemediations[0], values, options));\n  } else {\n    for (let remediation of idxRemediations) {\n      const isRemeditionInFlow = Object.keys(remediators).includes(remediation.name);\n\n      if (!isRemeditionInFlow) {\n        continue;\n      }\n\n      const T = getRemediatorClass(remediation, options);\n      remediator = new T(remediation, values, options);\n\n      if (remediator.canRemediate()) {\n        return remediator;\n      }\n\n      remediatorCandidates.push(remediator);\n    }\n  }\n\n  return remediatorCandidates[0];\n}\n\nfunction getNextStep(authClient, remediator, idxResponse) {\n  const nextStep = remediator.getNextStep(authClient, idxResponse.context);\n  const canSkip = canSkipFn(idxResponse);\n  const canResend = canResendFn(idxResponse);\n  return Object.assign(Object.assign(Object.assign({}, nextStep), canSkip && {\n    canSkip\n  }), canResend && {\n    canResend\n  });\n}\n\nfunction handleFailedResponse(authClient, idxResponse, options = {}) {\n  const terminal = isTerminalResponse(idxResponse);\n  const messages = getMessagesFromResponse(idxResponse, options);\n\n  if (terminal) {\n    return {\n      idxResponse,\n      terminal,\n      messages\n    };\n  } else {\n    const remediator = getRemediator(idxResponse.neededToProceed, {}, options);\n    const nextStep = remediator && getNextStep(authClient, remediator, idxResponse);\n    return Object.assign({\n      idxResponse,\n      messages\n    }, nextStep && {\n      nextStep\n    });\n  }\n}\n\nexport { canResendFn, canSkipFn, filterValuesForRemediation, getAvailableSteps, getEnabledFeatures, getMessagesFromIdxRemediationValue, getMessagesFromResponse, getNextStep, getRemediator, handleFailedResponse, isTerminalResponse };","map":{"version":3,"names":["__rest","warn","split2","index","GenericRemediator","IdxFeature","isTerminalResponse","idxResponse","neededToProceed","interactionCode","length","canSkipFn","some","name","canResendFn","Object","keys","actions","actionName","includes","getMessagesFromIdxRemediationValue","value","Array","isArray","reduce","messages","form","messagesFromForm","options","optionValues","forEach","option","messagesFromOptions","getMessagesFromResponse","_a","rawIdxState","globalMessages","map","message","useGenericRemediator","remediation","fieldMessages","seen","filtered","key","i18n","getEnabledFeatures","res","push","PASSWORD_RECOVERY","REGISTRATION","SOCIAL_IDP","ACCOUNT_UNLOCK","getAvailableSteps","authClient","remediatorMap","values","remediatorClass","remediationName","T","getRemediatorClass","remediators","remediator","getNextStep","context","entries","stepObj","action","params","idx","proceed","startsWith","part1","part2","actionObj","rest","filter","item","assign","filterValuesForRemediation","remediations","find","r","valuesForRemediation","entry","undefined","getRemediator","idxRemediations","step","remediatorCandidates","isRemeditionInFlow","canRemediate","nextStep","canSkip","canResend","handleFailedResponse","terminal"],"sources":["C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@okta/okta-auth-js/esm/browser/idx/util.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { __rest } from '../_virtual/_tslib.js';\nimport { warn } from '../util/console.js';\nimport { split2 } from '../util/misc.js';\nimport * as index from './remediators/index.js';\nimport { GenericRemediator } from './remediators/GenericRemediator/GenericRemediator.js';\nimport { IdxFeature } from './types/api.js';\n\nfunction isTerminalResponse(idxResponse) {\n    const { neededToProceed, interactionCode } = idxResponse;\n    return !neededToProceed.length && !interactionCode;\n}\nfunction canSkipFn(idxResponse) {\n    return idxResponse.neededToProceed.some(({ name }) => name === 'skip');\n}\nfunction canResendFn(idxResponse) {\n    return Object.keys(idxResponse.actions).some(actionName => actionName.includes('resend'));\n}\nfunction getMessagesFromIdxRemediationValue(value) {\n    if (!value || !Array.isArray(value)) {\n        return;\n    }\n    return value.reduce((messages, value) => {\n        if (value.messages) {\n            messages = [...messages, ...value.messages.value];\n        }\n        if (value.form) {\n            const messagesFromForm = getMessagesFromIdxRemediationValue(value.form.value) || [];\n            messages = [...messages, ...messagesFromForm];\n        }\n        if (value.options) {\n            let optionValues = [];\n            value.options.forEach(option => {\n                if (!option.value || typeof option.value === 'string') {\n                    return;\n                }\n                optionValues = [...optionValues, option.value];\n            });\n            const messagesFromOptions = getMessagesFromIdxRemediationValue(optionValues) || [];\n            messages = [...messages, ...messagesFromOptions];\n        }\n        return messages;\n    }, []);\n}\nfunction getMessagesFromResponse(idxResponse, options) {\n    var _a;\n    let messages = [];\n    const { rawIdxState, neededToProceed } = idxResponse;\n    const globalMessages = (_a = rawIdxState.messages) === null || _a === void 0 ? void 0 : _a.value.map(message => message);\n    if (globalMessages) {\n        messages = [...messages, ...globalMessages];\n    }\n    if (!options.useGenericRemediator) {\n        for (let remediation of neededToProceed) {\n            const fieldMessages = getMessagesFromIdxRemediationValue(remediation.value);\n            if (fieldMessages) {\n                messages = [...messages, ...fieldMessages];\n            }\n        }\n    }\n    const seen = {};\n    messages = messages.reduce((filtered, message) => {\n        var _a;\n        const key = (_a = message.i18n) === null || _a === void 0 ? void 0 : _a.key;\n        if (key && seen[key]) {\n            return filtered;\n        }\n        seen[key] = message;\n        filtered = [...filtered, message];\n        return filtered;\n    }, []);\n    return messages;\n}\nfunction getEnabledFeatures(idxResponse) {\n    const res = [];\n    const { actions, neededToProceed } = idxResponse;\n    if (actions['currentAuthenticator-recover']) {\n        res.push(IdxFeature.PASSWORD_RECOVERY);\n    }\n    if (neededToProceed.some(({ name }) => name === 'select-enroll-profile')) {\n        res.push(IdxFeature.REGISTRATION);\n    }\n    if (neededToProceed.some(({ name }) => name === 'redirect-idp')) {\n        res.push(IdxFeature.SOCIAL_IDP);\n    }\n    if (neededToProceed.some(({ name }) => name === 'unlock-account')) {\n        res.push(IdxFeature.ACCOUNT_UNLOCK);\n    }\n    return res;\n}\nfunction getAvailableSteps(authClient, idxResponse, useGenericRemediator) {\n    var _a;\n    const res = [];\n    const remediatorMap = Object.values(index)\n        .reduce((map, remediatorClass) => {\n        if (remediatorClass.remediationName) {\n            map[remediatorClass.remediationName] = remediatorClass;\n        }\n        return map;\n    }, {});\n    for (let remediation of idxResponse.neededToProceed) {\n        const T = getRemediatorClass(remediation, { useGenericRemediator, remediators: remediatorMap });\n        if (T) {\n            const remediator = new T(remediation);\n            res.push(remediator.getNextStep(authClient, idxResponse.context));\n        }\n    }\n    for (const [name] of Object.entries((idxResponse.actions || {}))) {\n        let stepObj = {\n            name,\n            action: async (params) => {\n                return authClient.idx.proceed({\n                    actions: [{ name, params }]\n                });\n            }\n        };\n        if (name.startsWith('currentAuthenticator')) {\n            const [part1, part2] = split2(name, '-');\n            const actionObj = idxResponse.rawIdxState[part1].value[part2];\n            const rest = __rest(actionObj, [\"href\", \"method\", \"rel\", \"accepts\", \"produces\"]);\n            const value = (_a = actionObj.value) === null || _a === void 0 ? void 0 : _a.filter(item => item.name !== 'stateHandle');\n            stepObj = Object.assign(Object.assign(Object.assign({}, rest), (value && { value })), stepObj);\n        }\n        res.push(stepObj);\n    }\n    return res;\n}\nfunction filterValuesForRemediation(idxResponse, remediationName, values) {\n    const remediations = idxResponse.neededToProceed || [];\n    const remediation = remediations.find(r => r.name === remediationName);\n    if (!remediation) {\n        warn(`filterValuesForRemediation: \"${remediationName}\" did not match any remediations`);\n        return values;\n    }\n    const valuesForRemediation = remediation.value.reduce((res, entry) => {\n        const { name, value } = entry;\n        if (name === 'stateHandle') {\n            res[name] = value;\n        }\n        else {\n            res[name] = values[name];\n        }\n        return res;\n    }, {});\n    return valuesForRemediation;\n}\nfunction getRemediatorClass(remediation, options) {\n    const { useGenericRemediator, remediators } = options;\n    if (!remediation) {\n        return undefined;\n    }\n    if (useGenericRemediator) {\n        return GenericRemediator;\n    }\n    return remediators[remediation.name];\n}\nfunction getRemediator(idxRemediations, values, options) {\n    const remediators = options.remediators;\n    const useGenericRemediator = options.useGenericRemediator;\n    let remediator;\n    if (options.step) {\n        const remediation = idxRemediations.find(({ name }) => name === options.step);\n        if (remediation) {\n            const T = getRemediatorClass(remediation, options);\n            return T ? new T(remediation, values, options) : undefined;\n        }\n        else {\n            warn(`step \"${options.step}\" did not match any remediations`);\n            return;\n        }\n    }\n    const remediatorCandidates = [];\n    if (useGenericRemediator) {\n        remediatorCandidates.push(new GenericRemediator(idxRemediations[0], values, options));\n    }\n    else {\n        for (let remediation of idxRemediations) {\n            const isRemeditionInFlow = Object.keys(remediators).includes(remediation.name);\n            if (!isRemeditionInFlow) {\n                continue;\n            }\n            const T = getRemediatorClass(remediation, options);\n            remediator = new T(remediation, values, options);\n            if (remediator.canRemediate()) {\n                return remediator;\n            }\n            remediatorCandidates.push(remediator);\n        }\n    }\n    return remediatorCandidates[0];\n}\nfunction getNextStep(authClient, remediator, idxResponse) {\n    const nextStep = remediator.getNextStep(authClient, idxResponse.context);\n    const canSkip = canSkipFn(idxResponse);\n    const canResend = canResendFn(idxResponse);\n    return Object.assign(Object.assign(Object.assign({}, nextStep), (canSkip && { canSkip })), (canResend && { canResend }));\n}\nfunction handleFailedResponse(authClient, idxResponse, options = {}) {\n    const terminal = isTerminalResponse(idxResponse);\n    const messages = getMessagesFromResponse(idxResponse, options);\n    if (terminal) {\n        return { idxResponse, terminal, messages };\n    }\n    else {\n        const remediator = getRemediator(idxResponse.neededToProceed, {}, options);\n        const nextStep = remediator && getNextStep(authClient, remediator, idxResponse);\n        return Object.assign({ idxResponse,\n            messages }, (nextStep && { nextStep }));\n    }\n}\n\nexport { canResendFn, canSkipFn, filterValuesForRemediation, getAvailableSteps, getEnabledFeatures, getMessagesFromIdxRemediationValue, getMessagesFromResponse, getNextStep, getRemediator, handleFailedResponse, isTerminalResponse };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}