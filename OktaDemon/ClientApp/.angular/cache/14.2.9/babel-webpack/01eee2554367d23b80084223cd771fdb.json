{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { removeNils } from '../../util/object.js';\nimport { isString } from '../../util/types.js';\nimport { toQueryString } from '../../util/url.js';\nimport AuthSdkError from '../../errors/AuthSdkError.js';\n\nfunction convertTokenParamsToOAuthParams(tokenParams) {\n  if (!tokenParams.clientId) {\n    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to get a token');\n  }\n\n  if (isString(tokenParams.responseType) && tokenParams.responseType.indexOf(' ') !== -1) {\n    throw new AuthSdkError('Multiple OAuth responseTypes must be defined as an array');\n  }\n\n  var oauthParams = {\n    'client_id': tokenParams.clientId,\n    'code_challenge': tokenParams.codeChallenge,\n    'code_challenge_method': tokenParams.codeChallengeMethod,\n    'display': tokenParams.display,\n    'idp': tokenParams.idp,\n    'idp_scope': tokenParams.idpScope,\n    'login_hint': tokenParams.loginHint,\n    'max_age': tokenParams.maxAge,\n    'nonce': tokenParams.nonce,\n    'prompt': tokenParams.prompt,\n    'redirect_uri': tokenParams.redirectUri,\n    'response_mode': tokenParams.responseMode,\n    'response_type': tokenParams.responseType,\n    'sessionToken': tokenParams.sessionToken,\n    'state': tokenParams.state\n  };\n  oauthParams = removeNils(oauthParams);\n  ['idp_scope', 'response_type'].forEach(function (mayBeArray) {\n    if (Array.isArray(oauthParams[mayBeArray])) {\n      oauthParams[mayBeArray] = oauthParams[mayBeArray].join(' ');\n    }\n  });\n\n  if (tokenParams.responseType.indexOf('id_token') !== -1 && tokenParams.scopes.indexOf('openid') === -1) {\n    throw new AuthSdkError('openid scope must be specified in the scopes argument when requesting an id_token');\n  } else {\n    oauthParams.scope = tokenParams.scopes.join(' ');\n  }\n\n  return oauthParams;\n}\n\nfunction buildAuthorizeParams(tokenParams) {\n  var oauthQueryParams = convertTokenParamsToOAuthParams(tokenParams);\n  return toQueryString(Object.assign(Object.assign({}, oauthQueryParams), tokenParams.extraParams && Object.assign({}, tokenParams.extraParams)));\n}\n\nexport { buildAuthorizeParams, convertTokenParamsToOAuthParams };","map":{"version":3,"names":["removeNils","isString","toQueryString","AuthSdkError","convertTokenParamsToOAuthParams","tokenParams","clientId","responseType","indexOf","oauthParams","codeChallenge","codeChallengeMethod","display","idp","idpScope","loginHint","maxAge","nonce","prompt","redirectUri","responseMode","sessionToken","state","forEach","mayBeArray","Array","isArray","join","scopes","scope","buildAuthorizeParams","oauthQueryParams","Object","assign","extraParams"],"sources":["C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@okta/okta-auth-js/esm/browser/oidc/endpoints/authorize.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { removeNils } from '../../util/object.js';\nimport { isString } from '../../util/types.js';\nimport { toQueryString } from '../../util/url.js';\nimport AuthSdkError from '../../errors/AuthSdkError.js';\n\nfunction convertTokenParamsToOAuthParams(tokenParams) {\n    if (!tokenParams.clientId) {\n        throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to get a token');\n    }\n    if (isString(tokenParams.responseType) && tokenParams.responseType.indexOf(' ') !== -1) {\n        throw new AuthSdkError('Multiple OAuth responseTypes must be defined as an array');\n    }\n    var oauthParams = {\n        'client_id': tokenParams.clientId,\n        'code_challenge': tokenParams.codeChallenge,\n        'code_challenge_method': tokenParams.codeChallengeMethod,\n        'display': tokenParams.display,\n        'idp': tokenParams.idp,\n        'idp_scope': tokenParams.idpScope,\n        'login_hint': tokenParams.loginHint,\n        'max_age': tokenParams.maxAge,\n        'nonce': tokenParams.nonce,\n        'prompt': tokenParams.prompt,\n        'redirect_uri': tokenParams.redirectUri,\n        'response_mode': tokenParams.responseMode,\n        'response_type': tokenParams.responseType,\n        'sessionToken': tokenParams.sessionToken,\n        'state': tokenParams.state,\n    };\n    oauthParams = removeNils(oauthParams);\n    ['idp_scope', 'response_type'].forEach(function (mayBeArray) {\n        if (Array.isArray(oauthParams[mayBeArray])) {\n            oauthParams[mayBeArray] = oauthParams[mayBeArray].join(' ');\n        }\n    });\n    if (tokenParams.responseType.indexOf('id_token') !== -1 &&\n        tokenParams.scopes.indexOf('openid') === -1) {\n        throw new AuthSdkError('openid scope must be specified in the scopes argument when requesting an id_token');\n    }\n    else {\n        oauthParams.scope = tokenParams.scopes.join(' ');\n    }\n    return oauthParams;\n}\nfunction buildAuthorizeParams(tokenParams) {\n    var oauthQueryParams = convertTokenParamsToOAuthParams(tokenParams);\n    return toQueryString(Object.assign(Object.assign({}, oauthQueryParams), (tokenParams.extraParams && Object.assign({}, tokenParams.extraParams))));\n}\n\nexport { buildAuthorizeParams, convertTokenParamsToOAuthParams };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,UAAT,QAA2B,sBAA3B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,OAAOC,YAAP,MAAyB,8BAAzB;;AAEA,SAASC,+BAAT,CAAyCC,WAAzC,EAAsD;EAClD,IAAI,CAACA,WAAW,CAACC,QAAjB,EAA2B;IACvB,MAAM,IAAIH,YAAJ,CAAiB,yEAAjB,CAAN;EACH;;EACD,IAAIF,QAAQ,CAACI,WAAW,CAACE,YAAb,CAAR,IAAsCF,WAAW,CAACE,YAAZ,CAAyBC,OAAzB,CAAiC,GAAjC,MAA0C,CAAC,CAArF,EAAwF;IACpF,MAAM,IAAIL,YAAJ,CAAiB,0DAAjB,CAAN;EACH;;EACD,IAAIM,WAAW,GAAG;IACd,aAAaJ,WAAW,CAACC,QADX;IAEd,kBAAkBD,WAAW,CAACK,aAFhB;IAGd,yBAAyBL,WAAW,CAACM,mBAHvB;IAId,WAAWN,WAAW,CAACO,OAJT;IAKd,OAAOP,WAAW,CAACQ,GALL;IAMd,aAAaR,WAAW,CAACS,QANX;IAOd,cAAcT,WAAW,CAACU,SAPZ;IAQd,WAAWV,WAAW,CAACW,MART;IASd,SAASX,WAAW,CAACY,KATP;IAUd,UAAUZ,WAAW,CAACa,MAVR;IAWd,gBAAgBb,WAAW,CAACc,WAXd;IAYd,iBAAiBd,WAAW,CAACe,YAZf;IAad,iBAAiBf,WAAW,CAACE,YAbf;IAcd,gBAAgBF,WAAW,CAACgB,YAdd;IAed,SAAShB,WAAW,CAACiB;EAfP,CAAlB;EAiBAb,WAAW,GAAGT,UAAU,CAACS,WAAD,CAAxB;EACA,CAAC,WAAD,EAAc,eAAd,EAA+Bc,OAA/B,CAAuC,UAAUC,UAAV,EAAsB;IACzD,IAAIC,KAAK,CAACC,OAAN,CAAcjB,WAAW,CAACe,UAAD,CAAzB,CAAJ,EAA4C;MACxCf,WAAW,CAACe,UAAD,CAAX,GAA0Bf,WAAW,CAACe,UAAD,CAAX,CAAwBG,IAAxB,CAA6B,GAA7B,CAA1B;IACH;EACJ,CAJD;;EAKA,IAAItB,WAAW,CAACE,YAAZ,CAAyBC,OAAzB,CAAiC,UAAjC,MAAiD,CAAC,CAAlD,IACAH,WAAW,CAACuB,MAAZ,CAAmBpB,OAAnB,CAA2B,QAA3B,MAAyC,CAAC,CAD9C,EACiD;IAC7C,MAAM,IAAIL,YAAJ,CAAiB,mFAAjB,CAAN;EACH,CAHD,MAIK;IACDM,WAAW,CAACoB,KAAZ,GAAoBxB,WAAW,CAACuB,MAAZ,CAAmBD,IAAnB,CAAwB,GAAxB,CAApB;EACH;;EACD,OAAOlB,WAAP;AACH;;AACD,SAASqB,oBAAT,CAA8BzB,WAA9B,EAA2C;EACvC,IAAI0B,gBAAgB,GAAG3B,+BAA+B,CAACC,WAAD,CAAtD;EACA,OAAOH,aAAa,CAAC8B,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,gBAAlB,CAAd,EAAoD1B,WAAW,CAAC6B,WAAZ,IAA2BF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB5B,WAAW,CAAC6B,WAA9B,CAA/E,CAAD,CAApB;AACH;;AAED,SAASJ,oBAAT,EAA+B1B,+BAA/B"},"metadata":{},"sourceType":"module"}