{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { sendRequest } from './request.js';\n\nconst getEmails = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (oktaAuth, options) {\n    const transaction = yield sendRequest(oktaAuth, {\n      url: '/idp/myaccount/emails',\n      method: 'GET',\n      accessToken: options === null || options === void 0 ? void 0 : options.accessToken,\n      transactionClassName: 'EmailTransaction'\n    });\n    return transaction;\n  });\n\n  return function getEmails(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nconst getEmail = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (oktaAuth, options) {\n    const {\n      id,\n      accessToken\n    } = options;\n    const transaction = yield sendRequest(oktaAuth, {\n      url: `/idp/myaccount/emails/${id}`,\n      method: 'GET',\n      accessToken,\n      transactionClassName: 'EmailTransaction'\n    });\n    return transaction;\n  });\n\n  return function getEmail(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nconst addEmail = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* (oktaAuth, options) {\n    const {\n      accessToken,\n      payload\n    } = options;\n    const transaction = yield sendRequest(oktaAuth, {\n      url: '/idp/myaccount/emails',\n      method: 'POST',\n      payload,\n      accessToken,\n      transactionClassName: 'EmailTransaction'\n    });\n    return transaction;\n  });\n\n  return function addEmail(_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nconst deleteEmail = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(function* (oktaAuth, options) {\n    const {\n      id,\n      accessToken\n    } = options;\n    const transaction = yield sendRequest(oktaAuth, {\n      url: `/idp/myaccount/emails/${id}`,\n      method: 'DELETE',\n      accessToken\n    });\n    return transaction;\n  });\n\n  return function deleteEmail(_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nconst sendEmailChallenge = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator(function* (oktaAuth, options) {\n    const {\n      id,\n      accessToken\n    } = options;\n    const transaction = yield sendRequest(oktaAuth, {\n      url: `/idp/myaccount/emails/${id}/challenge`,\n      method: 'POST',\n      accessToken,\n      transactionClassName: 'EmailChallengeTransaction'\n    });\n    return transaction;\n  });\n\n  return function sendEmailChallenge(_x9, _x10) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nconst getEmailChallenge = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator(function* (oktaAuth, options) {\n    const {\n      emailId,\n      challengeId,\n      accessToken\n    } = options;\n    const transaction = yield sendRequest(oktaAuth, {\n      url: `/idp/myaccount/emails/${emailId}/challenge/${challengeId}`,\n      method: 'POST',\n      accessToken,\n      transactionClassName: 'EmailChallengeTransaction'\n    });\n    return transaction;\n  });\n\n  return function getEmailChallenge(_x11, _x12) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\nconst verifyEmailChallenge = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator(function* (oktaAuth, options) {\n    const {\n      emailId,\n      challengeId,\n      payload,\n      accessToken\n    } = options;\n    const transaction = yield sendRequest(oktaAuth, {\n      url: `/idp/myaccount/emails/${emailId}/challenge/${challengeId}/verify`,\n      method: 'POST',\n      payload,\n      accessToken\n    });\n    return transaction;\n  });\n\n  return function verifyEmailChallenge(_x13, _x14) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\nexport { addEmail, deleteEmail, getEmail, getEmailChallenge, getEmails, sendEmailChallenge, verifyEmailChallenge }; //# sourceMappingURL=emailApi.js.map","map":null,"metadata":{},"sourceType":"module"}