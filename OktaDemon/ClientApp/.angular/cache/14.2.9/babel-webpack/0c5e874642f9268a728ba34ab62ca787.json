{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { getWellKnown, getKey } from './endpoints/well-known.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getOidcHash } from '../crypto/oidcHash.js';\nimport { verifyToken as verifyToken$1 } from '../crypto/verifyToken.js';\nimport { validateClaims } from './util/validateClaims.js';\nimport { decodeToken } from './decodeToken.js';\n\nfunction verifyToken(_x, _x2, _x3) {\n  return _verifyToken.apply(this, arguments);\n}\n\nfunction _verifyToken() {\n  _verifyToken = _asyncToGenerator(function* (sdk, token, validationParams) {\n    if (!token || !token.idToken) {\n      throw new AuthSdkError('Only idTokens may be verified');\n    }\n\n    var jwt = decodeToken(token.idToken);\n    const configuredIssuer = (validationParams === null || validationParams === void 0 ? void 0 : validationParams.issuer) || sdk.options.issuer;\n    const {\n      issuer\n    } = yield getWellKnown(sdk, configuredIssuer);\n    var validationOptions = Object.assign({\n      clientId: sdk.options.clientId,\n      ignoreSignature: sdk.options.ignoreSignature\n    }, validationParams, {\n      issuer\n    });\n    validateClaims(sdk, jwt.payload, validationOptions);\n\n    if (validationOptions.ignoreSignature == true || !sdk.features.isTokenVerifySupported()) {\n      return token;\n    }\n\n    const key = yield getKey(sdk, token.issuer, jwt.header.kid);\n    const valid = yield verifyToken$1(token.idToken, key);\n\n    if (!valid) {\n      throw new AuthSdkError('The token signature is not valid');\n    }\n\n    if (validationParams && validationParams.accessToken && token.claims.at_hash) {\n      const hash = yield getOidcHash(validationParams.accessToken);\n\n      if (hash !== token.claims.at_hash) {\n        throw new AuthSdkError('Token hash verification failed');\n      }\n    }\n\n    return token;\n  });\n  return _verifyToken.apply(this, arguments);\n}\n\nexport { verifyToken }; //# sourceMappingURL=verifyToken.js.map","map":null,"metadata":{},"sourceType":"module"}