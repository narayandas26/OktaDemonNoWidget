{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { validateVersionConfig, makeIdxState } from './idxState/index.js';\nimport { isRawIdxResponse } from './types/idx-js.js';\nimport { isAuthApiError } from '../errors/index.js';\nimport { getOAuthDomain } from '../oidc/util/oauth.js';\nimport { IDX_API_VERSION } from '../constants.js';\nimport { httpRequest } from '../http/request.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\n\nfunction introspect(_x) {\n  return _introspect.apply(this, arguments);\n}\n\nfunction _introspect() {\n  _introspect = _asyncToGenerator(function* (authClient, options = {}) {\n    var _a;\n\n    let rawIdxResponse;\n    let requestDidSucceed;\n    const savedIdxResponse = authClient.transactionManager.loadIdxResponse(options);\n\n    if (savedIdxResponse) {\n      rawIdxResponse = savedIdxResponse.rawIdxResponse;\n      requestDidSucceed = savedIdxResponse.requestDidSucceed;\n    }\n\n    if (!rawIdxResponse) {\n      const version = options.version || IDX_API_VERSION;\n      const domain = getOAuthDomain(authClient);\n      const {\n        interactionHandle,\n        stateHandle\n      } = options;\n      const withCredentials = (_a = options.withCredentials) !== null && _a !== void 0 ? _a : true;\n\n      try {\n        requestDidSucceed = true;\n        validateVersionConfig(version);\n        const url = `${domain}/idp/idx/introspect`;\n        const body = stateHandle ? {\n          stateToken: stateHandle\n        } : {\n          interactionHandle\n        };\n        const headers = {\n          'Content-Type': `application/ion+json; okta-version=${version}`,\n          Accept: `application/ion+json; okta-version=${version}`\n        };\n        rawIdxResponse = yield httpRequest(authClient, {\n          method: 'POST',\n          url,\n          headers,\n          withCredentials,\n          args: body\n        });\n      } catch (err) {\n        if (isAuthApiError(err) && err.xhr && isRawIdxResponse(err.xhr.responseJSON)) {\n          rawIdxResponse = err.xhr.responseJSON;\n          requestDidSucceed = false;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const {\n      withCredentials\n    } = options;\n    return makeIdxState(authClient, rawIdxResponse, {\n      withCredentials\n    }, requestDidSucceed);\n  });\n  return _introspect.apply(this, arguments);\n}\n\nexport { introspect }; //# sourceMappingURL=introspect.js.map","map":null,"metadata":{},"sourceType":"module"}