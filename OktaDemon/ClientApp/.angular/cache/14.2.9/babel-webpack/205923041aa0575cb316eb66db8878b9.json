{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../../errors/AuthSdkError.js';\nimport { removeNils } from '../../util/object.js';\nimport { toQueryString } from '../../util/url.js';\nimport { httpRequest } from '../../http/request.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\n\nfunction validateOptions(options) {\n  if (!options.clientId) {\n    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to get a token');\n  }\n\n  if (!options.redirectUri) {\n    throw new AuthSdkError('The redirectUri passed to /authorize must also be passed to /token');\n  }\n\n  if (!options.authorizationCode && !options.interactionCode) {\n    throw new AuthSdkError('An authorization code (returned from /authorize) must be passed to /token');\n  }\n\n  if (!options.codeVerifier) {\n    throw new AuthSdkError('The \"codeVerifier\" (generated and saved by your app) must be passed to /token');\n  }\n}\n\nfunction getPostData(sdk, options) {\n  var params = removeNils({\n    'client_id': options.clientId,\n    'redirect_uri': options.redirectUri,\n    'grant_type': options.interactionCode ? 'interaction_code' : 'authorization_code',\n    'code_verifier': options.codeVerifier\n  });\n\n  if (options.interactionCode) {\n    params['interaction_code'] = options.interactionCode;\n  } else if (options.authorizationCode) {\n    params.code = options.authorizationCode;\n  }\n\n  const {\n    clientSecret\n  } = sdk.options;\n\n  if (clientSecret) {\n    params['client_secret'] = clientSecret;\n  }\n\n  return toQueryString(params).slice(1);\n}\n\nfunction postToTokenEndpoint(sdk, options, urls) {\n  validateOptions(options);\n  var data = getPostData(sdk, options);\n  const headers = {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  };\n  return httpRequest(sdk, {\n    url: urls.tokenUrl,\n    method: 'POST',\n    args: data,\n    headers\n  });\n}\n\nfunction postRefreshToken(sdk, options, refreshToken) {\n  return httpRequest(sdk, {\n    url: refreshToken.tokenUrl,\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    args: Object.entries({\n      client_id: options.clientId,\n      grant_type: 'refresh_token',\n      scope: refreshToken.scopes.join(' '),\n      refresh_token: refreshToken.refreshToken\n    }).map(function ([name, value]) {\n      return name + '=' + encodeURIComponent(value);\n    }).join('&')\n  });\n}\n\nexport { postRefreshToken, postToTokenEndpoint };","map":{"version":3,"names":["AuthSdkError","removeNils","toQueryString","httpRequest","validateOptions","options","clientId","redirectUri","authorizationCode","interactionCode","codeVerifier","getPostData","sdk","params","code","clientSecret","slice","postToTokenEndpoint","urls","data","headers","url","tokenUrl","method","args","postRefreshToken","refreshToken","Object","entries","client_id","grant_type","scope","scopes","join","refresh_token","map","name","value","encodeURIComponent"],"sources":["C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@okta/okta-auth-js/esm/browser/oidc/endpoints/token.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../../errors/AuthSdkError.js';\nimport { removeNils } from '../../util/object.js';\nimport { toQueryString } from '../../util/url.js';\nimport { httpRequest } from '../../http/request.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\n\nfunction validateOptions(options) {\n    if (!options.clientId) {\n        throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to get a token');\n    }\n    if (!options.redirectUri) {\n        throw new AuthSdkError('The redirectUri passed to /authorize must also be passed to /token');\n    }\n    if (!options.authorizationCode && !options.interactionCode) {\n        throw new AuthSdkError('An authorization code (returned from /authorize) must be passed to /token');\n    }\n    if (!options.codeVerifier) {\n        throw new AuthSdkError('The \"codeVerifier\" (generated and saved by your app) must be passed to /token');\n    }\n}\nfunction getPostData(sdk, options) {\n    var params = removeNils({\n        'client_id': options.clientId,\n        'redirect_uri': options.redirectUri,\n        'grant_type': options.interactionCode ? 'interaction_code' : 'authorization_code',\n        'code_verifier': options.codeVerifier\n    });\n    if (options.interactionCode) {\n        params['interaction_code'] = options.interactionCode;\n    }\n    else if (options.authorizationCode) {\n        params.code = options.authorizationCode;\n    }\n    const { clientSecret } = sdk.options;\n    if (clientSecret) {\n        params['client_secret'] = clientSecret;\n    }\n    return toQueryString(params).slice(1);\n}\nfunction postToTokenEndpoint(sdk, options, urls) {\n    validateOptions(options);\n    var data = getPostData(sdk, options);\n    const headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n    };\n    return httpRequest(sdk, {\n        url: urls.tokenUrl,\n        method: 'POST',\n        args: data,\n        headers\n    });\n}\nfunction postRefreshToken(sdk, options, refreshToken) {\n    return httpRequest(sdk, {\n        url: refreshToken.tokenUrl,\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        args: Object.entries({\n            client_id: options.clientId,\n            grant_type: 'refresh_token',\n            scope: refreshToken.scopes.join(' '),\n            refresh_token: refreshToken.refreshToken,\n        }).map(function ([name, value]) {\n            return name + '=' + encodeURIComponent(value);\n        }).join('&'),\n    });\n}\n\nexport { postRefreshToken, postToTokenEndpoint };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}