{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { isPromise } from './types.js';\nimport { warn } from './console.js';\n\nclass PromiseQueue {\n  constructor(options = {\n    quiet: false\n  }) {\n    this.queue = [];\n    this.running = false;\n    this.options = options;\n  }\n\n  push(method, thisObject, ...args) {\n    return new Promise((resolve, reject) => {\n      if (this.queue.length > 0) {\n        if (this.options.quiet !== false) {\n          warn('Async method is being called but another async method is already running. ' + 'The new method will be delayed until the previous method completes.');\n        }\n      }\n\n      this.queue.push({\n        method,\n        thisObject,\n        args,\n        resolve,\n        reject\n      });\n      this.run();\n    });\n  }\n\n  run() {\n    if (this.running) {\n      return;\n    }\n\n    if (this.queue.length === 0) {\n      return;\n    }\n\n    this.running = true;\n    var queueItem = this.queue.shift();\n    var res = queueItem.method.apply(queueItem.thisObject, queueItem.args);\n\n    if (isPromise(res)) {\n      res.then(queueItem.resolve, queueItem.reject).finally(() => {\n        this.running = false;\n        this.run();\n      });\n    } else {\n      queueItem.resolve(res);\n      this.running = false;\n      this.run();\n    }\n  }\n\n}\n\nexport { PromiseQueue };","map":{"version":3,"names":["isPromise","warn","PromiseQueue","constructor","options","quiet","queue","running","push","method","thisObject","args","Promise","resolve","reject","length","run","queueItem","shift","res","apply","then","finally"],"sources":["C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@okta/okta-auth-js/esm/browser/util/PromiseQueue.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { isPromise } from './types.js';\nimport { warn } from './console.js';\n\nclass PromiseQueue {\n    constructor(options = { quiet: false }) {\n        this.queue = [];\n        this.running = false;\n        this.options = options;\n    }\n    push(method, thisObject, ...args) {\n        return new Promise((resolve, reject) => {\n            if (this.queue.length > 0) {\n                if (this.options.quiet !== false) {\n                    warn('Async method is being called but another async method is already running. ' +\n                        'The new method will be delayed until the previous method completes.');\n                }\n            }\n            this.queue.push({\n                method,\n                thisObject,\n                args,\n                resolve,\n                reject\n            });\n            this.run();\n        });\n    }\n    run() {\n        if (this.running) {\n            return;\n        }\n        if (this.queue.length === 0) {\n            return;\n        }\n        this.running = true;\n        var queueItem = this.queue.shift();\n        var res = queueItem.method.apply(queueItem.thisObject, queueItem.args);\n        if (isPromise(res)) {\n            res.then(queueItem.resolve, queueItem.reject).finally(() => {\n                this.running = false;\n                this.run();\n            });\n        }\n        else {\n            queueItem.resolve(res);\n            this.running = false;\n            this.run();\n        }\n    }\n}\n\nexport { PromiseQueue };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,SAAT,QAA0B,YAA1B;AACA,SAASC,IAAT,QAAqB,cAArB;;AAEA,MAAMC,YAAN,CAAmB;EACfC,WAAW,CAACC,OAAO,GAAG;IAAEC,KAAK,EAAE;EAAT,CAAX,EAA6B;IACpC,KAAKC,KAAL,GAAa,EAAb;IACA,KAAKC,OAAL,GAAe,KAAf;IACA,KAAKH,OAAL,GAAeA,OAAf;EACH;;EACDI,IAAI,CAACC,MAAD,EAASC,UAAT,EAAqB,GAAGC,IAAxB,EAA8B;IAC9B,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MACpC,IAAI,KAAKR,KAAL,CAAWS,MAAX,GAAoB,CAAxB,EAA2B;QACvB,IAAI,KAAKX,OAAL,CAAaC,KAAb,KAAuB,KAA3B,EAAkC;UAC9BJ,IAAI,CAAC,+EACD,qEADA,CAAJ;QAEH;MACJ;;MACD,KAAKK,KAAL,CAAWE,IAAX,CAAgB;QACZC,MADY;QAEZC,UAFY;QAGZC,IAHY;QAIZE,OAJY;QAKZC;MALY,CAAhB;MAOA,KAAKE,GAAL;IACH,CAfM,CAAP;EAgBH;;EACDA,GAAG,GAAG;IACF,IAAI,KAAKT,OAAT,EAAkB;MACd;IACH;;IACD,IAAI,KAAKD,KAAL,CAAWS,MAAX,KAAsB,CAA1B,EAA6B;MACzB;IACH;;IACD,KAAKR,OAAL,GAAe,IAAf;IACA,IAAIU,SAAS,GAAG,KAAKX,KAAL,CAAWY,KAAX,EAAhB;IACA,IAAIC,GAAG,GAAGF,SAAS,CAACR,MAAV,CAAiBW,KAAjB,CAAuBH,SAAS,CAACP,UAAjC,EAA6CO,SAAS,CAACN,IAAvD,CAAV;;IACA,IAAIX,SAAS,CAACmB,GAAD,CAAb,EAAoB;MAChBA,GAAG,CAACE,IAAJ,CAASJ,SAAS,CAACJ,OAAnB,EAA4BI,SAAS,CAACH,MAAtC,EAA8CQ,OAA9C,CAAsD,MAAM;QACxD,KAAKf,OAAL,GAAe,KAAf;QACA,KAAKS,GAAL;MACH,CAHD;IAIH,CALD,MAMK;MACDC,SAAS,CAACJ,OAAV,CAAkBM,GAAlB;MACA,KAAKZ,OAAL,GAAe,KAAf;MACA,KAAKS,GAAL;IACH;EACJ;;AA7Cc;;AAgDnB,SAASd,YAAT"},"metadata":{},"sourceType":"module"}