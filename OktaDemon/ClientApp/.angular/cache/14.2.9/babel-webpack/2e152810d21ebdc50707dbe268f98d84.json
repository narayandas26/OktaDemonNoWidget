{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { SelectAuthenticator } from './Base/SelectAuthenticator.js';\nimport { getAuthenticatorFromRemediation } from './util.js';\nimport { AuthenticatorKey } from '../types/api.js';\nlet SelectAuthenticatorAuthenticate = /*#__PURE__*/(() => {\n  class SelectAuthenticatorAuthenticate extends SelectAuthenticator {\n    constructor(remediation, values = {}, options = {}) {\n      var _a;\n\n      super(remediation, values, options);\n      const isRecoveryFlow = this.options.flow === 'recoverPassword';\n      const hasPasswordInOptions = (_a = getAuthenticatorFromRemediation(remediation).options) === null || _a === void 0 ? void 0 : _a.some(({\n        relatesTo\n      }) => (relatesTo === null || relatesTo === void 0 ? void 0 : relatesTo.key) === AuthenticatorKey.OKTA_PASSWORD);\n\n      if (hasPasswordInOptions && (isRecoveryFlow || this.values.password)) {\n        this.values.authenticators = [...(this.values.authenticators || []), {\n          key: AuthenticatorKey.OKTA_PASSWORD\n        }];\n      }\n    }\n\n  }\n\n  SelectAuthenticatorAuthenticate.remediationName = 'select-authenticator-authenticate';\n  return SelectAuthenticatorAuthenticate;\n})();\nexport { SelectAuthenticatorAuthenticate }; //# sourceMappingURL=SelectAuthenticatorAuthenticate.js.map","map":null,"metadata":{},"sourceType":"module"}