{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { Remediator } from './Remediator.js';\nimport { getAuthenticator } from '../../authenticator/getAuthenticator.js';\n\nclass VerifyAuthenticator extends Remediator {\n  constructor(remediation, values = {}) {\n    super(remediation, values);\n    this.authenticator = getAuthenticator(remediation);\n  }\n\n  getNextStep(authClient, context) {\n    var _a;\n\n    const nextStep = super.getNextStep(authClient, context);\n    const authenticatorEnrollments = (_a = context === null || context === void 0 ? void 0 : context.authenticatorEnrollments) === null || _a === void 0 ? void 0 : _a.value;\n    return Object.assign(Object.assign({}, nextStep), {\n      authenticatorEnrollments\n    });\n  }\n\n  canRemediate() {\n    return this.authenticator.canVerify(this.values);\n  }\n\n  mapCredentials() {\n    return this.authenticator.mapCredentials(this.values);\n  }\n\n  getInputCredentials(input) {\n    return this.authenticator.getInputs(input);\n  }\n\n  getValuesAfterProceed() {\n    this.values = super.getValuesAfterProceed();\n    let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'credentials');\n    return trimmedValues.reduce((values, valueKey) => Object.assign(Object.assign({}, values), {\n      [valueKey]: this.values[valueKey]\n    }), {});\n  }\n\n}\n\nexport { VerifyAuthenticator };","map":{"version":3,"names":["Remediator","getAuthenticator","VerifyAuthenticator","constructor","remediation","values","authenticator","getNextStep","authClient","context","_a","nextStep","authenticatorEnrollments","value","Object","assign","canRemediate","canVerify","mapCredentials","getInputCredentials","input","getInputs","getValuesAfterProceed","trimmedValues","keys","filter","valueKey","reduce"],"sources":["C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@okta/okta-auth-js/esm/browser/idx/remediators/Base/VerifyAuthenticator.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Remediator } from './Remediator.js';\nimport { getAuthenticator } from '../../authenticator/getAuthenticator.js';\n\nclass VerifyAuthenticator extends Remediator {\n    constructor(remediation, values = {}) {\n        super(remediation, values);\n        this.authenticator = getAuthenticator(remediation);\n    }\n    getNextStep(authClient, context) {\n        var _a;\n        const nextStep = super.getNextStep(authClient, context);\n        const authenticatorEnrollments = (_a = context === null || context === void 0 ? void 0 : context.authenticatorEnrollments) === null || _a === void 0 ? void 0 : _a.value;\n        return Object.assign(Object.assign({}, nextStep), { authenticatorEnrollments });\n    }\n    canRemediate() {\n        return this.authenticator.canVerify(this.values);\n    }\n    mapCredentials() {\n        return this.authenticator.mapCredentials(this.values);\n    }\n    getInputCredentials(input) {\n        return this.authenticator.getInputs(input);\n    }\n    getValuesAfterProceed() {\n        this.values = super.getValuesAfterProceed();\n        let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'credentials');\n        return trimmedValues.reduce((values, valueKey) => (Object.assign(Object.assign({}, values), { [valueKey]: this.values[valueKey] })), {});\n    }\n}\n\nexport { VerifyAuthenticator };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,UAAT,QAA2B,iBAA3B;AACA,SAASC,gBAAT,QAAiC,yCAAjC;;AAEA,MAAMC,mBAAN,SAAkCF,UAAlC,CAA6C;EACzCG,WAAW,CAACC,WAAD,EAAcC,MAAM,GAAG,EAAvB,EAA2B;IAClC,MAAMD,WAAN,EAAmBC,MAAnB;IACA,KAAKC,aAAL,GAAqBL,gBAAgB,CAACG,WAAD,CAArC;EACH;;EACDG,WAAW,CAACC,UAAD,EAAaC,OAAb,EAAsB;IAC7B,IAAIC,EAAJ;;IACA,MAAMC,QAAQ,GAAG,MAAMJ,WAAN,CAAkBC,UAAlB,EAA8BC,OAA9B,CAAjB;IACA,MAAMG,wBAAwB,GAAG,CAACF,EAAE,GAAGD,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACG,wBAAhE,MAA8F,IAA9F,IAAsGF,EAAE,KAAK,KAAK,CAAlH,GAAsH,KAAK,CAA3H,GAA+HA,EAAE,CAACG,KAAnK;IACA,OAAOC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,QAAlB,CAAd,EAA2C;MAAEC;IAAF,CAA3C,CAAP;EACH;;EACDI,YAAY,GAAG;IACX,OAAO,KAAKV,aAAL,CAAmBW,SAAnB,CAA6B,KAAKZ,MAAlC,CAAP;EACH;;EACDa,cAAc,GAAG;IACb,OAAO,KAAKZ,aAAL,CAAmBY,cAAnB,CAAkC,KAAKb,MAAvC,CAAP;EACH;;EACDc,mBAAmB,CAACC,KAAD,EAAQ;IACvB,OAAO,KAAKd,aAAL,CAAmBe,SAAnB,CAA6BD,KAA7B,CAAP;EACH;;EACDE,qBAAqB,GAAG;IACpB,KAAKjB,MAAL,GAAc,MAAMiB,qBAAN,EAAd;IACA,IAAIC,aAAa,GAAGT,MAAM,CAACU,IAAP,CAAY,KAAKnB,MAAjB,EAAyBoB,MAAzB,CAAgCC,QAAQ,IAAIA,QAAQ,KAAK,aAAzD,CAApB;IACA,OAAOH,aAAa,CAACI,MAAd,CAAqB,CAACtB,MAAD,EAASqB,QAAT,KAAuBZ,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,MAAlB,CAAd,EAAyC;MAAE,CAACqB,QAAD,GAAY,KAAKrB,MAAL,CAAYqB,QAAZ;IAAd,CAAzC,CAA5C,EAA8H,EAA9H,CAAP;EACH;;AAxBwC;;AA2B7C,SAASxB,mBAAT"},"metadata":{},"sourceType":"module"}