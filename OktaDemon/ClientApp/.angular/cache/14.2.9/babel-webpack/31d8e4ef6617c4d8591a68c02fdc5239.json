{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { __rest } from '../../../_virtual/_tslib.js';\nimport { Remediator } from '../Base/Remediator.js';\nimport { unwrapFormValue } from './util.js';\n\nclass GenericRemediator extends Remediator {\n  canRemediate() {\n    if (typeof this.remediation.action !== 'function') {\n      return false;\n    }\n\n    if (this.remediation.name === 'poll' || this.remediation.name.endsWith('-poll')) {\n      return true;\n    }\n\n    if (this.options.step) {\n      return true;\n    }\n\n    return false;\n  }\n\n  getData() {\n    const data = this.getInputs().reduce((acc, {\n      name\n    }) => {\n      acc[name] = this.values[name];\n      return acc;\n    }, {});\n    return data;\n  }\n\n  getNextStep(authClient, _context) {\n    const name = this.getName();\n    const inputs = this.getInputs();\n\n    const _a = this.remediation,\n          {\n      href,\n      method,\n      rel,\n      accepts,\n      produces,\n      value,\n      action\n    } = _a,\n          rest = __rest(_a, [\"href\", \"method\", \"rel\", \"accepts\", \"produces\", \"value\", \"action\"]);\n\n    if (action) {\n      return Object.assign(Object.assign(Object.assign({}, rest), !!inputs.length && {\n        inputs\n      }), {\n        action: function () {\n          var _ref = _asyncToGenerator(function* (params) {\n            return authClient.idx.proceed(Object.assign({\n              step: name\n            }, params));\n          });\n\n          return function action(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }()\n      });\n    }\n\n    return Object.assign({}, this.remediation);\n  }\n\n  getInputs() {\n    return (this.remediation.value || []).filter(({\n      name\n    }) => name !== 'stateHandle').map(unwrapFormValue).map(input => {\n      input.type = input.type || 'string';\n      return input;\n    });\n  }\n\n}\n\nexport { GenericRemediator }; //# sourceMappingURL=GenericRemediator.js.map","map":null,"metadata":{},"sourceType":"module"}