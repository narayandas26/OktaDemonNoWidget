{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { TOKEN_STORAGE_NAME, CACHE_STORAGE_NAME } from '../constants.js';\nimport { SavedObject } from './SavedObject.js';\nimport { isBrowser } from '../features.js';\nimport { warn } from '../util/console.js';\n\nfunction logServerSideMemoryStorageWarning(options) {\n  if (!isBrowser() && !options.storageProvider && !options.storageProvider) {\n    warn('Memory storage can only support simple single user use case on server side, please provide custom storageProvider or storageKey if advanced scenarios need to be supported.');\n  }\n}\n\nclass BaseStorageManager {\n  constructor(storageManagerOptions, cookieOptions, storageUtil) {\n    this.storageManagerOptions = storageManagerOptions;\n    this.cookieOptions = cookieOptions;\n    this.storageUtil = storageUtil;\n  }\n\n  getOptionsForSection(sectionName, overrideOptions) {\n    return Object.assign({}, this.storageManagerOptions[sectionName], overrideOptions);\n  }\n\n  getStorage(options) {\n    options = Object.assign({}, this.cookieOptions, options);\n\n    if (options.storageProvider) {\n      return options.storageProvider;\n    }\n\n    let {\n      storageType,\n      storageTypes\n    } = options;\n\n    if (storageType === 'sessionStorage') {\n      options.sessionCookie = true;\n    }\n\n    if (storageType && storageTypes) {\n      const idx = storageTypes.indexOf(storageType);\n\n      if (idx >= 0) {\n        storageTypes = storageTypes.slice(idx);\n        storageType = undefined;\n      }\n    }\n\n    if (!storageType) {\n      storageType = this.storageUtil.findStorageType(storageTypes);\n    }\n\n    return this.storageUtil.getStorageByType(storageType, options);\n  }\n\n  getTokenStorage(options) {\n    options = this.getOptionsForSection('token', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || TOKEN_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getHttpCache(options) {\n    options = this.getOptionsForSection('cache', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || CACHE_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n}\n\nexport { BaseStorageManager, logServerSideMemoryStorageWarning }; //# sourceMappingURL=BaseStorageManager.js.map","map":null,"metadata":{},"sourceType":"module"}