{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { Remediator } from './Remediator.js';\nimport { isAuthenticator } from '../../types/api.js';\nimport { compareAuthenticators } from '../../authenticator/util.js';\n\nclass AuthenticatorData extends Remediator {\n  constructor(remediation, values = {}) {\n    super(remediation, values);\n    this.authenticator = this.getAuthenticator();\n    this.formatAuthenticatorData();\n  }\n\n  formatAuthenticatorData() {\n    const authenticatorData = this.getAuthenticatorData();\n\n    if (authenticatorData) {\n      this.values.authenticatorsData = this.values.authenticatorsData.map(data => {\n        if (compareAuthenticators(this.authenticator, data)) {\n          return this.mapAuthenticatorDataFromValues(data);\n        }\n\n        return data;\n      });\n    } else {\n      const data = this.mapAuthenticatorDataFromValues();\n\n      if (data) {\n        this.values.authenticatorsData.push(data);\n      }\n    }\n  }\n\n  getAuthenticatorData() {\n    return this.values.authenticatorsData.find(data => compareAuthenticators(this.authenticator, data));\n  }\n\n  canRemediate() {\n    return this.values.authenticatorsData.some(data => compareAuthenticators(this.authenticator, data));\n  }\n\n  mapAuthenticatorDataFromValues(authenticatorData) {\n    let {\n      methodType,\n      authenticator\n    } = this.values;\n\n    if (!methodType && isAuthenticator(authenticator)) {\n      methodType = authenticator === null || authenticator === void 0 ? void 0 : authenticator.methodType;\n    }\n\n    const {\n      id,\n      enrollmentId\n    } = this.authenticator;\n    const data = Object.assign(Object.assign({\n      id,\n      enrollmentId\n    }, authenticatorData && authenticatorData), methodType && {\n      methodType\n    });\n    return data.methodType ? data : null;\n  }\n\n  getAuthenticatorFromRemediation() {\n    const authenticator = this.remediation.value.find(({\n      name\n    }) => name === 'authenticator');\n    return authenticator;\n  }\n\n  getValuesAfterProceed() {\n    this.values = super.getValuesAfterProceed();\n    const authenticatorsData = this.values.authenticatorsData.filter(data => compareAuthenticators(this.authenticator, data) !== true);\n    return Object.assign(Object.assign({}, this.values), {\n      authenticatorsData\n    });\n  }\n\n}\n\nexport { AuthenticatorData }; //# sourceMappingURL=AuthenticatorData.js.map","map":null,"metadata":{},"sourceType":"module"}