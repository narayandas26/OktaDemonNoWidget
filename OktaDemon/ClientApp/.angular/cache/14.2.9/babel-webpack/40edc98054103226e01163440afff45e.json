{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { parseOAuthResponseFromUrl } from '../oidc/parseFromUrl.js';\nimport { AuthStateManager } from './AuthStateManager.js';\nimport { ServiceManager } from './ServiceManager/browser.js';\n\nfunction mixinCore(Base) {\n  return class OktaAuthCore extends Base {\n    constructor(...args) {\n      super(...args);\n      this.authStateManager = new AuthStateManager(this);\n      this.serviceManager = new ServiceManager(this, this.options.services);\n    }\n\n    start() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        yield _this.serviceManager.start();\n\n        _this.tokenManager.start();\n\n        if (!_this.token.isLoginRedirect()) {\n          yield _this.authStateManager.updateAuthState();\n        }\n      })();\n    }\n\n    stop() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        _this2.tokenManager.stop();\n\n        yield _this2.serviceManager.stop();\n      })();\n    }\n\n    handleLoginRedirect(tokens, originalUri) {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        let state = _this3.options.state;\n\n        if (tokens) {\n          _this3.tokenManager.setTokens(tokens);\n\n          originalUri = originalUri || _this3.getOriginalUri(_this3.options.state);\n        } else if (_this3.isLoginRedirect()) {\n          try {\n            const oAuthResponse = yield parseOAuthResponseFromUrl(_this3, {});\n            state = oAuthResponse.state;\n            originalUri = originalUri || _this3.getOriginalUri(state);\n            yield _this3.storeTokensFromRedirect();\n          } catch (e) {\n            yield _this3.authStateManager.updateAuthState();\n            throw e;\n          }\n        } else {\n          return;\n        }\n\n        yield _this3.authStateManager.updateAuthState();\n\n        _this3.removeOriginalUri(state);\n\n        const {\n          restoreOriginalUri\n        } = _this3.options;\n\n        if (restoreOriginalUri) {\n          yield restoreOriginalUri(_this3, originalUri);\n        } else if (originalUri) {\n          window.location.replace(originalUri);\n        }\n      })();\n    }\n\n  };\n}\n\nexport { mixinCore }; //# sourceMappingURL=mixin.js.map","map":null,"metadata":{},"sourceType":"module"}