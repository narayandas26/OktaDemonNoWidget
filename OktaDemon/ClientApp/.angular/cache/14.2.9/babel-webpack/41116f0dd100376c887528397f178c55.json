{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { getSavedTransactionMeta, createTransactionMeta, saveTransactionMeta } from './transactionMeta.js';\nimport { removeNils } from '../util/object.js';\nimport { getOAuthBaseUrl } from '../oidc/util/oauth.js';\nimport { httpRequest } from '../http/request.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\n\nfunction getResponse(meta) {\n  return {\n    meta,\n    interactionHandle: meta.interactionHandle,\n    state: meta.state\n  };\n}\n\nfunction interact(_x) {\n  return _interact.apply(this, arguments);\n}\n\nfunction _interact() {\n  _interact = _asyncToGenerator(function* (authClient, options = {}) {\n    options = removeNils(options);\n    let meta = getSavedTransactionMeta(authClient, options);\n\n    if (meta === null || meta === void 0 ? void 0 : meta.interactionHandle) {\n      return getResponse(meta);\n    }\n\n    meta = yield createTransactionMeta(authClient, Object.assign(Object.assign({}, meta), options));\n    const baseUrl = getOAuthBaseUrl(authClient);\n    let {\n      clientId,\n      redirectUri,\n      state,\n      scopes,\n      withCredentials,\n      codeChallenge,\n      codeChallengeMethod,\n      activationToken,\n      recoveryToken,\n      maxAge,\n      nonce\n    } = meta;\n    const clientSecret = options.clientSecret || authClient.options.clientSecret;\n    withCredentials = withCredentials !== null && withCredentials !== void 0 ? withCredentials : true;\n    const url = `${baseUrl}/v1/interact`;\n    const params = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n      client_id: clientId,\n      scope: scopes.join(' '),\n      redirect_uri: redirectUri,\n      code_challenge: codeChallenge,\n      code_challenge_method: codeChallengeMethod,\n      state\n    }, activationToken && {\n      activation_token: activationToken\n    }), recoveryToken && {\n      recovery_token: recoveryToken\n    }), clientSecret && {\n      client_secret: clientSecret\n    }), maxAge && {\n      max_age: maxAge\n    }), nonce && {\n      nonce\n    });\n    const headers = {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    };\n    const resp = yield httpRequest(authClient, {\n      method: 'POST',\n      url,\n      headers,\n      withCredentials,\n      args: params\n    });\n    const interactionHandle = resp.interaction_handle;\n    const newMeta = Object.assign(Object.assign({}, meta), {\n      interactionHandle,\n      withCredentials,\n      state,\n      scopes,\n      recoveryToken,\n      activationToken\n    });\n    saveTransactionMeta(authClient, newMeta);\n    return getResponse(newMeta);\n  });\n  return _interact.apply(this, arguments);\n}\n\nexport { interact }; //# sourceMappingURL=interact.js.map","map":null,"metadata":{},"sourceType":"module"}