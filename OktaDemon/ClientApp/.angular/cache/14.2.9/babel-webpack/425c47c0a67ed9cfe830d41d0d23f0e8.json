{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { base64UrlToBuffer, bufferToBase64Url } from '../crypto/base64.js';\n\nconst getEnrolledCredentials = (authenticatorEnrollments = []) => {\n  const credentials = [];\n  authenticatorEnrollments.forEach(enrollement => {\n    if (enrollement.key === 'webauthn') {\n      credentials.push({\n        type: 'public-key',\n        id: base64UrlToBuffer(enrollement.credentialId)\n      });\n    }\n  });\n  return credentials;\n};\n\nconst buildCredentialCreationOptions = (activationData, authenticatorEnrollments) => {\n  return {\n    publicKey: {\n      rp: activationData.rp,\n      user: {\n        id: base64UrlToBuffer(activationData.user.id),\n        name: activationData.user.name,\n        displayName: activationData.user.displayName\n      },\n      challenge: base64UrlToBuffer(activationData.challenge),\n      pubKeyCredParams: activationData.pubKeyCredParams,\n      attestation: activationData.attestation,\n      authenticatorSelection: activationData.authenticatorSelection,\n      excludeCredentials: getEnrolledCredentials(authenticatorEnrollments)\n    }\n  };\n};\n\nconst buildCredentialRequestOptions = (challengeData, authenticatorEnrollments) => {\n  return {\n    publicKey: {\n      challenge: base64UrlToBuffer(challengeData.challenge),\n      userVerification: challengeData.userVerification,\n      allowCredentials: getEnrolledCredentials(authenticatorEnrollments)\n    }\n  };\n};\n\nconst getAttestation = credential => {\n  const response = credential.response;\n  const id = credential.id;\n  const clientData = bufferToBase64Url(response.clientDataJSON);\n  const attestation = bufferToBase64Url(response.attestationObject);\n  return {\n    id,\n    clientData,\n    attestation\n  };\n};\n\nconst getAssertion = credential => {\n  const response = credential.response;\n  const id = credential.id;\n  const clientData = bufferToBase64Url(response.clientDataJSON);\n  const authenticatorData = bufferToBase64Url(response.authenticatorData);\n  const signatureData = bufferToBase64Url(response.signature);\n  return {\n    id,\n    clientData,\n    authenticatorData,\n    signatureData\n  };\n};\n\nexport { buildCredentialCreationOptions, buildCredentialRequestOptions, getAssertion, getAttestation };","map":{"version":3,"names":["base64UrlToBuffer","bufferToBase64Url","getEnrolledCredentials","authenticatorEnrollments","credentials","forEach","enrollement","key","push","type","id","credentialId","buildCredentialCreationOptions","activationData","publicKey","rp","user","name","displayName","challenge","pubKeyCredParams","attestation","authenticatorSelection","excludeCredentials","buildCredentialRequestOptions","challengeData","userVerification","allowCredentials","getAttestation","credential","response","clientData","clientDataJSON","attestationObject","getAssertion","authenticatorData","signatureData","signature"],"sources":["C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@okta/okta-auth-js/esm/browser/idx/webauthn.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { base64UrlToBuffer, bufferToBase64Url } from '../crypto/base64.js';\n\nconst getEnrolledCredentials = (authenticatorEnrollments = []) => {\n    const credentials = [];\n    authenticatorEnrollments.forEach((enrollement) => {\n        if (enrollement.key === 'webauthn') {\n            credentials.push({\n                type: 'public-key',\n                id: base64UrlToBuffer(enrollement.credentialId),\n            });\n        }\n    });\n    return credentials;\n};\nconst buildCredentialCreationOptions = (activationData, authenticatorEnrollments) => {\n    return {\n        publicKey: {\n            rp: activationData.rp,\n            user: {\n                id: base64UrlToBuffer(activationData.user.id),\n                name: activationData.user.name,\n                displayName: activationData.user.displayName\n            },\n            challenge: base64UrlToBuffer(activationData.challenge),\n            pubKeyCredParams: activationData.pubKeyCredParams,\n            attestation: activationData.attestation,\n            authenticatorSelection: activationData.authenticatorSelection,\n            excludeCredentials: getEnrolledCredentials(authenticatorEnrollments),\n        }\n    };\n};\nconst buildCredentialRequestOptions = (challengeData, authenticatorEnrollments) => {\n    return {\n        publicKey: {\n            challenge: base64UrlToBuffer(challengeData.challenge),\n            userVerification: challengeData.userVerification,\n            allowCredentials: getEnrolledCredentials(authenticatorEnrollments),\n        }\n    };\n};\nconst getAttestation = (credential) => {\n    const response = credential.response;\n    const id = credential.id;\n    const clientData = bufferToBase64Url(response.clientDataJSON);\n    const attestation = bufferToBase64Url(response.attestationObject);\n    return {\n        id,\n        clientData,\n        attestation\n    };\n};\nconst getAssertion = (credential) => {\n    const response = credential.response;\n    const id = credential.id;\n    const clientData = bufferToBase64Url(response.clientDataJSON);\n    const authenticatorData = bufferToBase64Url(response.authenticatorData);\n    const signatureData = bufferToBase64Url(response.signature);\n    return {\n        id,\n        clientData,\n        authenticatorData,\n        signatureData\n    };\n};\n\nexport { buildCredentialCreationOptions, buildCredentialRequestOptions, getAssertion, getAttestation };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,iBAAT,EAA4BC,iBAA5B,QAAqD,qBAArD;;AAEA,MAAMC,sBAAsB,GAAG,CAACC,wBAAwB,GAAG,EAA5B,KAAmC;EAC9D,MAAMC,WAAW,GAAG,EAApB;EACAD,wBAAwB,CAACE,OAAzB,CAAkCC,WAAD,IAAiB;IAC9C,IAAIA,WAAW,CAACC,GAAZ,KAAoB,UAAxB,EAAoC;MAChCH,WAAW,CAACI,IAAZ,CAAiB;QACbC,IAAI,EAAE,YADO;QAEbC,EAAE,EAAEV,iBAAiB,CAACM,WAAW,CAACK,YAAb;MAFR,CAAjB;IAIH;EACJ,CAPD;EAQA,OAAOP,WAAP;AACH,CAXD;;AAYA,MAAMQ,8BAA8B,GAAG,CAACC,cAAD,EAAiBV,wBAAjB,KAA8C;EACjF,OAAO;IACHW,SAAS,EAAE;MACPC,EAAE,EAAEF,cAAc,CAACE,EADZ;MAEPC,IAAI,EAAE;QACFN,EAAE,EAAEV,iBAAiB,CAACa,cAAc,CAACG,IAAf,CAAoBN,EAArB,CADnB;QAEFO,IAAI,EAAEJ,cAAc,CAACG,IAAf,CAAoBC,IAFxB;QAGFC,WAAW,EAAEL,cAAc,CAACG,IAAf,CAAoBE;MAH/B,CAFC;MAOPC,SAAS,EAAEnB,iBAAiB,CAACa,cAAc,CAACM,SAAhB,CAPrB;MAQPC,gBAAgB,EAAEP,cAAc,CAACO,gBAR1B;MASPC,WAAW,EAAER,cAAc,CAACQ,WATrB;MAUPC,sBAAsB,EAAET,cAAc,CAACS,sBAVhC;MAWPC,kBAAkB,EAAErB,sBAAsB,CAACC,wBAAD;IAXnC;EADR,CAAP;AAeH,CAhBD;;AAiBA,MAAMqB,6BAA6B,GAAG,CAACC,aAAD,EAAgBtB,wBAAhB,KAA6C;EAC/E,OAAO;IACHW,SAAS,EAAE;MACPK,SAAS,EAAEnB,iBAAiB,CAACyB,aAAa,CAACN,SAAf,CADrB;MAEPO,gBAAgB,EAAED,aAAa,CAACC,gBAFzB;MAGPC,gBAAgB,EAAEzB,sBAAsB,CAACC,wBAAD;IAHjC;EADR,CAAP;AAOH,CARD;;AASA,MAAMyB,cAAc,GAAIC,UAAD,IAAgB;EACnC,MAAMC,QAAQ,GAAGD,UAAU,CAACC,QAA5B;EACA,MAAMpB,EAAE,GAAGmB,UAAU,CAACnB,EAAtB;EACA,MAAMqB,UAAU,GAAG9B,iBAAiB,CAAC6B,QAAQ,CAACE,cAAV,CAApC;EACA,MAAMX,WAAW,GAAGpB,iBAAiB,CAAC6B,QAAQ,CAACG,iBAAV,CAArC;EACA,OAAO;IACHvB,EADG;IAEHqB,UAFG;IAGHV;EAHG,CAAP;AAKH,CAVD;;AAWA,MAAMa,YAAY,GAAIL,UAAD,IAAgB;EACjC,MAAMC,QAAQ,GAAGD,UAAU,CAACC,QAA5B;EACA,MAAMpB,EAAE,GAAGmB,UAAU,CAACnB,EAAtB;EACA,MAAMqB,UAAU,GAAG9B,iBAAiB,CAAC6B,QAAQ,CAACE,cAAV,CAApC;EACA,MAAMG,iBAAiB,GAAGlC,iBAAiB,CAAC6B,QAAQ,CAACK,iBAAV,CAA3C;EACA,MAAMC,aAAa,GAAGnC,iBAAiB,CAAC6B,QAAQ,CAACO,SAAV,CAAvC;EACA,OAAO;IACH3B,EADG;IAEHqB,UAFG;IAGHI,iBAHG;IAIHC;EAJG,CAAP;AAMH,CAZD;;AAcA,SAASxB,8BAAT,EAAyCY,6BAAzC,EAAwEU,YAAxE,EAAsFN,cAAtF"},"metadata":{},"sourceType":"module"}