{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { Remediator } from './Remediator.js';\nimport { getAuthenticatorFromRemediation } from '../util.js';\nimport { isAuthenticator } from '../../types/api.js';\nimport { findMatchedOption, compareAuthenticators } from '../../authenticator/util.js';\n\nclass SelectAuthenticator extends Remediator {\n  findMatchedOption(authenticators, options) {\n    let option;\n\n    for (let authenticator of authenticators) {\n      option = options.find(({\n        relatesTo\n      }) => relatesTo.key === authenticator.key);\n\n      if (option) {\n        break;\n      }\n    }\n\n    return option;\n  }\n\n  canRemediate() {\n    const {\n      authenticators,\n      authenticator\n    } = this.values;\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    const {\n      options\n    } = authenticatorFromRemediation;\n\n    if (!authenticators || !authenticators.length) {\n      return false;\n    }\n\n    if (isAuthenticator(authenticator) && authenticator.id) {\n      return true;\n    }\n\n    const matchedOption = this.findMatchedOption(authenticators, options);\n\n    if (matchedOption) {\n      return true;\n    }\n\n    return false;\n  }\n\n  mapAuthenticator(remediationValue) {\n    const {\n      authenticators,\n      authenticator\n    } = this.values;\n\n    if (isAuthenticator(authenticator) && authenticator.id) {\n      this.selectedAuthenticator = authenticator;\n      return authenticator;\n    }\n\n    const {\n      options\n    } = remediationValue;\n    const selectedOption = findMatchedOption(authenticators, options);\n    this.selectedAuthenticator = selectedOption.relatesTo;\n    this.selectedOption = selectedOption;\n    return {\n      id: selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.value.form.value.find(({\n        name\n      }) => name === 'id').value\n    };\n  }\n\n  getInputAuthenticator(remediation) {\n    const options = remediation.options.map(({\n      label,\n      relatesTo\n    }) => {\n      return {\n        label,\n        value: relatesTo.key\n      };\n    });\n    return {\n      name: 'authenticator',\n      type: 'string',\n      options\n    };\n  }\n\n  getValuesAfterProceed() {\n    this.values = super.getValuesAfterProceed();\n    const authenticators = this.values.authenticators.filter(authenticator => {\n      return compareAuthenticators(authenticator, this.selectedAuthenticator) !== true;\n    });\n    return Object.assign(Object.assign({}, this.values), {\n      authenticators\n    });\n  }\n\n}\n\nexport { SelectAuthenticator }; //# sourceMappingURL=SelectAuthenticator.js.map","map":null,"metadata":{},"sourceType":"module"}