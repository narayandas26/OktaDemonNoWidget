{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { __rest } from '../../../_virtual/_tslib.js';\nimport { generateRemediationFunctions } from './remediationParser.js';\nimport generateIdxAction from './generateIdxAction.js';\nimport { JSONPath } from 'jsonpath-plus';\nconst SKIP_FIELDS = Object.fromEntries(['remediation', 'context'].map(field => [field, !!'skip this field']));\n\nconst parseNonRemediations = function parseNonRemediations(authClient, idxResponse, toPersist = {}) {\n  const actions = {};\n  const context = {};\n  Object.keys(idxResponse).filter(field => !SKIP_FIELDS[field]).forEach(field => {\n    const fieldIsObject = typeof idxResponse[field] === 'object' && !!idxResponse[field];\n\n    if (!fieldIsObject) {\n      context[field] = idxResponse[field];\n      return;\n    }\n\n    if (idxResponse[field].rel) {\n      actions[idxResponse[field].name] = generateIdxAction(authClient, idxResponse[field], toPersist);\n      return;\n    }\n\n    const _a = idxResponse[field],\n          {\n      value: fieldValue,\n      type\n    } = _a,\n          info = __rest(_a, [\"value\", \"type\"]);\n\n    context[field] = Object.assign({\n      type\n    }, info);\n\n    if (type !== 'object') {\n      context[field].value = fieldValue;\n      return;\n    }\n\n    context[field].value = {};\n    Object.entries(fieldValue).forEach(([subField, value]) => {\n      if (value.rel) {\n        actions[`${field}-${subField.name || subField}`] = generateIdxAction(authClient, value, toPersist);\n      } else {\n        context[field].value[subField] = value;\n      }\n    });\n  });\n  return {\n    context,\n    actions\n  };\n};\n\nconst expandRelatesTo = (idxResponse, value) => {\n  Object.keys(value).forEach(k => {\n    if (k === 'relatesTo') {\n      const query = Array.isArray(value[k]) ? value[k][0] : value[k];\n\n      if (typeof query === 'string') {\n        const result = JSONPath({\n          path: query,\n          json: idxResponse\n        })[0];\n\n        if (result) {\n          value[k] = result;\n          return;\n        }\n      }\n    }\n\n    if (Array.isArray(value[k])) {\n      value[k].forEach(innerValue => expandRelatesTo(idxResponse, innerValue));\n    }\n  });\n};\n\nconst convertRemediationAction = (authClient, remediation, toPersist) => {\n  if (remediation.rel) {\n    const remediationActions = generateRemediationFunctions(authClient, [remediation], toPersist);\n    const actionFn = remediationActions[remediation.name];\n    return Object.assign(Object.assign({}, remediation), {\n      action: actionFn\n    });\n  }\n\n  return remediation;\n};\n\nconst parseIdxResponse = function parseIdxResponse(authClient, idxResponse, toPersist = {}) {\n  var _a;\n\n  const remediationData = ((_a = idxResponse.remediation) === null || _a === void 0 ? void 0 : _a.value) || [];\n  remediationData.forEach(remediation => expandRelatesTo(idxResponse, remediation));\n  const remediations = remediationData.map(remediation => convertRemediationAction(authClient, remediation, toPersist));\n  const {\n    context,\n    actions\n  } = parseNonRemediations(authClient, idxResponse, toPersist);\n  return {\n    remediations,\n    context,\n    actions\n  };\n};\n\nexport { parseIdxResponse, parseNonRemediations }; //# sourceMappingURL=idxResponseParser.js.map","map":null,"metadata":{},"sourceType":"module"}