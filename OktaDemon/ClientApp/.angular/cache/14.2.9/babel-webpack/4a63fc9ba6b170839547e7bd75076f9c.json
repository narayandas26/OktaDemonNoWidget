{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { btoa as b } from '../crypto/browser.js';\nimport { toQueryString } from '../util/url.js';\nimport { post } from '../http/request.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nimport { getOAuthUrls } from './util/oauth.js';\n\nfunction revokeToken(_x, _x2) {\n  return _revokeToken.apply(this, arguments);\n}\n\nfunction _revokeToken() {\n  _revokeToken = _asyncToGenerator(function* (sdk, token) {\n    let accessToken = '';\n    let refreshToken = '';\n\n    if (token) {\n      accessToken = token.accessToken;\n      refreshToken = token.refreshToken;\n    }\n\n    if (!accessToken && !refreshToken) {\n      throw new AuthSdkError('A valid access or refresh token object is required');\n    }\n\n    var clientId = sdk.options.clientId;\n    var clientSecret = sdk.options.clientSecret;\n\n    if (!clientId) {\n      throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to revoke a token');\n    }\n\n    var revokeUrl = getOAuthUrls(sdk).revokeUrl;\n    var args = toQueryString({\n      token_type_hint: refreshToken ? 'refresh_token' : 'access_token',\n      token: refreshToken || accessToken\n    }).slice(1);\n    var creds = clientSecret ? b(`${clientId}:${clientSecret}`) : b(clientId);\n    return post(sdk, revokeUrl, args, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + creds\n      }\n    });\n  });\n  return _revokeToken.apply(this, arguments);\n}\n\nexport { revokeToken }; //# sourceMappingURL=revokeToken.js.map","map":null,"metadata":{},"sourceType":"module"}