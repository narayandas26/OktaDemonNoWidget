{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { getRequiredValues, getAllValues, titleCase, getAuthenticatorFromRemediation } from '../util.js';\nimport { formatAuthenticator, compareAuthenticators } from '../../authenticator/util.js';\n\nclass Remediator {\n  constructor(remediation, values = {}, options = {}) {\n    this.values = Object.assign({}, values);\n    this.options = Object.assign({}, options);\n    this.formatAuthenticators();\n    this.remediation = remediation;\n  }\n\n  formatAuthenticators() {\n    this.values.authenticators = this.values.authenticators || [];\n    this.values.authenticators = this.values.authenticators.map(authenticator => {\n      return formatAuthenticator(authenticator);\n    });\n\n    if (this.values.authenticator) {\n      const authenticator = formatAuthenticator(this.values.authenticator);\n      const hasAuthenticatorInList = this.values.authenticators.some(existing => {\n        return compareAuthenticators(authenticator, existing);\n      });\n\n      if (!hasAuthenticatorInList) {\n        this.values.authenticators.push(authenticator);\n      }\n    }\n\n    this.values.authenticatorsData = this.values.authenticators.reduce((acc, authenticator) => {\n      if (typeof authenticator === 'object' && Object.keys(authenticator).length > 1) {\n        acc.push(authenticator);\n      }\n\n      return acc;\n    }, this.values.authenticatorsData || []);\n  }\n\n  getName() {\n    return this.remediation.name;\n  }\n\n  canRemediate() {\n    const required = getRequiredValues(this.remediation);\n    const needed = required.find(key => !this.hasData(key));\n\n    if (needed) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getData(key) {\n    if (!key) {\n      let allValues = getAllValues(this.remediation);\n      let res = allValues.reduce((data, key) => {\n        data[key] = this.getData(key);\n        return data;\n      }, {});\n      return res;\n    }\n\n    if (typeof this[`map${titleCase(key)}`] === 'function') {\n      const val = this[`map${titleCase(key)}`](this.remediation.value.find(({\n        name\n      }) => name === key));\n\n      if (val) {\n        return val;\n      }\n    }\n\n    if (this.map && this.map[key]) {\n      const entry = this.map[key];\n\n      for (let i = 0; i < entry.length; i++) {\n        let val = this.values[entry[i]];\n\n        if (val) {\n          return val;\n        }\n      }\n    }\n\n    return this.values[key];\n  }\n\n  hasData(key) {\n    return !!this.getData(key);\n  }\n\n  getNextStep(_authClient, _context) {\n    const name = this.getName();\n    const inputs = this.getInputs();\n    const authenticator = this.getAuthenticator();\n    const type = authenticator === null || authenticator === void 0 ? void 0 : authenticator.type;\n    return Object.assign(Object.assign({\n      name,\n      inputs\n    }, type && {\n      type\n    }), authenticator && {\n      authenticator\n    });\n  }\n\n  getInputs() {\n    const inputs = [];\n    const inputsFromRemediation = this.remediation.value || [];\n    inputsFromRemediation.forEach(inputFromRemediation => {\n      let input;\n      let {\n        name,\n        type,\n        visible,\n        messages\n      } = inputFromRemediation;\n\n      if (visible === false) {\n        return;\n      }\n\n      if (typeof this[`getInput${titleCase(name)}`] === 'function') {\n        input = this[`getInput${titleCase(name)}`](inputFromRemediation);\n      } else if (type !== 'object') {\n        let alias;\n        const aliases = (this.map ? this.map[name] : null) || [];\n\n        if (aliases.length === 1) {\n          alias = aliases[0];\n        } else {\n          alias = aliases.find(name => Object.keys(this.values).includes(name));\n        }\n\n        if (alias) {\n          input = Object.assign(Object.assign({}, inputFromRemediation), {\n            name: alias\n          });\n        }\n      }\n\n      if (!input) {\n        input = inputFromRemediation;\n      }\n\n      if (Array.isArray(input)) {\n        input.forEach(i => inputs.push(i));\n      } else {\n        if (messages) {\n          input.messages = messages;\n        }\n\n        inputs.push(input);\n      }\n    });\n    return inputs;\n  }\n\n  static getMessages(remediation) {\n    var _a, _b;\n\n    if (!remediation.value) {\n      return;\n    }\n\n    return (_b = (_a = remediation.value[0]) === null || _a === void 0 ? void 0 : _a.form) === null || _b === void 0 ? void 0 : _b.value.reduce((messages, field) => {\n      if (field.messages) {\n        messages = [...messages, ...field.messages.value];\n      }\n\n      return messages;\n    }, []);\n  }\n\n  getValuesAfterProceed() {\n    const inputsFromRemediation = this.remediation.value || [];\n    const inputsFromRemediator = this.getInputs();\n    const inputs = [...inputsFromRemediation, ...inputsFromRemediator];\n\n    for (const input of inputs) {\n      delete this.values[input.name];\n    }\n\n    return this.values;\n  }\n\n  getAuthenticator() {\n    var _a, _b;\n\n    const relatesTo = (_a = this.remediation.relatesTo) === null || _a === void 0 ? void 0 : _a.value;\n\n    if (!relatesTo) {\n      return;\n    }\n\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n\n    if (!authenticatorFromRemediation) {\n      return relatesTo;\n    }\n\n    const id = authenticatorFromRemediation.form.value.find(({\n      name\n    }) => name === 'id').value;\n    const enrollmentId = (_b = authenticatorFromRemediation.form.value.find(({\n      name\n    }) => name === 'enrollmentId')) === null || _b === void 0 ? void 0 : _b.value;\n    return Object.assign(Object.assign({}, relatesTo), {\n      id,\n      enrollmentId\n    });\n  }\n\n}\n\nexport { Remediator };","map":{"version":3,"names":["getRequiredValues","getAllValues","titleCase","getAuthenticatorFromRemediation","formatAuthenticator","compareAuthenticators","Remediator","constructor","remediation","values","options","Object","assign","formatAuthenticators","authenticators","map","authenticator","hasAuthenticatorInList","some","existing","push","authenticatorsData","reduce","acc","keys","length","getName","name","canRemediate","required","needed","find","key","hasData","getData","allValues","res","data","val","value","entry","i","getNextStep","_authClient","_context","inputs","getInputs","getAuthenticator","type","inputsFromRemediation","forEach","inputFromRemediation","input","visible","messages","alias","aliases","includes","Array","isArray","getMessages","_a","_b","form","field","getValuesAfterProceed","inputsFromRemediator","relatesTo","authenticatorFromRemediation","id","enrollmentId"],"sources":["C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@okta/okta-auth-js/esm/browser/idx/remediators/Base/Remediator.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { getRequiredValues, getAllValues, titleCase, getAuthenticatorFromRemediation } from '../util.js';\nimport { formatAuthenticator, compareAuthenticators } from '../../authenticator/util.js';\n\nclass Remediator {\n    constructor(remediation, values = {}, options = {}) {\n        this.values = Object.assign({}, values);\n        this.options = Object.assign({}, options);\n        this.formatAuthenticators();\n        this.remediation = remediation;\n    }\n    formatAuthenticators() {\n        this.values.authenticators = (this.values.authenticators || []);\n        this.values.authenticators = this.values.authenticators.map(authenticator => {\n            return formatAuthenticator(authenticator);\n        });\n        if (this.values.authenticator) {\n            const authenticator = formatAuthenticator(this.values.authenticator);\n            const hasAuthenticatorInList = this.values.authenticators.some(existing => {\n                return compareAuthenticators(authenticator, existing);\n            });\n            if (!hasAuthenticatorInList) {\n                this.values.authenticators.push(authenticator);\n            }\n        }\n        this.values.authenticatorsData = this.values.authenticators.reduce((acc, authenticator) => {\n            if (typeof authenticator === 'object' && Object.keys(authenticator).length > 1) {\n                acc.push(authenticator);\n            }\n            return acc;\n        }, this.values.authenticatorsData || []);\n    }\n    getName() {\n        return this.remediation.name;\n    }\n    canRemediate() {\n        const required = getRequiredValues(this.remediation);\n        const needed = required.find((key) => !this.hasData(key));\n        if (needed) {\n            return false;\n        }\n        return true;\n    }\n    getData(key) {\n        if (!key) {\n            let allValues = getAllValues(this.remediation);\n            let res = allValues.reduce((data, key) => {\n                data[key] = this.getData(key);\n                return data;\n            }, {});\n            return res;\n        }\n        if (typeof this[`map${titleCase(key)}`] === 'function') {\n            const val = this[`map${titleCase(key)}`](this.remediation.value.find(({ name }) => name === key));\n            if (val) {\n                return val;\n            }\n        }\n        if (this.map && this.map[key]) {\n            const entry = this.map[key];\n            for (let i = 0; i < entry.length; i++) {\n                let val = this.values[entry[i]];\n                if (val) {\n                    return val;\n                }\n            }\n        }\n        return this.values[key];\n    }\n    hasData(key\n    ) {\n        return !!this.getData(key);\n    }\n    getNextStep(_authClient, _context) {\n        const name = this.getName();\n        const inputs = this.getInputs();\n        const authenticator = this.getAuthenticator();\n        const type = authenticator === null || authenticator === void 0 ? void 0 : authenticator.type;\n        return Object.assign(Object.assign({ name,\n            inputs }, (type && { type })), (authenticator && { authenticator }));\n    }\n    getInputs() {\n        const inputs = [];\n        const inputsFromRemediation = this.remediation.value || [];\n        inputsFromRemediation.forEach(inputFromRemediation => {\n            let input;\n            let { name, type, visible, messages } = inputFromRemediation;\n            if (visible === false) {\n                return;\n            }\n            if (typeof this[`getInput${titleCase(name)}`] === 'function') {\n                input = this[`getInput${titleCase(name)}`](inputFromRemediation);\n            }\n            else if (type !== 'object') {\n                let alias;\n                const aliases = (this.map ? this.map[name] : null) || [];\n                if (aliases.length === 1) {\n                    alias = aliases[0];\n                }\n                else {\n                    alias = aliases.find(name => Object.keys(this.values).includes(name));\n                }\n                if (alias) {\n                    input = Object.assign(Object.assign({}, inputFromRemediation), { name: alias });\n                }\n            }\n            if (!input) {\n                input = inputFromRemediation;\n            }\n            if (Array.isArray(input)) {\n                input.forEach(i => inputs.push(i));\n            }\n            else {\n                if (messages) {\n                    input.messages = messages;\n                }\n                inputs.push(input);\n            }\n        });\n        return inputs;\n    }\n    static getMessages(remediation) {\n        var _a, _b;\n        if (!remediation.value) {\n            return;\n        }\n        return (_b = (_a = remediation.value[0]) === null || _a === void 0 ? void 0 : _a.form) === null || _b === void 0 ? void 0 : _b.value.reduce((messages, field) => {\n            if (field.messages) {\n                messages = [...messages, ...field.messages.value];\n            }\n            return messages;\n        }, []);\n    }\n    getValuesAfterProceed() {\n        const inputsFromRemediation = this.remediation.value || [];\n        const inputsFromRemediator = this.getInputs();\n        const inputs = [\n            ...inputsFromRemediation,\n            ...inputsFromRemediator\n        ];\n        for (const input of inputs) {\n            delete this.values[input.name];\n        }\n        return this.values;\n    }\n    getAuthenticator() {\n        var _a, _b;\n        const relatesTo = (_a = this.remediation.relatesTo) === null || _a === void 0 ? void 0 : _a.value;\n        if (!relatesTo) {\n            return;\n        }\n        const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n        if (!authenticatorFromRemediation) {\n            return relatesTo;\n        }\n        const id = authenticatorFromRemediation.form.value\n            .find(({ name }) => name === 'id').value;\n        const enrollmentId = (_b = authenticatorFromRemediation.form.value\n            .find(({ name }) => name === 'enrollmentId')) === null || _b === void 0 ? void 0 : _b.value;\n        return Object.assign(Object.assign({}, relatesTo), { id,\n            enrollmentId });\n    }\n}\n\nexport { Remediator };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}