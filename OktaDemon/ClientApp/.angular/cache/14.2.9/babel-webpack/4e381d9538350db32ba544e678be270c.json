{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { AuthenticatorData } from './Base/AuthenticatorData.js';\n\nclass AuthenticatorVerificationData extends AuthenticatorData {\n  mapAuthenticator() {\n    return this.getAuthenticatorData();\n  }\n\n  getInputAuthenticator() {\n    const authenticator = this.getAuthenticatorFromRemediation();\n    const methodType = authenticator.form.value.find(({\n      name\n    }) => name === 'methodType');\n\n    if (methodType && methodType.options) {\n      return {\n        name: 'methodType',\n        type: 'string',\n        required: true,\n        options: methodType.options\n      };\n    }\n\n    const inputs = [...authenticator.form.value];\n    return inputs;\n  }\n\n  getValuesAfterProceed() {\n    this.values = super.getValuesAfterProceed();\n    let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'authenticator');\n    return trimmedValues.reduce((values, valueKey) => Object.assign(Object.assign({}, values), {\n      [valueKey]: this.values[valueKey]\n    }), {});\n  }\n\n}\n\nAuthenticatorVerificationData.remediationName = 'authenticator-verification-data';\nexport { AuthenticatorVerificationData };","map":{"version":3,"names":["AuthenticatorData","AuthenticatorVerificationData","mapAuthenticator","getAuthenticatorData","getInputAuthenticator","authenticator","getAuthenticatorFromRemediation","methodType","form","value","find","name","options","type","required","inputs","getValuesAfterProceed","values","trimmedValues","Object","keys","filter","valueKey","reduce","assign","remediationName"],"sources":["C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@okta/okta-auth-js/esm/browser/idx/remediators/AuthenticatorVerificationData.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { AuthenticatorData } from './Base/AuthenticatorData.js';\n\nclass AuthenticatorVerificationData extends AuthenticatorData {\n    mapAuthenticator() {\n        return this.getAuthenticatorData();\n    }\n    getInputAuthenticator() {\n        const authenticator = this.getAuthenticatorFromRemediation();\n        const methodType = authenticator.form.value.find(({ name }) => name === 'methodType');\n        if (methodType && methodType.options) {\n            return {\n                name: 'methodType',\n                type: 'string',\n                required: true,\n                options: methodType.options\n            };\n        }\n        const inputs = [...authenticator.form.value];\n        return inputs;\n    }\n    getValuesAfterProceed() {\n        this.values = super.getValuesAfterProceed();\n        let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'authenticator');\n        return trimmedValues.reduce((values, valueKey) => (Object.assign(Object.assign({}, values), { [valueKey]: this.values[valueKey] })), {});\n    }\n}\nAuthenticatorVerificationData.remediationName = 'authenticator-verification-data';\n\nexport { AuthenticatorVerificationData };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,iBAAT,QAAkC,6BAAlC;;AAEA,MAAMC,6BAAN,SAA4CD,iBAA5C,CAA8D;EAC1DE,gBAAgB,GAAG;IACf,OAAO,KAAKC,oBAAL,EAAP;EACH;;EACDC,qBAAqB,GAAG;IACpB,MAAMC,aAAa,GAAG,KAAKC,+BAAL,EAAtB;IACA,MAAMC,UAAU,GAAGF,aAAa,CAACG,IAAd,CAAmBC,KAAnB,CAAyBC,IAAzB,CAA8B,CAAC;MAAEC;IAAF,CAAD,KAAcA,IAAI,KAAK,YAArD,CAAnB;;IACA,IAAIJ,UAAU,IAAIA,UAAU,CAACK,OAA7B,EAAsC;MAClC,OAAO;QACHD,IAAI,EAAE,YADH;QAEHE,IAAI,EAAE,QAFH;QAGHC,QAAQ,EAAE,IAHP;QAIHF,OAAO,EAAEL,UAAU,CAACK;MAJjB,CAAP;IAMH;;IACD,MAAMG,MAAM,GAAG,CAAC,GAAGV,aAAa,CAACG,IAAd,CAAmBC,KAAvB,CAAf;IACA,OAAOM,MAAP;EACH;;EACDC,qBAAqB,GAAG;IACpB,KAAKC,MAAL,GAAc,MAAMD,qBAAN,EAAd;IACA,IAAIE,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKH,MAAjB,EAAyBI,MAAzB,CAAgCC,QAAQ,IAAIA,QAAQ,KAAK,eAAzD,CAApB;IACA,OAAOJ,aAAa,CAACK,MAAd,CAAqB,CAACN,MAAD,EAASK,QAAT,KAAuBH,MAAM,CAACK,MAAP,CAAcL,MAAM,CAACK,MAAP,CAAc,EAAd,EAAkBP,MAAlB,CAAd,EAAyC;MAAE,CAACK,QAAD,GAAY,KAAKL,MAAL,CAAYK,QAAZ;IAAd,CAAzC,CAA5C,EAA8H,EAA9H,CAAP;EACH;;AAtByD;;AAwB9DrB,6BAA6B,CAACwB,eAA9B,GAAgD,iCAAhD;AAEA,SAASxB,6BAAT"},"metadata":{},"sourceType":"module"}