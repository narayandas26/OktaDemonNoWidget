{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { getRequiredValues, getAllValues, titleCase, getAuthenticatorFromRemediation } from '../util.js';\nimport { formatAuthenticator, compareAuthenticators } from '../../authenticator/util.js';\n\nclass Remediator {\n  constructor(remediation, values = {}, options = {}) {\n    this.values = Object.assign({}, values);\n    this.options = Object.assign({}, options);\n    this.formatAuthenticators();\n    this.remediation = remediation;\n  }\n\n  formatAuthenticators() {\n    this.values.authenticators = this.values.authenticators || [];\n    this.values.authenticators = this.values.authenticators.map(authenticator => {\n      return formatAuthenticator(authenticator);\n    });\n\n    if (this.values.authenticator) {\n      const authenticator = formatAuthenticator(this.values.authenticator);\n      const hasAuthenticatorInList = this.values.authenticators.some(existing => {\n        return compareAuthenticators(authenticator, existing);\n      });\n\n      if (!hasAuthenticatorInList) {\n        this.values.authenticators.push(authenticator);\n      }\n    }\n\n    this.values.authenticatorsData = this.values.authenticators.reduce((acc, authenticator) => {\n      if (typeof authenticator === 'object' && Object.keys(authenticator).length > 1) {\n        acc.push(authenticator);\n      }\n\n      return acc;\n    }, this.values.authenticatorsData || []);\n  }\n\n  getName() {\n    return this.remediation.name;\n  }\n\n  canRemediate() {\n    const required = getRequiredValues(this.remediation);\n    const needed = required.find(key => !this.hasData(key));\n\n    if (needed) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getData(key) {\n    if (!key) {\n      let allValues = getAllValues(this.remediation);\n      let res = allValues.reduce((data, key) => {\n        data[key] = this.getData(key);\n        return data;\n      }, {});\n      return res;\n    }\n\n    if (typeof this[`map${titleCase(key)}`] === 'function') {\n      const val = this[`map${titleCase(key)}`](this.remediation.value.find(({\n        name\n      }) => name === key));\n\n      if (val) {\n        return val;\n      }\n    }\n\n    if (this.map && this.map[key]) {\n      const entry = this.map[key];\n\n      for (let i = 0; i < entry.length; i++) {\n        let val = this.values[entry[i]];\n\n        if (val) {\n          return val;\n        }\n      }\n    }\n\n    return this.values[key];\n  }\n\n  hasData(key) {\n    return !!this.getData(key);\n  }\n\n  getNextStep(_authClient, _context) {\n    const name = this.getName();\n    const inputs = this.getInputs();\n    const authenticator = this.getAuthenticator();\n    const type = authenticator === null || authenticator === void 0 ? void 0 : authenticator.type;\n    return Object.assign(Object.assign({\n      name,\n      inputs\n    }, type && {\n      type\n    }), authenticator && {\n      authenticator\n    });\n  }\n\n  getInputs() {\n    const inputs = [];\n    const inputsFromRemediation = this.remediation.value || [];\n    inputsFromRemediation.forEach(inputFromRemediation => {\n      let input;\n      let {\n        name,\n        type,\n        visible,\n        messages\n      } = inputFromRemediation;\n\n      if (visible === false) {\n        return;\n      }\n\n      if (typeof this[`getInput${titleCase(name)}`] === 'function') {\n        input = this[`getInput${titleCase(name)}`](inputFromRemediation);\n      } else if (type !== 'object') {\n        let alias;\n        const aliases = (this.map ? this.map[name] : null) || [];\n\n        if (aliases.length === 1) {\n          alias = aliases[0];\n        } else {\n          alias = aliases.find(name => Object.keys(this.values).includes(name));\n        }\n\n        if (alias) {\n          input = Object.assign(Object.assign({}, inputFromRemediation), {\n            name: alias\n          });\n        }\n      }\n\n      if (!input) {\n        input = inputFromRemediation;\n      }\n\n      if (Array.isArray(input)) {\n        input.forEach(i => inputs.push(i));\n      } else {\n        if (messages) {\n          input.messages = messages;\n        }\n\n        inputs.push(input);\n      }\n    });\n    return inputs;\n  }\n\n  static getMessages(remediation) {\n    var _a, _b;\n\n    if (!remediation.value) {\n      return;\n    }\n\n    return (_b = (_a = remediation.value[0]) === null || _a === void 0 ? void 0 : _a.form) === null || _b === void 0 ? void 0 : _b.value.reduce((messages, field) => {\n      if (field.messages) {\n        messages = [...messages, ...field.messages.value];\n      }\n\n      return messages;\n    }, []);\n  }\n\n  getValuesAfterProceed() {\n    const inputsFromRemediation = this.remediation.value || [];\n    const inputsFromRemediator = this.getInputs();\n    const inputs = [...inputsFromRemediation, ...inputsFromRemediator];\n\n    for (const input of inputs) {\n      delete this.values[input.name];\n    }\n\n    return this.values;\n  }\n\n  getAuthenticator() {\n    var _a, _b;\n\n    const relatesTo = (_a = this.remediation.relatesTo) === null || _a === void 0 ? void 0 : _a.value;\n\n    if (!relatesTo) {\n      return;\n    }\n\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n\n    if (!authenticatorFromRemediation) {\n      return relatesTo;\n    }\n\n    const id = authenticatorFromRemediation.form.value.find(({\n      name\n    }) => name === 'id').value;\n    const enrollmentId = (_b = authenticatorFromRemediation.form.value.find(({\n      name\n    }) => name === 'enrollmentId')) === null || _b === void 0 ? void 0 : _b.value;\n    return Object.assign(Object.assign({}, relatesTo), {\n      id,\n      enrollmentId\n    });\n  }\n\n}\n\nexport { Remediator }; //# sourceMappingURL=Remediator.js.map","map":null,"metadata":{},"sourceType":"module"}