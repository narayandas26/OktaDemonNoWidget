{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { stringToBase64Url } from '../../crypto/base64.js';\nimport { webcrypto as c } from '../../crypto/browser.js';\nimport { DEFAULT_CODE_CHALLENGE_METHOD, MIN_VERIFIER_LENGTH, MAX_VERIFIER_LENGTH } from '../../constants.js';\n\nfunction dec2hex(dec) {\n  return ('0' + dec.toString(16)).substr(-2);\n}\n\nfunction getRandomString(length) {\n  var a = new Uint8Array(Math.ceil(length / 2));\n  c.getRandomValues(a);\n  var str = Array.from(a, dec2hex).join('');\n  return str.slice(0, length);\n}\n\nfunction generateVerifier(prefix) {\n  var verifier = prefix || '';\n\n  if (verifier.length < MIN_VERIFIER_LENGTH) {\n    verifier = verifier + getRandomString(MIN_VERIFIER_LENGTH - verifier.length);\n  }\n\n  return encodeURIComponent(verifier).slice(0, MAX_VERIFIER_LENGTH);\n}\n\nfunction computeChallenge(str) {\n  var buffer = new TextEncoder().encode(str);\n  return c.subtle.digest('SHA-256', buffer).then(function (arrayBuffer) {\n    var hash = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\n    var b64u = stringToBase64Url(hash);\n    return b64u;\n  });\n}\n\nvar PKCE = {\n  DEFAULT_CODE_CHALLENGE_METHOD,\n  generateVerifier,\n  computeChallenge\n};\nexport { PKCE as default };","map":{"version":3,"names":["stringToBase64Url","webcrypto","c","DEFAULT_CODE_CHALLENGE_METHOD","MIN_VERIFIER_LENGTH","MAX_VERIFIER_LENGTH","dec2hex","dec","toString","substr","getRandomString","length","a","Uint8Array","Math","ceil","getRandomValues","str","Array","from","join","slice","generateVerifier","prefix","verifier","encodeURIComponent","computeChallenge","buffer","TextEncoder","encode","subtle","digest","then","arrayBuffer","hash","String","fromCharCode","apply","b64u","PKCE","default"],"sources":["C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@okta/okta-auth-js/esm/browser/oidc/util/pkce.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { stringToBase64Url } from '../../crypto/base64.js';\nimport { webcrypto as c } from '../../crypto/browser.js';\nimport { DEFAULT_CODE_CHALLENGE_METHOD, MIN_VERIFIER_LENGTH, MAX_VERIFIER_LENGTH } from '../../constants.js';\n\nfunction dec2hex(dec) {\n    return ('0' + dec.toString(16)).substr(-2);\n}\nfunction getRandomString(length) {\n    var a = new Uint8Array(Math.ceil(length / 2));\n    c.getRandomValues(a);\n    var str = Array.from(a, dec2hex).join('');\n    return str.slice(0, length);\n}\nfunction generateVerifier(prefix) {\n    var verifier = prefix || '';\n    if (verifier.length < MIN_VERIFIER_LENGTH) {\n        verifier = verifier + getRandomString(MIN_VERIFIER_LENGTH - verifier.length);\n    }\n    return encodeURIComponent(verifier).slice(0, MAX_VERIFIER_LENGTH);\n}\nfunction computeChallenge(str) {\n    var buffer = new TextEncoder().encode(str);\n    return c.subtle.digest('SHA-256', buffer).then(function (arrayBuffer) {\n        var hash = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\n        var b64u = stringToBase64Url(hash);\n        return b64u;\n    });\n}\nvar PKCE = {\n    DEFAULT_CODE_CHALLENGE_METHOD,\n    generateVerifier,\n    computeChallenge\n};\n\nexport { PKCE as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,iBAAT,QAAkC,wBAAlC;AACA,SAASC,SAAS,IAAIC,CAAtB,QAA+B,yBAA/B;AACA,SAASC,6BAAT,EAAwCC,mBAAxC,EAA6DC,mBAA7D,QAAwF,oBAAxF;;AAEA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;EAClB,OAAO,CAAC,MAAMA,GAAG,CAACC,QAAJ,CAAa,EAAb,CAAP,EAAyBC,MAAzB,CAAgC,CAAC,CAAjC,CAAP;AACH;;AACD,SAASC,eAAT,CAAyBC,MAAzB,EAAiC;EAC7B,IAAIC,CAAC,GAAG,IAAIC,UAAJ,CAAeC,IAAI,CAACC,IAAL,CAAUJ,MAAM,GAAG,CAAnB,CAAf,CAAR;EACAT,CAAC,CAACc,eAAF,CAAkBJ,CAAlB;EACA,IAAIK,GAAG,GAAGC,KAAK,CAACC,IAAN,CAAWP,CAAX,EAAcN,OAAd,EAAuBc,IAAvB,CAA4B,EAA5B,CAAV;EACA,OAAOH,GAAG,CAACI,KAAJ,CAAU,CAAV,EAAaV,MAAb,CAAP;AACH;;AACD,SAASW,gBAAT,CAA0BC,MAA1B,EAAkC;EAC9B,IAAIC,QAAQ,GAAGD,MAAM,IAAI,EAAzB;;EACA,IAAIC,QAAQ,CAACb,MAAT,GAAkBP,mBAAtB,EAA2C;IACvCoB,QAAQ,GAAGA,QAAQ,GAAGd,eAAe,CAACN,mBAAmB,GAAGoB,QAAQ,CAACb,MAAhC,CAArC;EACH;;EACD,OAAOc,kBAAkB,CAACD,QAAD,CAAlB,CAA6BH,KAA7B,CAAmC,CAAnC,EAAsChB,mBAAtC,CAAP;AACH;;AACD,SAASqB,gBAAT,CAA0BT,GAA1B,EAA+B;EAC3B,IAAIU,MAAM,GAAG,IAAIC,WAAJ,GAAkBC,MAAlB,CAAyBZ,GAAzB,CAAb;EACA,OAAOf,CAAC,CAAC4B,MAAF,CAASC,MAAT,CAAgB,SAAhB,EAA2BJ,MAA3B,EAAmCK,IAAnC,CAAwC,UAAUC,WAAV,EAAuB;IAClE,IAAIC,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgC,IAAIxB,UAAJ,CAAeoB,WAAf,CAAhC,CAAX;IACA,IAAIK,IAAI,GAAGtC,iBAAiB,CAACkC,IAAD,CAA5B;IACA,OAAOI,IAAP;EACH,CAJM,CAAP;AAKH;;AACD,IAAIC,IAAI,GAAG;EACPpC,6BADO;EAEPmB,gBAFO;EAGPI;AAHO,CAAX;AAMA,SAASa,IAAI,IAAIC,OAAjB"},"metadata":{},"sourceType":"module"}