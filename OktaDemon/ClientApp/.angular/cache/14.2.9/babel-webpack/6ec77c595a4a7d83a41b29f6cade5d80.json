{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { run } from './run.js';\nimport { hasSavedInteractionHandle } from './transactionMeta.js';\nimport { startTransaction } from './startTransaction.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { IdxFeature } from './types/api.js';\n\nfunction register(_x) {\n  return _register.apply(this, arguments);\n}\n\nfunction _register() {\n  _register = _asyncToGenerator(function* (authClient, options = {}) {\n    if (!hasSavedInteractionHandle(authClient)) {\n      const {\n        enabledFeatures,\n        availableSteps\n      } = yield startTransaction(authClient, Object.assign(Object.assign({}, options), {\n        flow: 'register',\n        autoRemediate: false\n      }));\n\n      if (!options.activationToken && enabledFeatures && !enabledFeatures.includes(IdxFeature.REGISTRATION)) {\n        throw new AuthSdkError('Registration is not supported based on your current org configuration.');\n      }\n\n      if (options.activationToken && (availableSteps === null || availableSteps === void 0 ? void 0 : availableSteps.some(({\n        name\n      }) => name === 'identify'))) {\n        throw new AuthSdkError('activationToken is not supported based on your current org configuration.');\n      }\n    }\n\n    return run(authClient, Object.assign(Object.assign({}, options), {\n      flow: 'register'\n    }));\n  });\n  return _register.apply(this, arguments);\n}\n\nexport { register };","map":{"version":3,"names":["run","hasSavedInteractionHandle","startTransaction","AuthSdkError","IdxFeature","register","authClient","options","enabledFeatures","availableSteps","Object","assign","flow","autoRemediate","activationToken","includes","REGISTRATION","some","name"],"sources":["C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@okta/okta-auth-js/esm/browser/idx/register.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { run } from './run.js';\nimport { hasSavedInteractionHandle } from './transactionMeta.js';\nimport { startTransaction } from './startTransaction.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { IdxFeature } from './types/api.js';\n\nasync function register(authClient, options = {}) {\n    if (!hasSavedInteractionHandle(authClient)) {\n        const { enabledFeatures, availableSteps } = await startTransaction(authClient, Object.assign(Object.assign({}, options), { flow: 'register', autoRemediate: false }));\n        if (!options.activationToken && enabledFeatures && !enabledFeatures.includes(IdxFeature.REGISTRATION)) {\n            throw new AuthSdkError('Registration is not supported based on your current org configuration.');\n        }\n        if (options.activationToken && (availableSteps === null || availableSteps === void 0 ? void 0 : availableSteps.some(({ name }) => name === 'identify'))) {\n            throw new AuthSdkError('activationToken is not supported based on your current org configuration.');\n        }\n    }\n    return run(authClient, Object.assign(Object.assign({}, options), { flow: 'register' }));\n}\n\nexport { register };\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,GAAT,QAAoB,UAApB;AACA,SAASC,yBAAT,QAA0C,sBAA1C;AACA,SAASC,gBAAT,QAAiC,uBAAjC;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,SAASC,UAAT,QAA2B,gBAA3B;;SAEeC,Q;;;;;gCAAf,WAAwBC,UAAxB,EAAoCC,OAAO,GAAG,EAA9C,EAAkD;IAC9C,IAAI,CAACN,yBAAyB,CAACK,UAAD,CAA9B,EAA4C;MACxC,MAAM;QAAEE,eAAF;QAAmBC;MAAnB,UAA4CP,gBAAgB,CAACI,UAAD,EAAaI,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,OAAlB,CAAd,EAA0C;QAAEK,IAAI,EAAE,UAAR;QAAoBC,aAAa,EAAE;MAAnC,CAA1C,CAAb,CAAlE;;MACA,IAAI,CAACN,OAAO,CAACO,eAAT,IAA4BN,eAA5B,IAA+C,CAACA,eAAe,CAACO,QAAhB,CAAyBX,UAAU,CAACY,YAApC,CAApD,EAAuG;QACnG,MAAM,IAAIb,YAAJ,CAAiB,wEAAjB,CAAN;MACH;;MACD,IAAII,OAAO,CAACO,eAAR,KAA4BL,cAAc,KAAK,IAAnB,IAA2BA,cAAc,KAAK,KAAK,CAAnD,GAAuD,KAAK,CAA5D,GAAgEA,cAAc,CAACQ,IAAf,CAAoB,CAAC;QAAEC;MAAF,CAAD,KAAcA,IAAI,KAAK,UAA3C,CAA5F,CAAJ,EAAyJ;QACrJ,MAAM,IAAIf,YAAJ,CAAiB,2EAAjB,CAAN;MACH;IACJ;;IACD,OAAOH,GAAG,CAACM,UAAD,EAAaI,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,OAAlB,CAAd,EAA0C;MAAEK,IAAI,EAAE;IAAR,CAA1C,CAAb,CAAV;EACH,C;;;;AAED,SAASP,QAAT"},"metadata":{},"sourceType":"module"}