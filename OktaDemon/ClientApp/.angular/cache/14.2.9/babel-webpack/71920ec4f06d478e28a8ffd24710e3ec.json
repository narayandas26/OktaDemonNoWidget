{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { getDefaultTokenParams } from './util/defaultTokenParams.js';\nimport { getOAuthUrls } from './util/oauth.js';\nimport { clone } from '../util/object.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nimport { postToTokenEndpoint } from './endpoints/token.js';\nimport { handleOAuthResponse } from './handleOAuthResponse.js';\n\nfunction exchangeCodeForTokens(sdk, tokenParams, urls) {\n  urls = urls || getOAuthUrls(sdk, tokenParams);\n  tokenParams = Object.assign({}, getDefaultTokenParams(sdk), clone(tokenParams));\n  const {\n    authorizationCode,\n    interactionCode,\n    codeVerifier,\n    clientId,\n    redirectUri,\n    scopes,\n    ignoreSignature,\n    state\n  } = tokenParams;\n  var getTokenOptions = {\n    clientId,\n    redirectUri,\n    authorizationCode,\n    interactionCode,\n    codeVerifier\n  };\n  return postToTokenEndpoint(sdk, getTokenOptions, urls).then(response => {\n    const responseType = ['token'];\n\n    if (scopes.indexOf('openid') !== -1) {\n      responseType.push('id_token');\n    }\n\n    const handleResponseOptions = {\n      clientId,\n      redirectUri,\n      scopes,\n      responseType,\n      ignoreSignature\n    };\n    return handleOAuthResponse(sdk, handleResponseOptions, response, urls).then(response => {\n      response.code = authorizationCode;\n      response.state = state;\n      return response;\n    });\n  }).finally(() => {\n    sdk.transactionManager.clear();\n  });\n}\n\nexport { exchangeCodeForTokens }; //# sourceMappingURL=exchangeCodeForTokens.js.map","map":null,"metadata":{},"sourceType":"module"}