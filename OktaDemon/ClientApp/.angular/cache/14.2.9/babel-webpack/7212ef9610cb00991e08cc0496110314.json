{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { BroadcastChannel } from 'broadcast-channel';\nimport { isBrowser } from '../features.js';\nimport { EVENT_ADDED, EVENT_REMOVED, EVENT_RENEWED, EVENT_SET_STORAGE } from '../oidc/types/TokenManager.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\n\nclass SyncStorageService {\n  constructor(tokenManager, options = {}) {\n    this.started = false;\n    this.enablePostMessage = true;\n    this.tokenManager = tokenManager;\n    this.options = options;\n    this.onTokenAddedHandler = this.onTokenAddedHandler.bind(this);\n    this.onTokenRemovedHandler = this.onTokenRemovedHandler.bind(this);\n    this.onTokenRenewedHandler = this.onTokenRenewedHandler.bind(this);\n    this.onSetStorageHandler = this.onSetStorageHandler.bind(this);\n    this.onSyncMessageHandler = this.onSyncMessageHandler.bind(this);\n  }\n\n  requiresLeadership() {\n    return false;\n  }\n\n  isStarted() {\n    return this.started;\n  }\n\n  canStart() {\n    return !!this.options.syncStorage && isBrowser();\n  }\n\n  start() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this.canStart()) {\n        return;\n      }\n\n      yield _this.stop();\n      const {\n        syncChannelName\n      } = _this.options;\n\n      try {\n        _this.channel = new BroadcastChannel(syncChannelName);\n      } catch (err) {\n        throw new AuthSdkError('SyncStorageService is not supported in current browser.');\n      }\n\n      _this.tokenManager.on(EVENT_ADDED, _this.onTokenAddedHandler);\n\n      _this.tokenManager.on(EVENT_REMOVED, _this.onTokenRemovedHandler);\n\n      _this.tokenManager.on(EVENT_RENEWED, _this.onTokenRenewedHandler);\n\n      _this.tokenManager.on(EVENT_SET_STORAGE, _this.onSetStorageHandler);\n\n      _this.channel.addEventListener('message', _this.onSyncMessageHandler);\n\n      _this.started = true;\n    })();\n  }\n\n  stop() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a, _b;\n\n      if (_this2.started) {\n        _this2.tokenManager.off(EVENT_ADDED, _this2.onTokenAddedHandler);\n\n        _this2.tokenManager.off(EVENT_REMOVED, _this2.onTokenRemovedHandler);\n\n        _this2.tokenManager.off(EVENT_RENEWED, _this2.onTokenRenewedHandler);\n\n        _this2.tokenManager.off(EVENT_SET_STORAGE, _this2.onSetStorageHandler);\n\n        (_a = _this2.channel) === null || _a === void 0 ? void 0 : _a.removeEventListener('message', _this2.onSyncMessageHandler);\n        yield (_b = _this2.channel) === null || _b === void 0 ? void 0 : _b.close();\n        _this2.channel = undefined;\n        _this2.started = false;\n      }\n    })();\n  }\n\n  onTokenAddedHandler(key, token) {\n    var _a;\n\n    if (!this.enablePostMessage) {\n      return;\n    }\n\n    (_a = this.channel) === null || _a === void 0 ? void 0 : _a.postMessage({\n      type: EVENT_ADDED,\n      key,\n      token\n    });\n  }\n\n  onTokenRemovedHandler(key, token) {\n    var _a;\n\n    if (!this.enablePostMessage) {\n      return;\n    }\n\n    (_a = this.channel) === null || _a === void 0 ? void 0 : _a.postMessage({\n      type: EVENT_REMOVED,\n      key,\n      token\n    });\n  }\n\n  onTokenRenewedHandler(key, token, oldToken) {\n    var _a;\n\n    if (!this.enablePostMessage) {\n      return;\n    }\n\n    (_a = this.channel) === null || _a === void 0 ? void 0 : _a.postMessage({\n      type: EVENT_RENEWED,\n      key,\n      token,\n      oldToken\n    });\n  }\n\n  onSetStorageHandler(storage) {\n    var _a;\n\n    (_a = this.channel) === null || _a === void 0 ? void 0 : _a.postMessage({\n      type: EVENT_SET_STORAGE,\n      storage\n    });\n  }\n\n  onSyncMessageHandler(msg) {\n    this.enablePostMessage = false;\n\n    switch (msg.type) {\n      case EVENT_SET_STORAGE:\n        this.tokenManager.getStorage().setStorage(msg.storage);\n        break;\n\n      case EVENT_ADDED:\n        this.tokenManager.emitAdded(msg.key, msg.token);\n        this.tokenManager.setExpireEventTimeout(msg.key, msg.token);\n        break;\n\n      case EVENT_REMOVED:\n        this.tokenManager.clearExpireEventTimeout(msg.key);\n        this.tokenManager.emitRemoved(msg.key, msg.token);\n        break;\n\n      case EVENT_RENEWED:\n        this.tokenManager.emitRenewed(msg.key, msg.token, msg.oldToken);\n        break;\n    }\n\n    this.enablePostMessage = true;\n  }\n\n}\n\nexport { SyncStorageService }; //# sourceMappingURL=SyncStorageService.js.map","map":null,"metadata":{},"sourceType":"module"}