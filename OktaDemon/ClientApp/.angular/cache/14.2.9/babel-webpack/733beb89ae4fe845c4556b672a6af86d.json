{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { isFingerprintSupported } from '../features.js';\nimport { addListener, removeListener } from '../oidc/util/browser.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\n\nfunction fingerprint(sdk, options) {\n  options = options || {};\n\n  if (!isFingerprintSupported()) {\n    return Promise.reject(new AuthSdkError('Fingerprinting is not supported on this device'));\n  }\n\n  var timeout;\n  var iframe;\n  var listener;\n  var promise = new Promise(function (resolve, reject) {\n    iframe = document.createElement('iframe');\n    iframe.style.display = 'none';\n\n    listener = function listener(e) {\n      if (!e || !e.data || e.origin !== sdk.getIssuerOrigin()) {\n        return;\n      }\n\n      try {\n        var msg = JSON.parse(e.data);\n      } catch (err) {\n        return;\n      }\n\n      if (!msg) {\n        return;\n      }\n\n      if (msg.type === 'FingerprintAvailable') {\n        return resolve(msg.fingerprint);\n      }\n\n      if (msg.type === 'FingerprintServiceReady') {\n        e.source.postMessage(JSON.stringify({\n          type: 'GetFingerprint'\n        }), e.origin);\n      }\n    };\n\n    addListener(window, 'message', listener);\n    iframe.src = sdk.getIssuerOrigin() + '/auth/services/devicefingerprint';\n    document.body.appendChild(iframe);\n    timeout = setTimeout(function () {\n      reject(new AuthSdkError('Fingerprinting timed out'));\n    }, (options === null || options === void 0 ? void 0 : options.timeout) || 15000);\n  });\n  return promise.finally(function () {\n    clearTimeout(timeout);\n    removeListener(window, 'message', listener);\n\n    if (document.body.contains(iframe)) {\n      iframe.parentElement.removeChild(iframe);\n    }\n  });\n}\n\nexport { fingerprint as default }; //# sourceMappingURL=fingerprint.js.map","map":null,"metadata":{},"sourceType":"module"}