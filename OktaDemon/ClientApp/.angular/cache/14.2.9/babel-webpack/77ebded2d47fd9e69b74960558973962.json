{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { IDX_API_VERSION } from '../../constants.js';\nimport v1 from './v1/parsers.js';\n\nconst parsersForVersion = function parsersForVersion(version) {\n  switch (version) {\n    case '1.0.0':\n      return v1;\n\n    case undefined:\n    case null:\n      throw new Error('Api version is required');\n\n    default:\n      throw new Error(`Unknown api version: ${version}.  Use an exact semver version.`);\n  }\n};\n\nfunction validateVersionConfig(version) {\n  if (!version) {\n    throw new Error('version is required');\n  }\n\n  const cleanVersion = (version !== null && version !== void 0 ? version : '').replace(/[^0-9a-zA-Z._-]/, '');\n\n  if (cleanVersion !== version || !version) {\n    throw new Error('invalid version supplied - version is required and uses semver syntax');\n  }\n\n  parsersForVersion(version);\n}\n\nfunction makeIdxState(authClient, rawIdxResponse, toPersist, requestDidSucceed) {\n  var _a;\n\n  const version = (_a = rawIdxResponse === null || rawIdxResponse === void 0 ? void 0 : rawIdxResponse.version) !== null && _a !== void 0 ? _a : IDX_API_VERSION;\n  validateVersionConfig(version);\n  const {\n    makeIdxState\n  } = parsersForVersion(version);\n  return makeIdxState(authClient, rawIdxResponse, toPersist, requestDidSucceed);\n}\n\nexport { makeIdxState, parsersForVersion, validateVersionConfig };","map":{"version":3,"names":["IDX_API_VERSION","v1","parsersForVersion","version","undefined","Error","validateVersionConfig","cleanVersion","replace","makeIdxState","authClient","rawIdxResponse","toPersist","requestDidSucceed","_a"],"sources":["C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@okta/okta-auth-js/esm/browser/idx/idxState/index.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { IDX_API_VERSION } from '../../constants.js';\nimport v1 from './v1/parsers.js';\n\nconst parsersForVersion = function parsersForVersion(version) {\n    switch (version) {\n        case '1.0.0':\n            return v1;\n        case undefined:\n        case null:\n            throw new Error('Api version is required');\n        default:\n            throw new Error(`Unknown api version: ${version}.  Use an exact semver version.`);\n    }\n};\nfunction validateVersionConfig(version) {\n    if (!version) {\n        throw new Error('version is required');\n    }\n    const cleanVersion = (version !== null && version !== void 0 ? version : '').replace(/[^0-9a-zA-Z._-]/, '');\n    if (cleanVersion !== version || !version) {\n        throw new Error('invalid version supplied - version is required and uses semver syntax');\n    }\n    parsersForVersion(version);\n}\nfunction makeIdxState(authClient, rawIdxResponse, toPersist, requestDidSucceed) {\n    var _a;\n    const version = (_a = rawIdxResponse === null || rawIdxResponse === void 0 ? void 0 : rawIdxResponse.version) !== null && _a !== void 0 ? _a : IDX_API_VERSION;\n    validateVersionConfig(version);\n    const { makeIdxState } = parsersForVersion(version);\n    return makeIdxState(authClient, rawIdxResponse, toPersist, requestDidSucceed);\n}\n\nexport { makeIdxState, parsersForVersion, validateVersionConfig };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,eAAT,QAAgC,oBAAhC;AACA,OAAOC,EAAP,MAAe,iBAAf;;AAEA,MAAMC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,OAA3B,EAAoC;EAC1D,QAAQA,OAAR;IACI,KAAK,OAAL;MACI,OAAOF,EAAP;;IACJ,KAAKG,SAAL;IACA,KAAK,IAAL;MACI,MAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;;IACJ;MACI,MAAM,IAAIA,KAAJ,CAAW,wBAAuBF,OAAQ,iCAA1C,CAAN;EAPR;AASH,CAVD;;AAWA,SAASG,qBAAT,CAA+BH,OAA/B,EAAwC;EACpC,IAAI,CAACA,OAAL,EAAc;IACV,MAAM,IAAIE,KAAJ,CAAU,qBAAV,CAAN;EACH;;EACD,MAAME,YAAY,GAAG,CAACJ,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyCA,OAAzC,GAAmD,EAApD,EAAwDK,OAAxD,CAAgE,iBAAhE,EAAmF,EAAnF,CAArB;;EACA,IAAID,YAAY,KAAKJ,OAAjB,IAA4B,CAACA,OAAjC,EAA0C;IACtC,MAAM,IAAIE,KAAJ,CAAU,uEAAV,CAAN;EACH;;EACDH,iBAAiB,CAACC,OAAD,CAAjB;AACH;;AACD,SAASM,YAAT,CAAsBC,UAAtB,EAAkCC,cAAlC,EAAkDC,SAAlD,EAA6DC,iBAA7D,EAAgF;EAC5E,IAAIC,EAAJ;;EACA,MAAMX,OAAO,GAAG,CAACW,EAAE,GAAGH,cAAc,KAAK,IAAnB,IAA2BA,cAAc,KAAK,KAAK,CAAnD,GAAuD,KAAK,CAA5D,GAAgEA,cAAc,CAACR,OAArF,MAAkG,IAAlG,IAA0GW,EAAE,KAAK,KAAK,CAAtH,GAA0HA,EAA1H,GAA+Hd,eAA/I;EACAM,qBAAqB,CAACH,OAAD,CAArB;EACA,MAAM;IAAEM;EAAF,IAAmBP,iBAAiB,CAACC,OAAD,CAA1C;EACA,OAAOM,YAAY,CAACC,UAAD,EAAaC,cAAb,EAA6BC,SAA7B,EAAwCC,iBAAxC,CAAnB;AACH;;AAED,SAASJ,YAAT,EAAuBP,iBAAvB,EAA0CI,qBAA1C"},"metadata":{},"sourceType":"module"}