{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { Remediator } from './Base/Remediator.js';\n\nclass EnrollmentChannelData extends Remediator {\n  getInputEmail() {\n    return [{\n      name: 'email',\n      type: 'string',\n      required: true,\n      label: 'Email'\n    }];\n  }\n\n  getInputPhoneNumber() {\n    return [{\n      name: 'phoneNumber',\n      type: 'string',\n      required: true,\n      label: 'Phone Number'\n    }];\n  }\n\n  canRemediate() {\n    return Boolean(this.values.email || this.values.phoneNumber);\n  }\n\n  getNextStep(authClient, context) {\n    const common = super.getNextStep(authClient, context);\n    const authenticator = context.currentAuthenticator.value;\n    return Object.assign(Object.assign({}, common), {\n      authenticator\n    });\n  }\n\n  getData() {\n    return {\n      stateHandle: this.values.stateHandle,\n      email: this.values.email,\n      phoneNumber: this.values.phoneNumber\n    };\n  }\n\n  getValuesAfterProceed() {\n    let trimmedValues = Object.keys(this.values).filter(valueKey => !['email', 'phoneNumber'].includes(valueKey));\n    return trimmedValues.reduce((values, valueKey) => Object.assign(Object.assign({}, values), {\n      [valueKey]: this.values[valueKey]\n    }), {});\n  }\n\n}\n\nEnrollmentChannelData.remediationName = 'enrollment-channel-data';\nexport { EnrollmentChannelData };","map":{"version":3,"names":["Remediator","EnrollmentChannelData","getInputEmail","name","type","required","label","getInputPhoneNumber","canRemediate","Boolean","values","email","phoneNumber","getNextStep","authClient","context","common","authenticator","currentAuthenticator","value","Object","assign","getData","stateHandle","getValuesAfterProceed","trimmedValues","keys","filter","valueKey","includes","reduce","remediationName"],"sources":["C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@okta/okta-auth-js/esm/browser/idx/remediators/EnrollmentChannelData.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Remediator } from './Base/Remediator.js';\n\nclass EnrollmentChannelData extends Remediator {\n    getInputEmail() {\n        return [\n            { name: 'email', type: 'string', required: true, label: 'Email' },\n        ];\n    }\n    getInputPhoneNumber() {\n        return [\n            { name: 'phoneNumber', type: 'string', required: true, label: 'Phone Number' },\n        ];\n    }\n    canRemediate() {\n        return Boolean(this.values.email || this.values.phoneNumber);\n    }\n    getNextStep(authClient, context) {\n        const common = super.getNextStep(authClient, context);\n        const authenticator = context.currentAuthenticator.value;\n        return Object.assign(Object.assign({}, common), { authenticator });\n    }\n    getData() {\n        return {\n            stateHandle: this.values.stateHandle,\n            email: this.values.email,\n            phoneNumber: this.values.phoneNumber\n        };\n    }\n    getValuesAfterProceed() {\n        let trimmedValues = Object.keys(this.values).filter(valueKey => !['email', 'phoneNumber'].includes(valueKey));\n        return trimmedValues.reduce((values, valueKey) => (Object.assign(Object.assign({}, values), { [valueKey]: this.values[valueKey] })), {});\n    }\n}\nEnrollmentChannelData.remediationName = 'enrollment-channel-data';\n\nexport { EnrollmentChannelData };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,UAAT,QAA2B,sBAA3B;;AAEA,MAAMC,qBAAN,SAAoCD,UAApC,CAA+C;EAC3CE,aAAa,GAAG;IACZ,OAAO,CACH;MAAEC,IAAI,EAAE,OAAR;MAAiBC,IAAI,EAAE,QAAvB;MAAiCC,QAAQ,EAAE,IAA3C;MAAiDC,KAAK,EAAE;IAAxD,CADG,CAAP;EAGH;;EACDC,mBAAmB,GAAG;IAClB,OAAO,CACH;MAAEJ,IAAI,EAAE,aAAR;MAAuBC,IAAI,EAAE,QAA7B;MAAuCC,QAAQ,EAAE,IAAjD;MAAuDC,KAAK,EAAE;IAA9D,CADG,CAAP;EAGH;;EACDE,YAAY,GAAG;IACX,OAAOC,OAAO,CAAC,KAAKC,MAAL,CAAYC,KAAZ,IAAqB,KAAKD,MAAL,CAAYE,WAAlC,CAAd;EACH;;EACDC,WAAW,CAACC,UAAD,EAAaC,OAAb,EAAsB;IAC7B,MAAMC,MAAM,GAAG,MAAMH,WAAN,CAAkBC,UAAlB,EAA8BC,OAA9B,CAAf;IACA,MAAME,aAAa,GAAGF,OAAO,CAACG,oBAAR,CAA6BC,KAAnD;IACA,OAAOC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,MAAlB,CAAd,EAAyC;MAAEC;IAAF,CAAzC,CAAP;EACH;;EACDK,OAAO,GAAG;IACN,OAAO;MACHC,WAAW,EAAE,KAAKb,MAAL,CAAYa,WADtB;MAEHZ,KAAK,EAAE,KAAKD,MAAL,CAAYC,KAFhB;MAGHC,WAAW,EAAE,KAAKF,MAAL,CAAYE;IAHtB,CAAP;EAKH;;EACDY,qBAAqB,GAAG;IACpB,IAAIC,aAAa,GAAGL,MAAM,CAACM,IAAP,CAAY,KAAKhB,MAAjB,EAAyBiB,MAAzB,CAAgCC,QAAQ,IAAI,CAAC,CAAC,OAAD,EAAU,aAAV,EAAyBC,QAAzB,CAAkCD,QAAlC,CAA7C,CAApB;IACA,OAAOH,aAAa,CAACK,MAAd,CAAqB,CAACpB,MAAD,EAASkB,QAAT,KAAuBR,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,MAAlB,CAAd,EAAyC;MAAE,CAACkB,QAAD,GAAY,KAAKlB,MAAL,CAAYkB,QAAZ;IAAd,CAAzC,CAA5C,EAA8H,EAA9H,CAAP;EACH;;AA7B0C;;AA+B/C3B,qBAAqB,CAAC8B,eAAtB,GAAwC,yBAAxC;AAEA,SAAS9B,qBAAT"},"metadata":{},"sourceType":"module"}