{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { isTransactionMeta } from './types/Transaction.js';\nimport { warn } from '../util/console.js';\nimport { clearTransactionFromSharedStorage, saveTransactionToSharedStorage, pruneSharedStorage, loadTransactionFromSharedStorage } from './util/sharedStorage.js';\n\nfunction createTransactionManager() {\n  return class TransactionManager {\n    constructor(options) {\n      this.storageManager = options.storageManager;\n      this.enableSharedStorage = options.enableSharedStorage === false ? false : true;\n      this.saveLastResponse = options.saveLastResponse === false ? false : true;\n      this.options = options;\n    }\n\n    clear(options = {}) {\n      const transactionStorage = this.storageManager.getTransactionStorage();\n      const meta = transactionStorage.getStorage();\n      transactionStorage.clearStorage();\n\n      if (this.enableSharedStorage && options.clearSharedStorage !== false) {\n        const state = options.state || (meta === null || meta === void 0 ? void 0 : meta.state);\n\n        if (state) {\n          clearTransactionFromSharedStorage(this.storageManager, state);\n        }\n      }\n    }\n\n    save(meta, options = {}) {\n      let storage = this.storageManager.getTransactionStorage();\n      const obj = storage.getStorage();\n\n      if (isTransactionMeta(obj) && !options.muteWarning) {\n        warn('a saved auth transaction exists in storage. This may indicate another auth flow is already in progress.');\n      }\n\n      storage.setStorage(meta);\n\n      if (this.enableSharedStorage && meta.state) {\n        saveTransactionToSharedStorage(this.storageManager, meta.state, meta);\n      }\n    }\n\n    exists(options = {}) {\n      try {\n        const meta = this.load(options);\n        return !!meta;\n      } catch (_a) {\n        return false;\n      }\n    }\n\n    load(options = {}) {\n      let meta;\n\n      if (this.enableSharedStorage && options.state) {\n        pruneSharedStorage(this.storageManager);\n        meta = loadTransactionFromSharedStorage(this.storageManager, options.state);\n\n        if (isTransactionMeta(meta)) {\n          return meta;\n        }\n      }\n\n      let storage = this.storageManager.getTransactionStorage();\n      meta = storage.getStorage();\n\n      if (isTransactionMeta(meta)) {\n        return meta;\n      }\n\n      return null;\n    }\n\n  };\n}\n\nexport { createTransactionManager }; //# sourceMappingURL=TransactionManager.js.map","map":null,"metadata":{},"sourceType":"module"}