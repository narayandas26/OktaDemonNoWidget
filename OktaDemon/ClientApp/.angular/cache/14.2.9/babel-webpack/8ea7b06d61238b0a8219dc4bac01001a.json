{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { isIDToken, isAccessToken } from './types/Token.js';\nimport { getWithoutPrompt } from './getWithoutPrompt.js';\nimport { renewTokensWithRefresh } from './renewTokensWithRefresh.js';\n\nfunction throwInvalidTokenError() {\n  throw new AuthSdkError('Renew must be passed a token with an array of scopes and an accessToken or idToken');\n}\n\nfunction getSingleToken(originalToken, tokens) {\n  if (isIDToken(originalToken)) {\n    return tokens.idToken;\n  }\n\n  if (isAccessToken(originalToken)) {\n    return tokens.accessToken;\n  }\n\n  throwInvalidTokenError();\n}\n\nfunction renewToken(_x, _x2) {\n  return _renewToken.apply(this, arguments);\n}\n\nfunction _renewToken() {\n  _renewToken = _asyncToGenerator(function* (sdk, token) {\n    if (!isIDToken(token) && !isAccessToken(token)) {\n      throwInvalidTokenError();\n    }\n\n    let tokens = sdk.tokenManager.getTokensSync();\n\n    if (tokens.refreshToken) {\n      tokens = yield renewTokensWithRefresh(sdk, {\n        scopes: token.scopes\n      }, tokens.refreshToken);\n      return getSingleToken(token, tokens);\n    }\n\n    var responseType;\n\n    if (sdk.options.pkce) {\n      responseType = 'code';\n    } else if (isAccessToken(token)) {\n      responseType = 'token';\n    } else {\n      responseType = 'id_token';\n    }\n\n    const {\n      scopes,\n      authorizeUrl,\n      userinfoUrl,\n      issuer\n    } = token;\n    return getWithoutPrompt(sdk, {\n      responseType,\n      scopes,\n      authorizeUrl,\n      userinfoUrl,\n      issuer\n    }).then(function (res) {\n      return getSingleToken(token, res.tokens);\n    });\n  });\n  return _renewToken.apply(this, arguments);\n}\n\nexport { renewToken }; //# sourceMappingURL=renewToken.js.map","map":null,"metadata":{},"sourceType":"module"}