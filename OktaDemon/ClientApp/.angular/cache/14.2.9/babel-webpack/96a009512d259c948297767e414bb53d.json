{"ast":null,"code":"/**\n * this is a set which automatically forgets\n * a given entry when a new entry is set and the ttl\n * of the old one is over\n */\nvar ObliviousSet =\n/** @class */\nfunction () {\n  function ObliviousSet(ttl) {\n    this.ttl = ttl;\n    this.map = new Map();\n    /**\n     * Creating calls to setTimeout() is expensive,\n     * so we only do that if there is not timeout already open.\n     */\n\n    this._to = false;\n  }\n\n  ObliviousSet.prototype.has = function (value) {\n    return this.map.has(value);\n  };\n\n  ObliviousSet.prototype.add = function (value) {\n    var _this = this;\n\n    this.map.set(value, now());\n    /**\n     * When a new value is added,\n     * start the cleanup at the next tick\n     * to not block the cpu for more important stuff\n     * that might happen.\n     */\n\n    if (!this._to) {\n      this._to = true;\n      setTimeout(function () {\n        _this._to = false;\n        removeTooOldValues(_this);\n      }, 0);\n    }\n  };\n\n  ObliviousSet.prototype.clear = function () {\n    this.map.clear();\n  };\n\n  return ObliviousSet;\n}();\n\nexport { ObliviousSet };\n/**\n * Removes all entries from the set\n * where the TTL has expired\n */\n\nexport function removeTooOldValues(obliviousSet) {\n  var olderThen = now() - obliviousSet.ttl;\n  var iterator = obliviousSet.map[Symbol.iterator]();\n  /**\n   * Because we can assume the new values are added at the bottom,\n   * we start from the top and stop as soon as we reach a non-too-old value.\n   */\n\n  while (true) {\n    var next = iterator.next().value;\n\n    if (!next) {\n      return; // no more elements\n    }\n\n    var value = next[0];\n    var time = next[1];\n\n    if (time < olderThen) {\n      obliviousSet.map.delete(value);\n    } else {\n      // We reached a value that is not old enough\n      return;\n    }\n  }\n}\nexport function now() {\n  return new Date().getTime();\n} //# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module"}