{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { parseIdxResponse } from './idxResponseParser.js';\n\nfunction makeIdxState(authClient, idxResponse, toPersist, requestDidSucceed) {\n  var _a, _b, _c;\n\n  const rawIdxResponse = idxResponse;\n  const {\n    remediations,\n    context,\n    actions\n  } = parseIdxResponse(authClient, idxResponse, toPersist);\n  const neededToProceed = [...remediations];\n\n  const proceed = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (remediationChoice, paramsFromUser = {}) {\n      const remediationChoiceObject = remediations.find(remediation => remediation.name === remediationChoice);\n\n      if (!remediationChoiceObject) {\n        return Promise.reject(`Unknown remediation choice: [${remediationChoice}]`);\n      }\n\n      const actionFn = remediationChoiceObject.action;\n\n      if (typeof actionFn !== 'function') {\n        return Promise.reject(`Current remediation cannot make form submit action: [${remediationChoice}]`);\n      }\n\n      return remediationChoiceObject.action(paramsFromUser);\n    });\n\n    return function proceed(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  const findCode = item => item.name === 'interaction_code';\n\n  const interactionCode = (_c = (_b = (_a = rawIdxResponse.successWithInteractionCode) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.find(findCode)) === null || _c === void 0 ? void 0 : _c.value;\n  return {\n    proceed,\n    neededToProceed,\n    actions,\n    context,\n    rawIdxState: rawIdxResponse,\n    interactionCode,\n    toPersist,\n    requestDidSucceed\n  };\n}\n\nexport { makeIdxState }; //# sourceMappingURL=makeIdxState.js.map","map":null,"metadata":{},"sourceType":"module"}