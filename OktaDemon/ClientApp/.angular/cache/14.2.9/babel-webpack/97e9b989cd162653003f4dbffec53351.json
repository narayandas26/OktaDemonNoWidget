{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getOAuthUrls } from './util/oauth.js';\nimport { isSameRefreshToken } from './util/refreshToken.js';\nimport { handleOAuthResponse } from './handleOAuthResponse.js';\nimport { postRefreshToken } from './endpoints/token.js';\nimport { isRefreshTokenInvalidError } from './util/errors.js';\n\nfunction renewTokensWithRefresh(_x, _x2, _x3) {\n  return _renewTokensWithRefresh.apply(this, arguments);\n}\n\nfunction _renewTokensWithRefresh() {\n  _renewTokensWithRefresh = _asyncToGenerator(function* (sdk, tokenParams, refreshTokenObject) {\n    const {\n      clientId\n    } = sdk.options;\n\n    if (!clientId) {\n      throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to renew tokens');\n    }\n\n    try {\n      const renewTokenParams = Object.assign({}, tokenParams, {\n        clientId\n      });\n      const tokenResponse = yield postRefreshToken(sdk, renewTokenParams, refreshTokenObject);\n      const urls = getOAuthUrls(sdk, tokenParams);\n      const {\n        tokens\n      } = yield handleOAuthResponse(sdk, renewTokenParams, tokenResponse, urls);\n      const {\n        refreshToken\n      } = tokens;\n\n      if (refreshToken && !isSameRefreshToken(refreshToken, refreshTokenObject)) {\n        sdk.tokenManager.updateRefreshToken(refreshToken);\n      }\n\n      return tokens;\n    } catch (err) {\n      if (isRefreshTokenInvalidError(err)) {\n        sdk.tokenManager.removeRefreshToken();\n      }\n\n      throw err;\n    }\n  });\n  return _renewTokensWithRefresh.apply(this, arguments);\n}\n\nexport { renewTokensWithRefresh }; //# sourceMappingURL=renewTokensWithRefresh.js.map","map":null,"metadata":{},"sourceType":"module"}