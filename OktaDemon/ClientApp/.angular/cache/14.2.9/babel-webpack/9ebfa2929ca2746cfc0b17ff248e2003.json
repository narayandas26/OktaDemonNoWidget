{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport crossFetch from 'cross-fetch';\nconst appJsonContentTypeRegex = /application\\/\\w*\\+?json/;\n\nfunction readData(response) {\n  if (response.headers.get('Content-Type') && response.headers.get('Content-Type').toLowerCase().indexOf('application/json') >= 0) {\n    return response.json().catch(e => {\n      return {\n        error: e,\n        errorSummary: 'Could not parse server response'\n      };\n    });\n  } else {\n    return response.text();\n  }\n}\n\nfunction formatResult(status, data, response) {\n  const isObject = typeof data === 'object';\n  const headers = {};\n\n  for (const pair of response.headers.entries()) {\n    headers[pair[0]] = pair[1];\n  }\n\n  const result = {\n    responseText: isObject ? JSON.stringify(data) : data,\n    status: status,\n    headers\n  };\n\n  if (isObject) {\n    result.responseType = 'json';\n    result.responseJSON = data;\n  }\n\n  return result;\n}\n\nfunction fetchRequest(method, url, args) {\n  var body = args.data;\n  var headers = args.headers || {};\n  var contentType = headers['Content-Type'] || headers['content-type'] || '';\n\n  if (body && typeof body !== 'string') {\n    if (appJsonContentTypeRegex.test(contentType)) {\n      body = JSON.stringify(body);\n    } else if (contentType === 'application/x-www-form-urlencoded') {\n      body = Object.entries(body).map(([param, value]) => `${param}=${encodeURIComponent(value)}`).join('&');\n    }\n  }\n\n  var fetch = window.fetch || crossFetch;\n  var fetchPromise = fetch(url, {\n    method: method,\n    headers: args.headers,\n    body: body,\n    credentials: args.withCredentials ? 'include' : 'omit'\n  });\n\n  if (!fetchPromise.finally) {\n    fetchPromise = Promise.resolve(fetchPromise);\n  }\n\n  return fetchPromise.then(function (response) {\n    var error = !response.ok;\n    var status = response.status;\n    return readData(response).then(data => {\n      return formatResult(status, data, response);\n    }).then(result => {\n      var _a;\n\n      if (error || ((_a = result.responseJSON) === null || _a === void 0 ? void 0 : _a.error)) {\n        throw result;\n      }\n\n      return result;\n    });\n  });\n}\n\nexport { fetchRequest as default }; //# sourceMappingURL=fetchRequest.js.map","map":null,"metadata":{},"sourceType":"module"}