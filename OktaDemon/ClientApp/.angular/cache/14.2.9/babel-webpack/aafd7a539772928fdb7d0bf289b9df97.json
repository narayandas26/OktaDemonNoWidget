{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport CustomError from '../errors/CustomError.js';\nimport { urlParamsToObject } from '../oidc/util/urlParams.js';\n\nclass EmailVerifyCallbackError extends CustomError {\n  constructor(state, otp) {\n    super(`Enter the OTP code in the originating client: ${otp}`);\n    this.name = 'EmailVerifyCallbackError';\n    this.state = state;\n    this.otp = otp;\n  }\n\n}\n\nfunction isEmailVerifyCallbackError(error) {\n  return error.name === 'EmailVerifyCallbackError';\n}\n\nfunction isEmailVerifyCallback(urlPath) {\n  return /(otp=)/i.test(urlPath) && /(state=)/i.test(urlPath);\n}\n\nfunction parseEmailVerifyCallback(urlPath) {\n  return urlParamsToObject(urlPath);\n}\n\nfunction handleEmailVerifyCallback(_x, _x2) {\n  return _handleEmailVerifyCallback.apply(this, arguments);\n}\n\nfunction _handleEmailVerifyCallback() {\n  _handleEmailVerifyCallback = _asyncToGenerator(function* (authClient, search) {\n    if (isEmailVerifyCallback(search)) {\n      const {\n        state,\n        otp\n      } = parseEmailVerifyCallback(search);\n\n      if (authClient.idx.canProceed({\n        state\n      })) {\n        return yield authClient.idx.proceed({\n          state,\n          otp\n        });\n      } else {\n        throw new EmailVerifyCallbackError(state, otp);\n      }\n    }\n  });\n  return _handleEmailVerifyCallback.apply(this, arguments);\n}\n\nexport { EmailVerifyCallbackError, handleEmailVerifyCallback, isEmailVerifyCallback, isEmailVerifyCallbackError, parseEmailVerifyCallback }; //# sourceMappingURL=emailVerify.js.map","map":null,"metadata":{},"sourceType":"module"}