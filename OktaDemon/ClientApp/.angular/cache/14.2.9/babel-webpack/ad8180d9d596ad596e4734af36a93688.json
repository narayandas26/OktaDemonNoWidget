{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { getWellKnown, getKey } from './endpoints/well-known.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getOidcHash } from '../crypto/oidcHash.js';\nimport { verifyToken as verifyToken$1 } from '../crypto/verifyToken.js';\nimport { validateClaims } from './util/validateClaims.js';\nimport { decodeToken } from './decodeToken.js';\n\nfunction verifyToken(_x, _x2, _x3) {\n  return _verifyToken.apply(this, arguments);\n}\n\nfunction _verifyToken() {\n  _verifyToken = _asyncToGenerator(function* (sdk, token, validationParams) {\n    if (!token || !token.idToken) {\n      throw new AuthSdkError('Only idTokens may be verified');\n    }\n\n    var jwt = decodeToken(token.idToken);\n    const configuredIssuer = (validationParams === null || validationParams === void 0 ? void 0 : validationParams.issuer) || sdk.options.issuer;\n    const {\n      issuer\n    } = yield getWellKnown(sdk, configuredIssuer);\n    var validationOptions = Object.assign({\n      clientId: sdk.options.clientId,\n      ignoreSignature: sdk.options.ignoreSignature\n    }, validationParams, {\n      issuer\n    });\n    validateClaims(sdk, jwt.payload, validationOptions);\n\n    if (validationOptions.ignoreSignature == true || !sdk.features.isTokenVerifySupported()) {\n      return token;\n    }\n\n    const key = yield getKey(sdk, token.issuer, jwt.header.kid);\n    const valid = yield verifyToken$1(token.idToken, key);\n\n    if (!valid) {\n      throw new AuthSdkError('The token signature is not valid');\n    }\n\n    if (validationParams && validationParams.accessToken && token.claims.at_hash) {\n      const hash = yield getOidcHash(validationParams.accessToken);\n\n      if (hash !== token.claims.at_hash) {\n        throw new AuthSdkError('Token hash verification failed');\n      }\n    }\n\n    return token;\n  });\n  return _verifyToken.apply(this, arguments);\n}\n\nexport { verifyToken };","map":{"version":3,"names":["getWellKnown","getKey","AuthSdkError","getOidcHash","verifyToken","verifyToken$1","validateClaims","decodeToken","sdk","token","validationParams","idToken","jwt","configuredIssuer","issuer","options","validationOptions","Object","assign","clientId","ignoreSignature","payload","features","isTokenVerifySupported","key","header","kid","valid","accessToken","claims","at_hash","hash"],"sources":["C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@okta/okta-auth-js/esm/browser/oidc/verifyToken.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { getWellKnown, getKey } from './endpoints/well-known.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getOidcHash } from '../crypto/oidcHash.js';\nimport { verifyToken as verifyToken$1 } from '../crypto/verifyToken.js';\nimport { validateClaims } from './util/validateClaims.js';\nimport { decodeToken } from './decodeToken.js';\n\nasync function verifyToken(sdk, token, validationParams) {\n    if (!token || !token.idToken) {\n        throw new AuthSdkError('Only idTokens may be verified');\n    }\n    var jwt = decodeToken(token.idToken);\n    const configuredIssuer = (validationParams === null || validationParams === void 0 ? void 0 : validationParams.issuer) || sdk.options.issuer;\n    const { issuer } = await getWellKnown(sdk, configuredIssuer);\n    var validationOptions = Object.assign({\n        clientId: sdk.options.clientId,\n        ignoreSignature: sdk.options.ignoreSignature\n    }, validationParams, {\n        issuer\n    });\n    validateClaims(sdk, jwt.payload, validationOptions);\n    if (validationOptions.ignoreSignature == true || !sdk.features.isTokenVerifySupported()) {\n        return token;\n    }\n    const key = await getKey(sdk, token.issuer, jwt.header.kid);\n    const valid = await verifyToken$1(token.idToken, key);\n    if (!valid) {\n        throw new AuthSdkError('The token signature is not valid');\n    }\n    if (validationParams && validationParams.accessToken && token.claims.at_hash) {\n        const hash = await getOidcHash(validationParams.accessToken);\n        if (hash !== token.claims.at_hash) {\n            throw new AuthSdkError('Token hash verification failed');\n        }\n    }\n    return token;\n}\n\nexport { verifyToken };\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,YAAT,EAAuBC,MAAvB,QAAqC,2BAArC;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,WAAW,IAAIC,aAAxB,QAA6C,0BAA7C;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,WAAT,QAA4B,kBAA5B;;SAEeH,W;;;;;mCAAf,WAA2BI,GAA3B,EAAgCC,KAAhC,EAAuCC,gBAAvC,EAAyD;IACrD,IAAI,CAACD,KAAD,IAAU,CAACA,KAAK,CAACE,OAArB,EAA8B;MAC1B,MAAM,IAAIT,YAAJ,CAAiB,+BAAjB,CAAN;IACH;;IACD,IAAIU,GAAG,GAAGL,WAAW,CAACE,KAAK,CAACE,OAAP,CAArB;IACA,MAAME,gBAAgB,GAAG,CAACH,gBAAgB,KAAK,IAArB,IAA6BA,gBAAgB,KAAK,KAAK,CAAvD,GAA2D,KAAK,CAAhE,GAAoEA,gBAAgB,CAACI,MAAtF,KAAiGN,GAAG,CAACO,OAAJ,CAAYD,MAAtI;IACA,MAAM;MAAEA;IAAF,UAAmBd,YAAY,CAACQ,GAAD,EAAMK,gBAAN,CAArC;IACA,IAAIG,iBAAiB,GAAGC,MAAM,CAACC,MAAP,CAAc;MAClCC,QAAQ,EAAEX,GAAG,CAACO,OAAJ,CAAYI,QADY;MAElCC,eAAe,EAAEZ,GAAG,CAACO,OAAJ,CAAYK;IAFK,CAAd,EAGrBV,gBAHqB,EAGH;MACjBI;IADiB,CAHG,CAAxB;IAMAR,cAAc,CAACE,GAAD,EAAMI,GAAG,CAACS,OAAV,EAAmBL,iBAAnB,CAAd;;IACA,IAAIA,iBAAiB,CAACI,eAAlB,IAAqC,IAArC,IAA6C,CAACZ,GAAG,CAACc,QAAJ,CAAaC,sBAAb,EAAlD,EAAyF;MACrF,OAAOd,KAAP;IACH;;IACD,MAAMe,GAAG,SAASvB,MAAM,CAACO,GAAD,EAAMC,KAAK,CAACK,MAAZ,EAAoBF,GAAG,CAACa,MAAJ,CAAWC,GAA/B,CAAxB;IACA,MAAMC,KAAK,SAAStB,aAAa,CAACI,KAAK,CAACE,OAAP,EAAgBa,GAAhB,CAAjC;;IACA,IAAI,CAACG,KAAL,EAAY;MACR,MAAM,IAAIzB,YAAJ,CAAiB,kCAAjB,CAAN;IACH;;IACD,IAAIQ,gBAAgB,IAAIA,gBAAgB,CAACkB,WAArC,IAAoDnB,KAAK,CAACoB,MAAN,CAAaC,OAArE,EAA8E;MAC1E,MAAMC,IAAI,SAAS5B,WAAW,CAACO,gBAAgB,CAACkB,WAAlB,CAA9B;;MACA,IAAIG,IAAI,KAAKtB,KAAK,CAACoB,MAAN,CAAaC,OAA1B,EAAmC;QAC/B,MAAM,IAAI5B,YAAJ,CAAiB,gCAAjB,CAAN;MACH;IACJ;;IACD,OAAOO,KAAP;EACH,C;;;;AAED,SAASL,WAAT"},"metadata":{},"sourceType":"module"}