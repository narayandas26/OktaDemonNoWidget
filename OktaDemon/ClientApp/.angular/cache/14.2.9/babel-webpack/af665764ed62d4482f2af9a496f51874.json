{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { __rest } from '../../../_virtual/_tslib.js';\nimport { generateRemediationFunctions } from './remediationParser.js';\nimport generateIdxAction from './generateIdxAction.js';\nimport { JSONPath } from 'jsonpath-plus';\nconst SKIP_FIELDS = Object.fromEntries(['remediation', 'context'].map(field => [field, !!'skip this field']));\n\nconst parseNonRemediations = function parseNonRemediations(authClient, idxResponse, toPersist = {}) {\n  const actions = {};\n  const context = {};\n  Object.keys(idxResponse).filter(field => !SKIP_FIELDS[field]).forEach(field => {\n    const fieldIsObject = typeof idxResponse[field] === 'object' && !!idxResponse[field];\n\n    if (!fieldIsObject) {\n      context[field] = idxResponse[field];\n      return;\n    }\n\n    if (idxResponse[field].rel) {\n      actions[idxResponse[field].name] = generateIdxAction(authClient, idxResponse[field], toPersist);\n      return;\n    }\n\n    const _a = idxResponse[field],\n          {\n      value: fieldValue,\n      type\n    } = _a,\n          info = __rest(_a, [\"value\", \"type\"]);\n\n    context[field] = Object.assign({\n      type\n    }, info);\n\n    if (type !== 'object') {\n      context[field].value = fieldValue;\n      return;\n    }\n\n    context[field].value = {};\n    Object.entries(fieldValue).forEach(([subField, value]) => {\n      if (value.rel) {\n        actions[`${field}-${subField.name || subField}`] = generateIdxAction(authClient, value, toPersist);\n      } else {\n        context[field].value[subField] = value;\n      }\n    });\n  });\n  return {\n    context,\n    actions\n  };\n};\n\nconst expandRelatesTo = (idxResponse, value) => {\n  Object.keys(value).forEach(k => {\n    if (k === 'relatesTo') {\n      const query = Array.isArray(value[k]) ? value[k][0] : value[k];\n\n      if (typeof query === 'string') {\n        const result = JSONPath({\n          path: query,\n          json: idxResponse\n        })[0];\n\n        if (result) {\n          value[k] = result;\n          return;\n        }\n      }\n    }\n\n    if (Array.isArray(value[k])) {\n      value[k].forEach(innerValue => expandRelatesTo(idxResponse, innerValue));\n    }\n  });\n};\n\nconst convertRemediationAction = (authClient, remediation, toPersist) => {\n  if (remediation.rel) {\n    const remediationActions = generateRemediationFunctions(authClient, [remediation], toPersist);\n    const actionFn = remediationActions[remediation.name];\n    return Object.assign(Object.assign({}, remediation), {\n      action: actionFn\n    });\n  }\n\n  return remediation;\n};\n\nconst parseIdxResponse = function parseIdxResponse(authClient, idxResponse, toPersist = {}) {\n  var _a;\n\n  const remediationData = ((_a = idxResponse.remediation) === null || _a === void 0 ? void 0 : _a.value) || [];\n  remediationData.forEach(remediation => expandRelatesTo(idxResponse, remediation));\n  const remediations = remediationData.map(remediation => convertRemediationAction(authClient, remediation, toPersist));\n  const {\n    context,\n    actions\n  } = parseNonRemediations(authClient, idxResponse, toPersist);\n  return {\n    remediations,\n    context,\n    actions\n  };\n};\n\nexport { parseIdxResponse, parseNonRemediations };","map":{"version":3,"names":["__rest","generateRemediationFunctions","generateIdxAction","JSONPath","SKIP_FIELDS","Object","fromEntries","map","field","parseNonRemediations","authClient","idxResponse","toPersist","actions","context","keys","filter","forEach","fieldIsObject","rel","name","_a","value","fieldValue","type","info","assign","entries","subField","expandRelatesTo","k","query","Array","isArray","result","path","json","innerValue","convertRemediationAction","remediation","remediationActions","actionFn","action","parseIdxResponse","remediationData","remediations"],"sources":["C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@okta/okta-auth-js/esm/browser/idx/idxState/v1/idxResponseParser.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { __rest } from '../../../_virtual/_tslib.js';\nimport { generateRemediationFunctions } from './remediationParser.js';\nimport generateIdxAction from './generateIdxAction.js';\nimport { JSONPath } from 'jsonpath-plus';\n\nconst SKIP_FIELDS = Object.fromEntries([\n    'remediation',\n    'context',\n].map((field) => [field, !!'skip this field']));\nconst parseNonRemediations = function parseNonRemediations(authClient, idxResponse, toPersist = {}) {\n    const actions = {};\n    const context = {};\n    Object.keys(idxResponse)\n        .filter(field => !SKIP_FIELDS[field])\n        .forEach(field => {\n        const fieldIsObject = typeof idxResponse[field] === 'object' && !!idxResponse[field];\n        if (!fieldIsObject) {\n            context[field] = idxResponse[field];\n            return;\n        }\n        if (idxResponse[field].rel) {\n            actions[idxResponse[field].name] = generateIdxAction(authClient, idxResponse[field], toPersist);\n            return;\n        }\n        const _a = idxResponse[field], { value: fieldValue, type } = _a, info = __rest(_a, [\"value\", \"type\"]);\n        context[field] = Object.assign({ type }, info);\n        if (type !== 'object') {\n            context[field].value = fieldValue;\n            return;\n        }\n        context[field].value = {};\n        Object.entries(fieldValue)\n            .forEach(([subField, value]) => {\n            if (value.rel) {\n                actions[`${field}-${subField.name || subField}`] = generateIdxAction(authClient, value, toPersist);\n            }\n            else {\n                context[field].value[subField] = value;\n            }\n        });\n    });\n    return { context, actions };\n};\nconst expandRelatesTo = (idxResponse, value) => {\n    Object.keys(value).forEach(k => {\n        if (k === 'relatesTo') {\n            const query = Array.isArray(value[k]) ? value[k][0] : value[k];\n            if (typeof query === 'string') {\n                const result = JSONPath({ path: query, json: idxResponse })[0];\n                if (result) {\n                    value[k] = result;\n                    return;\n                }\n            }\n        }\n        if (Array.isArray(value[k])) {\n            value[k].forEach(innerValue => expandRelatesTo(idxResponse, innerValue));\n        }\n    });\n};\nconst convertRemediationAction = (authClient, remediation, toPersist) => {\n    if (remediation.rel) {\n        const remediationActions = generateRemediationFunctions(authClient, [remediation], toPersist);\n        const actionFn = remediationActions[remediation.name];\n        return Object.assign(Object.assign({}, remediation), { action: actionFn });\n    }\n    return remediation;\n};\nconst parseIdxResponse = function parseIdxResponse(authClient, idxResponse, toPersist = {}) {\n    var _a;\n    const remediationData = ((_a = idxResponse.remediation) === null || _a === void 0 ? void 0 : _a.value) || [];\n    remediationData.forEach(remediation => expandRelatesTo(idxResponse, remediation));\n    const remediations = remediationData.map(remediation => convertRemediationAction(authClient, remediation, toPersist));\n    const { context, actions } = parseNonRemediations(authClient, idxResponse, toPersist);\n    return {\n        remediations,\n        context,\n        actions,\n    };\n};\n\nexport { parseIdxResponse, parseNonRemediations };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}