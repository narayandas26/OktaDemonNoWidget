{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { Remediator } from './Base/Remediator.js';\nimport { OktaPassword } from '../authenticator/OktaPassword.js';\nimport '../types/api.js';\nlet EnrollProfile = /*#__PURE__*/(() => {\n  class EnrollProfile extends Remediator {\n    constructor(remediation, values = {}, options = {}) {\n      super(remediation, values, options);\n      this.authenticator = null;\n      const credentials = this.getCredentialsFromRemediation();\n\n      if (credentials) {\n        this.authenticator = this.authenticator = new OktaPassword({});\n      }\n    }\n\n    canRemediate() {\n      if (this.authenticator && !this.authenticator.canVerify(this.values)) {\n        return false;\n      }\n\n      const userProfileFromValues = this.getData().userProfile;\n\n      if (!userProfileFromValues) {\n        return false;\n      }\n\n      const userProfileFromRemediation = this.remediation.value.find(({\n        name\n      }) => name === 'userProfile');\n      return userProfileFromRemediation.form.value.reduce((canRemediate, curr) => {\n        if (curr.required) {\n          canRemediate = canRemediate && !!userProfileFromValues[curr.name];\n        }\n\n        return canRemediate;\n      }, true);\n    }\n\n    getCredentialsFromRemediation() {\n      return this.remediation.value.find(({\n        name\n      }) => name === 'credentials');\n    }\n\n    mapUserProfile({\n      form: {\n        value: profileAttributes\n      }\n    }) {\n      const attributeNames = profileAttributes.map(({\n        name\n      }) => name);\n      const data = attributeNames.reduce((attributeValues, attributeName) => this.values[attributeName] ? Object.assign(Object.assign({}, attributeValues), {\n        [attributeName]: this.values[attributeName]\n      }) : attributeValues, {});\n\n      if (Object.keys(data).length === 0) {\n        return;\n      }\n\n      return data;\n    }\n\n    mapCredentials() {\n      const val = this.authenticator && this.authenticator.mapCredentials(this.values);\n\n      if (!val) {\n        return;\n      }\n\n      return val;\n    }\n\n    getInputUserProfile(input) {\n      return [...input.form.value];\n    }\n\n    getInputCredentials(input) {\n      return [...input.form.value];\n    }\n\n    getErrorMessages(errorRemediation) {\n      return errorRemediation.value[0].form.value.reduce((errors, field) => {\n        if (field.messages) {\n          errors.push(field.messages.value[0].message);\n        }\n\n        return errors;\n      }, []);\n    }\n\n  }\n\n  EnrollProfile.remediationName = 'enroll-profile';\n  return EnrollProfile;\n})();\nexport { EnrollProfile }; //# sourceMappingURL=EnrollProfile.js.map","map":null,"metadata":{},"sourceType":"module"}