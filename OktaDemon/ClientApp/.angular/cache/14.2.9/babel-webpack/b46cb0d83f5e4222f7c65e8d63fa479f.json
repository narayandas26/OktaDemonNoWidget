{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { interact } from './interact.js';\nimport { introspect } from './introspect.js';\nimport { remediate } from './remediate.js';\nimport { IdxStatus } from './types/api.js';\nimport './remediators/EnrollAuthenticator.js';\nimport './remediators/EnrollPoll.js';\nimport './remediators/SelectEnrollmentChannel.js';\nimport './remediators/EnrollmentChannelData.js';\nimport './remediators/ChallengeAuthenticator.js';\nimport './remediators/ChallengePoll.js';\nimport './remediators/ResetAuthenticator.js';\nimport './remediators/EnrollProfile.js';\nimport './remediators/Identify.js';\nimport './remediators/ReEnrollAuthenticator.js';\nimport './remediators/RedirectIdp.js';\nimport './remediators/SelectAuthenticatorAuthenticate.js';\nimport './remediators/SelectAuthenticatorEnroll.js';\nimport './remediators/SelectAuthenticatorUnlockAccount.js';\nimport './remediators/SelectEnrollProfile.js';\nimport './remediators/AuthenticatorVerificationData.js';\nimport './remediators/AuthenticatorEnrollmentData.js';\nimport './remediators/Skip.js';\nimport { getFlowSpecification } from './flow/FlowSpecification.js';\nimport { saveTransactionMeta, getSavedTransactionMeta } from './transactionMeta.js';\nimport { getEnabledFeatures, getAvailableSteps, getMessagesFromResponse, isTerminalResponse } from './util.js';\n\nfunction initializeValues(options) {\n  const knownOptions = ['flow', 'remediators', 'actions', 'withCredentials', 'step', 'useGenericRemediator', 'exchangeCodeForTokens'];\n  const values = Object.assign({}, options);\n  knownOptions.forEach(option => {\n    delete values[option];\n  });\n  return values;\n}\n\nfunction initializeData(authClient, data) {\n  let {\n    options\n  } = data;\n  options = Object.assign(Object.assign({}, authClient.options.idx), options);\n  let {\n    flow,\n    withCredentials,\n    remediators,\n    actions\n  } = options;\n  const status = IdxStatus.PENDING;\n  flow = flow || authClient.idx.getFlow() || 'default';\n\n  if (flow) {\n    authClient.idx.setFlow(flow);\n    const flowSpec = getFlowSpecification(authClient, flow);\n    withCredentials = typeof withCredentials !== 'undefined' ? withCredentials : flowSpec.withCredentials;\n    remediators = remediators || flowSpec.remediators;\n    actions = actions || flowSpec.actions;\n  }\n\n  return Object.assign(Object.assign({}, data), {\n    options: Object.assign(Object.assign({}, options), {\n      flow,\n      withCredentials,\n      remediators,\n      actions\n    }),\n    status\n  });\n}\n\nfunction getDataFromIntrospect(_x, _x2) {\n  return _getDataFromIntrospect.apply(this, arguments);\n}\n\nfunction _getDataFromIntrospect() {\n  _getDataFromIntrospect = _asyncToGenerator(function* (authClient, data) {\n    const {\n      options\n    } = data;\n    const {\n      stateHandle,\n      withCredentials,\n      version,\n      state,\n      scopes,\n      recoveryToken,\n      activationToken,\n      maxAge,\n      nonce\n    } = options;\n    let idxResponse;\n    let meta = getSavedTransactionMeta(authClient, {\n      state,\n      recoveryToken,\n      activationToken\n    });\n\n    if (stateHandle) {\n      idxResponse = yield introspect(authClient, {\n        withCredentials,\n        version,\n        stateHandle\n      });\n    } else {\n      let interactionHandle = meta === null || meta === void 0 ? void 0 : meta.interactionHandle;\n\n      if (!interactionHandle) {\n        authClient.transactionManager.clear();\n        const interactResponse = yield interact(authClient, {\n          withCredentials,\n          state,\n          scopes,\n          activationToken,\n          recoveryToken,\n          maxAge,\n          nonce\n        });\n        interactionHandle = interactResponse.interactionHandle;\n        meta = interactResponse.meta;\n      }\n\n      idxResponse = yield introspect(authClient, {\n        withCredentials,\n        version,\n        interactionHandle\n      });\n    }\n\n    return Object.assign(Object.assign({}, data), {\n      idxResponse,\n      meta\n    });\n  });\n  return _getDataFromIntrospect.apply(this, arguments);\n}\n\nfunction getDataFromRemediate(_x3, _x4) {\n  return _getDataFromRemediate.apply(this, arguments);\n}\n\nfunction _getDataFromRemediate() {\n  _getDataFromRemediate = _asyncToGenerator(function* (authClient, data) {\n    let {\n      idxResponse,\n      options,\n      values\n    } = data;\n    const {\n      autoRemediate,\n      remediators,\n      actions,\n      flow,\n      step,\n      useGenericRemediator\n    } = options;\n    const shouldRemediate = autoRemediate !== false && (remediators || actions || step);\n\n    if (!shouldRemediate) {\n      return data;\n    }\n\n    values = Object.assign(Object.assign({}, values), {\n      stateHandle: idxResponse.rawIdxState.stateHandle\n    });\n    const {\n      idxResponse: idxResponseFromRemediation,\n      nextStep,\n      canceled\n    } = yield remediate(authClient, idxResponse, values, {\n      remediators,\n      actions,\n      flow,\n      step,\n      useGenericRemediator\n    });\n    idxResponse = idxResponseFromRemediation;\n    return Object.assign(Object.assign({}, data), {\n      idxResponse,\n      nextStep,\n      canceled\n    });\n  });\n  return _getDataFromRemediate.apply(this, arguments);\n}\n\nfunction getTokens(_x5, _x6) {\n  return _getTokens.apply(this, arguments);\n}\n\nfunction _getTokens() {\n  _getTokens = _asyncToGenerator(function* (authClient, data) {\n    let {\n      meta,\n      idxResponse\n    } = data;\n    const {\n      interactionCode\n    } = idxResponse;\n    const {\n      clientId,\n      codeVerifier,\n      ignoreSignature,\n      redirectUri,\n      urls,\n      scopes\n    } = meta;\n    const tokenResponse = yield authClient.token.exchangeCodeForTokens({\n      interactionCode,\n      clientId,\n      codeVerifier,\n      ignoreSignature,\n      redirectUri,\n      scopes\n    }, urls);\n    return tokenResponse.tokens;\n  });\n  return _getTokens.apply(this, arguments);\n}\n\nfunction finalizeData(_x7, _x8) {\n  return _finalizeData.apply(this, arguments);\n}\n\nfunction _finalizeData() {\n  _finalizeData = _asyncToGenerator(function* (authClient, data) {\n    let {\n      options,\n      idxResponse,\n      canceled,\n      status\n    } = data;\n    const {\n      exchangeCodeForTokens\n    } = options;\n    let shouldSaveResponse = false;\n    let shouldClearTransaction = false;\n    let clearSharedStorage = true;\n    let interactionCode;\n    let tokens;\n    let enabledFeatures;\n    let availableSteps;\n    let messages;\n    let terminal;\n\n    if (idxResponse) {\n      shouldSaveResponse = !!(idxResponse.requestDidSucceed || idxResponse.stepUp);\n      enabledFeatures = getEnabledFeatures(idxResponse);\n      availableSteps = getAvailableSteps(authClient, idxResponse, options.useGenericRemediator);\n      messages = getMessagesFromResponse(idxResponse, options);\n      terminal = isTerminalResponse(idxResponse);\n    }\n\n    if (terminal) {\n      status = IdxStatus.TERMINAL;\n      const hasActions = Object.keys(idxResponse.actions).length > 0;\n      const hasErrors = !!messages.find(msg => msg.class === 'ERROR');\n      const isTerminalSuccess = !hasActions && !hasErrors && idxResponse.requestDidSucceed === true;\n\n      if (isTerminalSuccess) {\n        shouldClearTransaction = true;\n      } else {\n        shouldSaveResponse = !!hasActions;\n      }\n\n      clearSharedStorage = false;\n    } else if (canceled) {\n      status = IdxStatus.CANCELED;\n      shouldClearTransaction = true;\n    } else if (idxResponse === null || idxResponse === void 0 ? void 0 : idxResponse.interactionCode) {\n      interactionCode = idxResponse.interactionCode;\n\n      if (exchangeCodeForTokens === false) {\n        status = IdxStatus.SUCCESS;\n        shouldClearTransaction = false;\n      } else {\n        tokens = yield getTokens(authClient, data);\n        status = IdxStatus.SUCCESS;\n        shouldClearTransaction = true;\n      }\n    }\n\n    return Object.assign(Object.assign({}, data), {\n      status,\n      interactionCode,\n      tokens,\n      shouldSaveResponse,\n      shouldClearTransaction,\n      clearSharedStorage,\n      enabledFeatures,\n      availableSteps,\n      messages,\n      terminal\n    });\n  });\n  return _finalizeData.apply(this, arguments);\n}\n\nfunction run(_x9) {\n  return _run.apply(this, arguments);\n}\n\nfunction _run() {\n  _run = _asyncToGenerator(function* (authClient, options = {}) {\n    var _a;\n\n    let data = {\n      options,\n      values: initializeValues(options)\n    };\n    data = initializeData(authClient, data);\n    data = yield getDataFromIntrospect(authClient, data);\n    data = yield getDataFromRemediate(authClient, data);\n    data = yield finalizeData(authClient, data);\n    const {\n      idxResponse,\n      meta,\n      shouldSaveResponse,\n      shouldClearTransaction,\n      clearSharedStorage,\n      status,\n      enabledFeatures,\n      availableSteps,\n      tokens,\n      nextStep,\n      messages,\n      error,\n      interactionCode\n    } = data;\n\n    if (shouldClearTransaction) {\n      authClient.transactionManager.clear({\n        clearSharedStorage\n      });\n    } else {\n      saveTransactionMeta(authClient, Object.assign({}, meta));\n\n      if (shouldSaveResponse) {\n        const {\n          rawIdxState: rawIdxResponse,\n          requestDidSucceed\n        } = idxResponse;\n        authClient.transactionManager.saveIdxResponse({\n          rawIdxResponse,\n          requestDidSucceed,\n          stateHandle: (_a = idxResponse.context) === null || _a === void 0 ? void 0 : _a.stateHandle,\n          interactionHandle: meta === null || meta === void 0 ? void 0 : meta.interactionHandle\n        });\n      }\n    }\n\n    const {\n      actions,\n      context,\n      neededToProceed,\n      proceed,\n      rawIdxState,\n      requestDidSucceed,\n      stepUp\n    } = idxResponse || {};\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n      status: status\n    }, meta && {\n      meta\n    }), enabledFeatures && {\n      enabledFeatures\n    }), availableSteps && {\n      availableSteps\n    }), tokens && {\n      tokens\n    }), nextStep && {\n      nextStep\n    }), messages && messages.length && {\n      messages\n    }), error && {\n      error\n    }), stepUp && {\n      stepUp\n    }), {\n      interactionCode,\n      actions: actions,\n      context: context,\n      neededToProceed: neededToProceed,\n      proceed: proceed,\n      rawIdxState: rawIdxState,\n      requestDidSucceed\n    });\n  });\n  return _run.apply(this, arguments);\n}\n\nexport { run };","map":{"version":3,"names":["interact","introspect","remediate","IdxStatus","getFlowSpecification","saveTransactionMeta","getSavedTransactionMeta","getEnabledFeatures","getAvailableSteps","getMessagesFromResponse","isTerminalResponse","initializeValues","options","knownOptions","values","Object","assign","forEach","option","initializeData","authClient","data","idx","flow","withCredentials","remediators","actions","status","PENDING","getFlow","setFlow","flowSpec","getDataFromIntrospect","stateHandle","version","state","scopes","recoveryToken","activationToken","maxAge","nonce","idxResponse","meta","interactionHandle","transactionManager","clear","interactResponse","getDataFromRemediate","autoRemediate","step","useGenericRemediator","shouldRemediate","rawIdxState","idxResponseFromRemediation","nextStep","canceled","getTokens","interactionCode","clientId","codeVerifier","ignoreSignature","redirectUri","urls","tokenResponse","token","exchangeCodeForTokens","tokens","finalizeData","shouldSaveResponse","shouldClearTransaction","clearSharedStorage","enabledFeatures","availableSteps","messages","terminal","requestDidSucceed","stepUp","TERMINAL","hasActions","keys","length","hasErrors","find","msg","class","isTerminalSuccess","CANCELED","SUCCESS","run","_a","error","rawIdxResponse","saveIdxResponse","context","neededToProceed","proceed"],"sources":["C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@okta/okta-auth-js/esm/browser/idx/run.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { interact } from './interact.js';\nimport { introspect } from './introspect.js';\nimport { remediate } from './remediate.js';\nimport { IdxStatus } from './types/api.js';\nimport './remediators/EnrollAuthenticator.js';\nimport './remediators/EnrollPoll.js';\nimport './remediators/SelectEnrollmentChannel.js';\nimport './remediators/EnrollmentChannelData.js';\nimport './remediators/ChallengeAuthenticator.js';\nimport './remediators/ChallengePoll.js';\nimport './remediators/ResetAuthenticator.js';\nimport './remediators/EnrollProfile.js';\nimport './remediators/Identify.js';\nimport './remediators/ReEnrollAuthenticator.js';\nimport './remediators/RedirectIdp.js';\nimport './remediators/SelectAuthenticatorAuthenticate.js';\nimport './remediators/SelectAuthenticatorEnroll.js';\nimport './remediators/SelectAuthenticatorUnlockAccount.js';\nimport './remediators/SelectEnrollProfile.js';\nimport './remediators/AuthenticatorVerificationData.js';\nimport './remediators/AuthenticatorEnrollmentData.js';\nimport './remediators/Skip.js';\nimport { getFlowSpecification } from './flow/FlowSpecification.js';\nimport { saveTransactionMeta, getSavedTransactionMeta } from './transactionMeta.js';\nimport { getEnabledFeatures, getAvailableSteps, getMessagesFromResponse, isTerminalResponse } from './util.js';\n\nfunction initializeValues(options) {\n    const knownOptions = [\n        'flow',\n        'remediators',\n        'actions',\n        'withCredentials',\n        'step',\n        'useGenericRemediator',\n        'exchangeCodeForTokens',\n    ];\n    const values = Object.assign({}, options);\n    knownOptions.forEach(option => {\n        delete values[option];\n    });\n    return values;\n}\nfunction initializeData(authClient, data) {\n    let { options } = data;\n    options = Object.assign(Object.assign({}, authClient.options.idx), options);\n    let { flow, withCredentials, remediators, actions, } = options;\n    const status = IdxStatus.PENDING;\n    flow = flow || authClient.idx.getFlow() || 'default';\n    if (flow) {\n        authClient.idx.setFlow(flow);\n        const flowSpec = getFlowSpecification(authClient, flow);\n        withCredentials = (typeof withCredentials !== 'undefined') ? withCredentials : flowSpec.withCredentials;\n        remediators = remediators || flowSpec.remediators;\n        actions = actions || flowSpec.actions;\n    }\n    return Object.assign(Object.assign({}, data), { options: Object.assign(Object.assign({}, options), { flow,\n            withCredentials,\n            remediators,\n            actions }), status });\n}\nasync function getDataFromIntrospect(authClient, data) {\n    const { options } = data;\n    const { stateHandle, withCredentials, version, state, scopes, recoveryToken, activationToken, maxAge, nonce, } = options;\n    let idxResponse;\n    let meta = getSavedTransactionMeta(authClient, { state, recoveryToken, activationToken });\n    if (stateHandle) {\n        idxResponse = await introspect(authClient, { withCredentials, version, stateHandle });\n    }\n    else {\n        let interactionHandle = meta === null || meta === void 0 ? void 0 : meta.interactionHandle;\n        if (!interactionHandle) {\n            authClient.transactionManager.clear();\n            const interactResponse = await interact(authClient, {\n                withCredentials,\n                state,\n                scopes,\n                activationToken,\n                recoveryToken,\n                maxAge,\n                nonce,\n            });\n            interactionHandle = interactResponse.interactionHandle;\n            meta = interactResponse.meta;\n        }\n        idxResponse = await introspect(authClient, { withCredentials, version, interactionHandle });\n    }\n    return Object.assign(Object.assign({}, data), { idxResponse, meta });\n}\nasync function getDataFromRemediate(authClient, data) {\n    let { idxResponse, options, values } = data;\n    const { autoRemediate, remediators, actions, flow, step, useGenericRemediator, } = options;\n    const shouldRemediate = (autoRemediate !== false && (remediators || actions || step));\n    if (!shouldRemediate) {\n        return data;\n    }\n    values = Object.assign(Object.assign({}, values), { stateHandle: idxResponse.rawIdxState.stateHandle });\n    const { idxResponse: idxResponseFromRemediation, nextStep, canceled, } = await remediate(authClient, idxResponse, values, {\n        remediators,\n        actions,\n        flow,\n        step,\n        useGenericRemediator,\n    });\n    idxResponse = idxResponseFromRemediation;\n    return Object.assign(Object.assign({}, data), { idxResponse, nextStep, canceled });\n}\nasync function getTokens(authClient, data) {\n    let { meta, idxResponse } = data;\n    const { interactionCode } = idxResponse;\n    const { clientId, codeVerifier, ignoreSignature, redirectUri, urls, scopes, } = meta;\n    const tokenResponse = await authClient.token.exchangeCodeForTokens({\n        interactionCode,\n        clientId,\n        codeVerifier,\n        ignoreSignature,\n        redirectUri,\n        scopes\n    }, urls);\n    return tokenResponse.tokens;\n}\nasync function finalizeData(authClient, data) {\n    let { options, idxResponse, canceled, status, } = data;\n    const { exchangeCodeForTokens } = options;\n    let shouldSaveResponse = false;\n    let shouldClearTransaction = false;\n    let clearSharedStorage = true;\n    let interactionCode;\n    let tokens;\n    let enabledFeatures;\n    let availableSteps;\n    let messages;\n    let terminal;\n    if (idxResponse) {\n        shouldSaveResponse = !!(idxResponse.requestDidSucceed || idxResponse.stepUp);\n        enabledFeatures = getEnabledFeatures(idxResponse);\n        availableSteps = getAvailableSteps(authClient, idxResponse, options.useGenericRemediator);\n        messages = getMessagesFromResponse(idxResponse, options);\n        terminal = isTerminalResponse(idxResponse);\n    }\n    if (terminal) {\n        status = IdxStatus.TERMINAL;\n        const hasActions = Object.keys(idxResponse.actions).length > 0;\n        const hasErrors = !!messages.find(msg => msg.class === 'ERROR');\n        const isTerminalSuccess = !hasActions && !hasErrors && idxResponse.requestDidSucceed === true;\n        if (isTerminalSuccess) {\n            shouldClearTransaction = true;\n        }\n        else {\n            shouldSaveResponse = !!hasActions;\n        }\n        clearSharedStorage = false;\n    }\n    else if (canceled) {\n        status = IdxStatus.CANCELED;\n        shouldClearTransaction = true;\n    }\n    else if (idxResponse === null || idxResponse === void 0 ? void 0 : idxResponse.interactionCode) {\n        interactionCode = idxResponse.interactionCode;\n        if (exchangeCodeForTokens === false) {\n            status = IdxStatus.SUCCESS;\n            shouldClearTransaction = false;\n        }\n        else {\n            tokens = await getTokens(authClient, data);\n            status = IdxStatus.SUCCESS;\n            shouldClearTransaction = true;\n        }\n    }\n    return Object.assign(Object.assign({}, data), { status,\n        interactionCode,\n        tokens,\n        shouldSaveResponse,\n        shouldClearTransaction,\n        clearSharedStorage,\n        enabledFeatures,\n        availableSteps,\n        messages,\n        terminal });\n}\nasync function run(authClient, options = {}) {\n    var _a;\n    let data = {\n        options,\n        values: initializeValues(options)\n    };\n    data = initializeData(authClient, data);\n    data = await getDataFromIntrospect(authClient, data);\n    data = await getDataFromRemediate(authClient, data);\n    data = await finalizeData(authClient, data);\n    const { idxResponse, meta, shouldSaveResponse, shouldClearTransaction, clearSharedStorage, status, enabledFeatures, availableSteps, tokens, nextStep, messages, error, interactionCode } = data;\n    if (shouldClearTransaction) {\n        authClient.transactionManager.clear({ clearSharedStorage });\n    }\n    else {\n        saveTransactionMeta(authClient, Object.assign({}, meta));\n        if (shouldSaveResponse) {\n            const { rawIdxState: rawIdxResponse, requestDidSucceed } = idxResponse;\n            authClient.transactionManager.saveIdxResponse({\n                rawIdxResponse,\n                requestDidSucceed,\n                stateHandle: (_a = idxResponse.context) === null || _a === void 0 ? void 0 : _a.stateHandle,\n                interactionHandle: meta === null || meta === void 0 ? void 0 : meta.interactionHandle\n            });\n        }\n    }\n    const { actions, context, neededToProceed, proceed, rawIdxState, requestDidSucceed, stepUp } = idxResponse || {};\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ status: status }, (meta && { meta })), (enabledFeatures && { enabledFeatures })), (availableSteps && { availableSteps })), (tokens && { tokens })), (nextStep && { nextStep })), (messages && messages.length && { messages })), (error && { error })), (stepUp && { stepUp })), { interactionCode,\n        actions: actions, context: context, neededToProceed: neededToProceed, proceed: proceed, rawIdxState: rawIdxState, requestDidSucceed });\n}\n\nexport { run };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}