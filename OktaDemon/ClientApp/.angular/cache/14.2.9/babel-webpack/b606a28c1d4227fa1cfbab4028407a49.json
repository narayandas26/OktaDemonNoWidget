{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { Remediator } from './Base/Remediator.js';\nlet SelectEnrollmentChannel = /*#__PURE__*/(() => {\n  class SelectEnrollmentChannel extends Remediator {\n    canRemediate() {\n      if (this.values.channel) {\n        return true;\n      }\n\n      if (this.values.authenticator) {\n        const {\n          id,\n          channel\n        } = this.values.authenticator;\n\n        if (!!id && !!channel) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    getNextStep(authClient, context) {\n      const common = super.getNextStep(authClient, context);\n      const authenticator = context.currentAuthenticator.value;\n      return Object.assign(Object.assign({}, common), {\n        authenticator\n      });\n    }\n\n    getData() {\n      var _a;\n\n      const remediationValue = this.remediation.value[0].value;\n      return {\n        authenticator: {\n          id: remediationValue.form.value[0].value,\n          channel: ((_a = this.values.authenticator) === null || _a === void 0 ? void 0 : _a.channel) || this.values.channel\n        },\n        stateHandle: this.values.stateHandle\n      };\n    }\n\n    getValuesAfterProceed() {\n      this.values = super.getValuesAfterProceed();\n      delete this.values.authenticators;\n      const filterKey = this.values.channel ? 'channel' : 'authenticator';\n      let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== filterKey);\n      return trimmedValues.reduce((values, valueKey) => Object.assign(Object.assign({}, values), {\n        [valueKey]: this.values[valueKey]\n      }), {});\n    }\n\n  }\n\n  SelectEnrollmentChannel.remediationName = 'select-enrollment-channel';\n  return SelectEnrollmentChannel;\n})();\nexport { SelectEnrollmentChannel }; //# sourceMappingURL=SelectEnrollmentChannel.js.map","map":null,"metadata":{},"sourceType":"module"}