{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { parseOAuthResponseFromUrl } from '../oidc/parseFromUrl.js';\nimport { AuthStateManager } from './AuthStateManager.js';\nimport { ServiceManager } from './ServiceManager/browser.js';\n\nfunction mixinCore(Base) {\n  return class OktaAuthCore extends Base {\n    constructor(...args) {\n      super(...args);\n      this.authStateManager = new AuthStateManager(this);\n      this.serviceManager = new ServiceManager(this, this.options.services);\n    }\n\n    start() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        yield _this.serviceManager.start();\n\n        _this.tokenManager.start();\n\n        if (!_this.token.isLoginRedirect()) {\n          yield _this.authStateManager.updateAuthState();\n        }\n      })();\n    }\n\n    stop() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        _this2.tokenManager.stop();\n\n        yield _this2.serviceManager.stop();\n      })();\n    }\n\n    handleLoginRedirect(tokens, originalUri) {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        let state = _this3.options.state;\n\n        if (tokens) {\n          _this3.tokenManager.setTokens(tokens);\n\n          originalUri = originalUri || _this3.getOriginalUri(_this3.options.state);\n        } else if (_this3.isLoginRedirect()) {\n          try {\n            const oAuthResponse = yield parseOAuthResponseFromUrl(_this3, {});\n            state = oAuthResponse.state;\n            originalUri = originalUri || _this3.getOriginalUri(state);\n            yield _this3.storeTokensFromRedirect();\n          } catch (e) {\n            yield _this3.authStateManager.updateAuthState();\n            throw e;\n          }\n        } else {\n          return;\n        }\n\n        yield _this3.authStateManager.updateAuthState();\n\n        _this3.removeOriginalUri(state);\n\n        const {\n          restoreOriginalUri\n        } = _this3.options;\n\n        if (restoreOriginalUri) {\n          yield restoreOriginalUri(_this3, originalUri);\n        } else if (originalUri) {\n          window.location.replace(originalUri);\n        }\n      })();\n    }\n\n  };\n}\n\nexport { mixinCore };","map":{"version":3,"names":["parseOAuthResponseFromUrl","AuthStateManager","ServiceManager","mixinCore","Base","OktaAuthCore","constructor","args","authStateManager","serviceManager","options","services","start","tokenManager","token","isLoginRedirect","updateAuthState","stop","handleLoginRedirect","tokens","originalUri","state","setTokens","getOriginalUri","oAuthResponse","storeTokensFromRedirect","e","removeOriginalUri","restoreOriginalUri","window","location","replace"],"sources":["C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@okta/okta-auth-js/esm/browser/core/mixin.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { parseOAuthResponseFromUrl } from '../oidc/parseFromUrl.js';\nimport { AuthStateManager } from './AuthStateManager.js';\nimport { ServiceManager } from './ServiceManager/browser.js';\n\nfunction mixinCore(Base) {\n    return class OktaAuthCore extends Base {\n        constructor(...args) {\n            super(...args);\n            this.authStateManager = new AuthStateManager(this);\n            this.serviceManager = new ServiceManager(this, this.options.services);\n        }\n        async start() {\n            await this.serviceManager.start();\n            this.tokenManager.start();\n            if (!this.token.isLoginRedirect()) {\n                await this.authStateManager.updateAuthState();\n            }\n        }\n        async stop() {\n            this.tokenManager.stop();\n            await this.serviceManager.stop();\n        }\n        async handleLoginRedirect(tokens, originalUri) {\n            let state = this.options.state;\n            if (tokens) {\n                this.tokenManager.setTokens(tokens);\n                originalUri = originalUri || this.getOriginalUri(this.options.state);\n            }\n            else if (this.isLoginRedirect()) {\n                try {\n                    const oAuthResponse = await parseOAuthResponseFromUrl(this, {});\n                    state = oAuthResponse.state;\n                    originalUri = originalUri || this.getOriginalUri(state);\n                    await this.storeTokensFromRedirect();\n                }\n                catch (e) {\n                    await this.authStateManager.updateAuthState();\n                    throw e;\n                }\n            }\n            else {\n                return;\n            }\n            await this.authStateManager.updateAuthState();\n            this.removeOriginalUri(state);\n            const { restoreOriginalUri } = this.options;\n            if (restoreOriginalUri) {\n                await restoreOriginalUri(this, originalUri);\n            }\n            else if (originalUri) {\n                window.location.replace(originalUri);\n            }\n        }\n    };\n}\n\nexport { mixinCore };\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,yBAAT,QAA0C,yBAA1C;AACA,SAASC,gBAAT,QAAiC,uBAAjC;AACA,SAASC,cAAT,QAA+B,6BAA/B;;AAEA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;EACrB,OAAO,MAAMC,YAAN,SAA2BD,IAA3B,CAAgC;IACnCE,WAAW,CAAC,GAAGC,IAAJ,EAAU;MACjB,MAAM,GAAGA,IAAT;MACA,KAAKC,gBAAL,GAAwB,IAAIP,gBAAJ,CAAqB,IAArB,CAAxB;MACA,KAAKQ,cAAL,GAAsB,IAAIP,cAAJ,CAAmB,IAAnB,EAAyB,KAAKQ,OAAL,CAAaC,QAAtC,CAAtB;IACH;;IACKC,KAAK,GAAG;MAAA;;MAAA;QACV,MAAM,KAAI,CAACH,cAAL,CAAoBG,KAApB,EAAN;;QACA,KAAI,CAACC,YAAL,CAAkBD,KAAlB;;QACA,IAAI,CAAC,KAAI,CAACE,KAAL,CAAWC,eAAX,EAAL,EAAmC;UAC/B,MAAM,KAAI,CAACP,gBAAL,CAAsBQ,eAAtB,EAAN;QACH;MALS;IAMb;;IACKC,IAAI,GAAG;MAAA;;MAAA;QACT,MAAI,CAACJ,YAAL,CAAkBI,IAAlB;;QACA,MAAM,MAAI,CAACR,cAAL,CAAoBQ,IAApB,EAAN;MAFS;IAGZ;;IACKC,mBAAmB,CAACC,MAAD,EAASC,WAAT,EAAsB;MAAA;;MAAA;QAC3C,IAAIC,KAAK,GAAG,MAAI,CAACX,OAAL,CAAaW,KAAzB;;QACA,IAAIF,MAAJ,EAAY;UACR,MAAI,CAACN,YAAL,CAAkBS,SAAlB,CAA4BH,MAA5B;;UACAC,WAAW,GAAGA,WAAW,IAAI,MAAI,CAACG,cAAL,CAAoB,MAAI,CAACb,OAAL,CAAaW,KAAjC,CAA7B;QACH,CAHD,MAIK,IAAI,MAAI,CAACN,eAAL,EAAJ,EAA4B;UAC7B,IAAI;YACA,MAAMS,aAAa,SAASxB,yBAAyB,CAAC,MAAD,EAAO,EAAP,CAArD;YACAqB,KAAK,GAAGG,aAAa,CAACH,KAAtB;YACAD,WAAW,GAAGA,WAAW,IAAI,MAAI,CAACG,cAAL,CAAoBF,KAApB,CAA7B;YACA,MAAM,MAAI,CAACI,uBAAL,EAAN;UACH,CALD,CAMA,OAAOC,CAAP,EAAU;YACN,MAAM,MAAI,CAAClB,gBAAL,CAAsBQ,eAAtB,EAAN;YACA,MAAMU,CAAN;UACH;QACJ,CAXI,MAYA;UACD;QACH;;QACD,MAAM,MAAI,CAAClB,gBAAL,CAAsBQ,eAAtB,EAAN;;QACA,MAAI,CAACW,iBAAL,CAAuBN,KAAvB;;QACA,MAAM;UAAEO;QAAF,IAAyB,MAAI,CAAClB,OAApC;;QACA,IAAIkB,kBAAJ,EAAwB;UACpB,MAAMA,kBAAkB,CAAC,MAAD,EAAOR,WAAP,CAAxB;QACH,CAFD,MAGK,IAAIA,WAAJ,EAAiB;UAClBS,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwBX,WAAxB;QACH;MA7B0C;IA8B9C;;EA/CkC,CAAvC;AAiDH;;AAED,SAASjB,SAAT"},"metadata":{},"sourceType":"module"}