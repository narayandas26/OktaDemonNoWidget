{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { base64UrlToString } from '../crypto/base64.js';\n\nfunction decodeToken(token) {\n  var jwt = token.split('.');\n  var decodedToken;\n\n  try {\n    decodedToken = {\n      header: JSON.parse(base64UrlToString(jwt[0])),\n      payload: JSON.parse(base64UrlToString(jwt[1])),\n      signature: jwt[2]\n    };\n  } catch (e) {\n    throw new AuthSdkError('Malformed token');\n  }\n\n  return decodedToken;\n}\n\nexport { decodeToken };","map":{"version":3,"names":["AuthSdkError","base64UrlToString","decodeToken","token","jwt","split","decodedToken","header","JSON","parse","payload","signature","e"],"sources":["C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@okta/okta-auth-js/esm/browser/oidc/decodeToken.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { base64UrlToString } from '../crypto/base64.js';\n\nfunction decodeToken(token) {\n    var jwt = token.split('.');\n    var decodedToken;\n    try {\n        decodedToken = {\n            header: JSON.parse(base64UrlToString(jwt[0])),\n            payload: JSON.parse(base64UrlToString(jwt[1])),\n            signature: jwt[2]\n        };\n    }\n    catch (e) {\n        throw new AuthSdkError('Malformed token');\n    }\n    return decodedToken;\n}\n\nexport { decodeToken };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;EACxB,IAAIC,GAAG,GAAGD,KAAK,CAACE,KAAN,CAAY,GAAZ,CAAV;EACA,IAAIC,YAAJ;;EACA,IAAI;IACAA,YAAY,GAAG;MACXC,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWR,iBAAiB,CAACG,GAAG,CAAC,CAAD,CAAJ,CAA5B,CADG;MAEXM,OAAO,EAAEF,IAAI,CAACC,KAAL,CAAWR,iBAAiB,CAACG,GAAG,CAAC,CAAD,CAAJ,CAA5B,CAFE;MAGXO,SAAS,EAAEP,GAAG,CAAC,CAAD;IAHH,CAAf;EAKH,CAND,CAOA,OAAOQ,CAAP,EAAU;IACN,MAAM,IAAIZ,YAAJ,CAAiB,iBAAjB,CAAN;EACH;;EACD,OAAOM,YAAP;AACH;;AAED,SAASJ,WAAT"},"metadata":{},"sourceType":"module"}