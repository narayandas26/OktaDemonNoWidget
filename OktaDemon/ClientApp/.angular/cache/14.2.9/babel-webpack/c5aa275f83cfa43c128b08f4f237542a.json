{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getRemediator, handleFailedResponse, isTerminalResponse, filterValuesForRemediation, getNextStep } from './util.js';\n\nfunction getActionFromValues(values, idxResponse) {\n  return Object.keys(idxResponse.actions).find(action => !!values.resend && action.includes('-resend'));\n}\n\nfunction removeActionFromValues(values) {\n  return Object.assign(Object.assign({}, values), {\n    resend: undefined\n  });\n}\n\nfunction removeActionFromOptions(options, actionName) {\n  let actions = options.actions || [];\n  actions = actions.filter(entry => {\n    if (typeof entry === 'string') {\n      return entry !== actionName;\n    }\n\n    return entry.name !== actionName;\n  });\n  return Object.assign(Object.assign({}, options), {\n    actions\n  });\n}\n\nfunction remediate(_x, _x2, _x3, _x4) {\n  return _remediate.apply(this, arguments);\n}\n\nfunction _remediate() {\n  _remediate = _asyncToGenerator(function* (authClient, idxResponse, values, options) {\n    let {\n      neededToProceed,\n      interactionCode\n    } = idxResponse;\n    const {\n      flow\n    } = options;\n\n    if (interactionCode) {\n      return {\n        idxResponse\n      };\n    }\n\n    const remediator = getRemediator(neededToProceed, values, options);\n    const actionFromValues = getActionFromValues(values, idxResponse);\n    const actionFromOptions = options.actions || [];\n    const actions = [...actionFromOptions, ...(actionFromValues && [actionFromValues] || [])];\n\n    if (actions) {\n      for (let action of actions) {\n        let params = {};\n\n        if (typeof action !== 'string') {\n          params = action.params || {};\n          action = action.name;\n        }\n\n        let valuesWithoutExecutedAction = removeActionFromValues(values);\n        let optionsWithoutExecutedAction = removeActionFromOptions(options, action);\n\n        if (typeof idxResponse.actions[action] === 'function') {\n          idxResponse = yield idxResponse.actions[action](params);\n\n          if (idxResponse.requestDidSucceed === false) {\n            return handleFailedResponse(authClient, idxResponse, options);\n          }\n\n          if (action === 'cancel') {\n            return {\n              idxResponse,\n              canceled: true\n            };\n          }\n\n          return remediate(authClient, idxResponse, valuesWithoutExecutedAction, optionsWithoutExecutedAction);\n        }\n\n        const remediationAction = neededToProceed.find(({\n          name\n        }) => name === action);\n\n        if (remediationAction) {\n          idxResponse = yield idxResponse.proceed(action, params);\n\n          if (idxResponse.requestDidSucceed === false) {\n            return handleFailedResponse(authClient, idxResponse, options);\n          }\n\n          return remediate(authClient, idxResponse, values, optionsWithoutExecutedAction);\n        }\n      }\n    }\n\n    const terminal = isTerminalResponse(idxResponse);\n\n    if (terminal) {\n      return {\n        idxResponse,\n        terminal\n      };\n    }\n\n    if (!remediator) {\n      if (options.step) {\n        values = filterValuesForRemediation(idxResponse, options.step, values);\n        idxResponse = yield idxResponse.proceed(options.step, values);\n\n        if (idxResponse.requestDidSucceed === false) {\n          return handleFailedResponse(authClient, idxResponse, options);\n        }\n\n        return {\n          idxResponse\n        };\n      }\n\n      if (flow === 'default') {\n        return {\n          idxResponse\n        };\n      }\n\n      throw new AuthSdkError(`\n      No remediation can match current flow, check policy settings in your org.\n      Remediations: [${neededToProceed.reduce((acc, curr) => acc ? acc + ' ,' + curr.name : curr.name, '')}]\n    `);\n    }\n\n    if (!remediator.canRemediate()) {\n      const nextStep = getNextStep(authClient, remediator, idxResponse);\n      return {\n        idxResponse,\n        nextStep\n      };\n    }\n\n    const name = remediator.getName();\n    const data = remediator.getData();\n    idxResponse = yield idxResponse.proceed(name, data);\n\n    if (idxResponse.requestDidSucceed === false) {\n      return handleFailedResponse(authClient, idxResponse, options);\n    }\n\n    values = remediator.getValuesAfterProceed();\n    options = Object.assign(Object.assign({}, options), {\n      step: undefined\n    });\n\n    if (options.useGenericRemediator && !idxResponse.interactionCode && !isTerminalResponse(idxResponse)) {\n      const gr = getRemediator(idxResponse.neededToProceed, values, options);\n      const nextStep = getNextStep(authClient, gr, idxResponse);\n      return {\n        idxResponse,\n        nextStep\n      };\n    }\n\n    return remediate(authClient, idxResponse, values, options);\n  });\n  return _remediate.apply(this, arguments);\n}\n\nexport { remediate };","map":{"version":3,"names":["AuthSdkError","getRemediator","handleFailedResponse","isTerminalResponse","filterValuesForRemediation","getNextStep","getActionFromValues","values","idxResponse","Object","keys","actions","find","action","resend","includes","removeActionFromValues","assign","undefined","removeActionFromOptions","options","actionName","filter","entry","name","remediate","authClient","neededToProceed","interactionCode","flow","remediator","actionFromValues","actionFromOptions","params","valuesWithoutExecutedAction","optionsWithoutExecutedAction","requestDidSucceed","canceled","remediationAction","proceed","terminal","step","reduce","acc","curr","canRemediate","nextStep","getName","data","getData","getValuesAfterProceed","useGenericRemediator","gr"],"sources":["C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@okta/okta-auth-js/esm/browser/idx/remediate.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getRemediator, handleFailedResponse, isTerminalResponse, filterValuesForRemediation, getNextStep } from './util.js';\n\nfunction getActionFromValues(values, idxResponse) {\n    return Object.keys(idxResponse.actions).find(action => !!values.resend && action.includes('-resend'));\n}\nfunction removeActionFromValues(values) {\n    return Object.assign(Object.assign({}, values), { resend: undefined });\n}\nfunction removeActionFromOptions(options, actionName) {\n    let actions = options.actions || [];\n    actions = actions.filter(entry => {\n        if (typeof entry === 'string') {\n            return entry !== actionName;\n        }\n        return entry.name !== actionName;\n    });\n    return Object.assign(Object.assign({}, options), { actions });\n}\nasync function remediate(authClient, idxResponse, values, options) {\n    let { neededToProceed, interactionCode } = idxResponse;\n    const { flow } = options;\n    if (interactionCode) {\n        return { idxResponse };\n    }\n    const remediator = getRemediator(neededToProceed, values, options);\n    const actionFromValues = getActionFromValues(values, idxResponse);\n    const actionFromOptions = options.actions || [];\n    const actions = [\n        ...actionFromOptions,\n        ...(actionFromValues && [actionFromValues] || []),\n    ];\n    if (actions) {\n        for (let action of actions) {\n            let params = {};\n            if (typeof action !== 'string') {\n                params = action.params || {};\n                action = action.name;\n            }\n            let valuesWithoutExecutedAction = removeActionFromValues(values);\n            let optionsWithoutExecutedAction = removeActionFromOptions(options, action);\n            if (typeof idxResponse.actions[action] === 'function') {\n                idxResponse = await idxResponse.actions[action](params);\n                if (idxResponse.requestDidSucceed === false) {\n                    return handleFailedResponse(authClient, idxResponse, options);\n                }\n                if (action === 'cancel') {\n                    return { idxResponse, canceled: true };\n                }\n                return remediate(authClient, idxResponse, valuesWithoutExecutedAction, optionsWithoutExecutedAction);\n            }\n            const remediationAction = neededToProceed.find(({ name }) => name === action);\n            if (remediationAction) {\n                idxResponse = await idxResponse.proceed(action, params);\n                if (idxResponse.requestDidSucceed === false) {\n                    return handleFailedResponse(authClient, idxResponse, options);\n                }\n                return remediate(authClient, idxResponse, values, optionsWithoutExecutedAction);\n            }\n        }\n    }\n    const terminal = isTerminalResponse(idxResponse);\n    if (terminal) {\n        return { idxResponse, terminal };\n    }\n    if (!remediator) {\n        if (options.step) {\n            values = filterValuesForRemediation(idxResponse, options.step, values);\n            idxResponse = await idxResponse.proceed(options.step, values);\n            if (idxResponse.requestDidSucceed === false) {\n                return handleFailedResponse(authClient, idxResponse, options);\n            }\n            return { idxResponse };\n        }\n        if (flow === 'default') {\n            return { idxResponse };\n        }\n        throw new AuthSdkError(`\n      No remediation can match current flow, check policy settings in your org.\n      Remediations: [${neededToProceed.reduce((acc, curr) => acc ? acc + ' ,' + curr.name : curr.name, '')}]\n    `);\n    }\n    if (!remediator.canRemediate()) {\n        const nextStep = getNextStep(authClient, remediator, idxResponse);\n        return {\n            idxResponse,\n            nextStep,\n        };\n    }\n    const name = remediator.getName();\n    const data = remediator.getData();\n    idxResponse = await idxResponse.proceed(name, data);\n    if (idxResponse.requestDidSucceed === false) {\n        return handleFailedResponse(authClient, idxResponse, options);\n    }\n    values = remediator.getValuesAfterProceed();\n    options = Object.assign(Object.assign({}, options), { step: undefined });\n    if (options.useGenericRemediator && !idxResponse.interactionCode && !isTerminalResponse(idxResponse)) {\n        const gr = getRemediator(idxResponse.neededToProceed, values, options);\n        const nextStep = getNextStep(authClient, gr, idxResponse);\n        return {\n            idxResponse,\n            nextStep,\n        };\n    }\n    return remediate(authClient, idxResponse, values, options);\n}\n\nexport { remediate };\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,SAASC,aAAT,EAAwBC,oBAAxB,EAA8CC,kBAA9C,EAAkEC,0BAAlE,EAA8FC,WAA9F,QAAiH,WAAjH;;AAEA,SAASC,mBAAT,CAA6BC,MAA7B,EAAqCC,WAArC,EAAkD;EAC9C,OAAOC,MAAM,CAACC,IAAP,CAAYF,WAAW,CAACG,OAAxB,EAAiCC,IAAjC,CAAsCC,MAAM,IAAI,CAAC,CAACN,MAAM,CAACO,MAAT,IAAmBD,MAAM,CAACE,QAAP,CAAgB,SAAhB,CAAnE,CAAP;AACH;;AACD,SAASC,sBAAT,CAAgCT,MAAhC,EAAwC;EACpC,OAAOE,MAAM,CAACQ,MAAP,CAAcR,MAAM,CAACQ,MAAP,CAAc,EAAd,EAAkBV,MAAlB,CAAd,EAAyC;IAAEO,MAAM,EAAEI;EAAV,CAAzC,CAAP;AACH;;AACD,SAASC,uBAAT,CAAiCC,OAAjC,EAA0CC,UAA1C,EAAsD;EAClD,IAAIV,OAAO,GAAGS,OAAO,CAACT,OAAR,IAAmB,EAAjC;EACAA,OAAO,GAAGA,OAAO,CAACW,MAAR,CAAeC,KAAK,IAAI;IAC9B,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC3B,OAAOA,KAAK,KAAKF,UAAjB;IACH;;IACD,OAAOE,KAAK,CAACC,IAAN,KAAeH,UAAtB;EACH,CALS,CAAV;EAMA,OAAOZ,MAAM,CAACQ,MAAP,CAAcR,MAAM,CAACQ,MAAP,CAAc,EAAd,EAAkBG,OAAlB,CAAd,EAA0C;IAAET;EAAF,CAA1C,CAAP;AACH;;SACcc,S;;;;;iCAAf,WAAyBC,UAAzB,EAAqClB,WAArC,EAAkDD,MAAlD,EAA0Da,OAA1D,EAAmE;IAC/D,IAAI;MAAEO,eAAF;MAAmBC;IAAnB,IAAuCpB,WAA3C;IACA,MAAM;MAAEqB;IAAF,IAAWT,OAAjB;;IACA,IAAIQ,eAAJ,EAAqB;MACjB,OAAO;QAAEpB;MAAF,CAAP;IACH;;IACD,MAAMsB,UAAU,GAAG7B,aAAa,CAAC0B,eAAD,EAAkBpB,MAAlB,EAA0Ba,OAA1B,CAAhC;IACA,MAAMW,gBAAgB,GAAGzB,mBAAmB,CAACC,MAAD,EAASC,WAAT,CAA5C;IACA,MAAMwB,iBAAiB,GAAGZ,OAAO,CAACT,OAAR,IAAmB,EAA7C;IACA,MAAMA,OAAO,GAAG,CACZ,GAAGqB,iBADS,EAEZ,IAAID,gBAAgB,IAAI,CAACA,gBAAD,CAApB,IAA0C,EAA9C,CAFY,CAAhB;;IAIA,IAAIpB,OAAJ,EAAa;MACT,KAAK,IAAIE,MAAT,IAAmBF,OAAnB,EAA4B;QACxB,IAAIsB,MAAM,GAAG,EAAb;;QACA,IAAI,OAAOpB,MAAP,KAAkB,QAAtB,EAAgC;UAC5BoB,MAAM,GAAGpB,MAAM,CAACoB,MAAP,IAAiB,EAA1B;UACApB,MAAM,GAAGA,MAAM,CAACW,IAAhB;QACH;;QACD,IAAIU,2BAA2B,GAAGlB,sBAAsB,CAACT,MAAD,CAAxD;QACA,IAAI4B,4BAA4B,GAAGhB,uBAAuB,CAACC,OAAD,EAAUP,MAAV,CAA1D;;QACA,IAAI,OAAOL,WAAW,CAACG,OAAZ,CAAoBE,MAApB,CAAP,KAAuC,UAA3C,EAAuD;UACnDL,WAAW,SAASA,WAAW,CAACG,OAAZ,CAAoBE,MAApB,EAA4BoB,MAA5B,CAApB;;UACA,IAAIzB,WAAW,CAAC4B,iBAAZ,KAAkC,KAAtC,EAA6C;YACzC,OAAOlC,oBAAoB,CAACwB,UAAD,EAAalB,WAAb,EAA0BY,OAA1B,CAA3B;UACH;;UACD,IAAIP,MAAM,KAAK,QAAf,EAAyB;YACrB,OAAO;cAAEL,WAAF;cAAe6B,QAAQ,EAAE;YAAzB,CAAP;UACH;;UACD,OAAOZ,SAAS,CAACC,UAAD,EAAalB,WAAb,EAA0B0B,2BAA1B,EAAuDC,4BAAvD,CAAhB;QACH;;QACD,MAAMG,iBAAiB,GAAGX,eAAe,CAACf,IAAhB,CAAqB,CAAC;UAAEY;QAAF,CAAD,KAAcA,IAAI,KAAKX,MAA5C,CAA1B;;QACA,IAAIyB,iBAAJ,EAAuB;UACnB9B,WAAW,SAASA,WAAW,CAAC+B,OAAZ,CAAoB1B,MAApB,EAA4BoB,MAA5B,CAApB;;UACA,IAAIzB,WAAW,CAAC4B,iBAAZ,KAAkC,KAAtC,EAA6C;YACzC,OAAOlC,oBAAoB,CAACwB,UAAD,EAAalB,WAAb,EAA0BY,OAA1B,CAA3B;UACH;;UACD,OAAOK,SAAS,CAACC,UAAD,EAAalB,WAAb,EAA0BD,MAA1B,EAAkC4B,4BAAlC,CAAhB;QACH;MACJ;IACJ;;IACD,MAAMK,QAAQ,GAAGrC,kBAAkB,CAACK,WAAD,CAAnC;;IACA,IAAIgC,QAAJ,EAAc;MACV,OAAO;QAAEhC,WAAF;QAAegC;MAAf,CAAP;IACH;;IACD,IAAI,CAACV,UAAL,EAAiB;MACb,IAAIV,OAAO,CAACqB,IAAZ,EAAkB;QACdlC,MAAM,GAAGH,0BAA0B,CAACI,WAAD,EAAcY,OAAO,CAACqB,IAAtB,EAA4BlC,MAA5B,CAAnC;QACAC,WAAW,SAASA,WAAW,CAAC+B,OAAZ,CAAoBnB,OAAO,CAACqB,IAA5B,EAAkClC,MAAlC,CAApB;;QACA,IAAIC,WAAW,CAAC4B,iBAAZ,KAAkC,KAAtC,EAA6C;UACzC,OAAOlC,oBAAoB,CAACwB,UAAD,EAAalB,WAAb,EAA0BY,OAA1B,CAA3B;QACH;;QACD,OAAO;UAAEZ;QAAF,CAAP;MACH;;MACD,IAAIqB,IAAI,KAAK,SAAb,EAAwB;QACpB,OAAO;UAAErB;QAAF,CAAP;MACH;;MACD,MAAM,IAAIR,YAAJ,CAAkB;AAChC;AACA,uBAAuB2B,eAAe,CAACe,MAAhB,CAAuB,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAGA,GAAG,GAAG,IAAN,GAAaC,IAAI,CAACpB,IAArB,GAA4BoB,IAAI,CAACpB,IAA1E,EAAgF,EAAhF,CAAoF;AAC3G,KAHc,CAAN;IAIH;;IACD,IAAI,CAACM,UAAU,CAACe,YAAX,EAAL,EAAgC;MAC5B,MAAMC,QAAQ,GAAGzC,WAAW,CAACqB,UAAD,EAAaI,UAAb,EAAyBtB,WAAzB,CAA5B;MACA,OAAO;QACHA,WADG;QAEHsC;MAFG,CAAP;IAIH;;IACD,MAAMtB,IAAI,GAAGM,UAAU,CAACiB,OAAX,EAAb;IACA,MAAMC,IAAI,GAAGlB,UAAU,CAACmB,OAAX,EAAb;IACAzC,WAAW,SAASA,WAAW,CAAC+B,OAAZ,CAAoBf,IAApB,EAA0BwB,IAA1B,CAApB;;IACA,IAAIxC,WAAW,CAAC4B,iBAAZ,KAAkC,KAAtC,EAA6C;MACzC,OAAOlC,oBAAoB,CAACwB,UAAD,EAAalB,WAAb,EAA0BY,OAA1B,CAA3B;IACH;;IACDb,MAAM,GAAGuB,UAAU,CAACoB,qBAAX,EAAT;IACA9B,OAAO,GAAGX,MAAM,CAACQ,MAAP,CAAcR,MAAM,CAACQ,MAAP,CAAc,EAAd,EAAkBG,OAAlB,CAAd,EAA0C;MAAEqB,IAAI,EAAEvB;IAAR,CAA1C,CAAV;;IACA,IAAIE,OAAO,CAAC+B,oBAAR,IAAgC,CAAC3C,WAAW,CAACoB,eAA7C,IAAgE,CAACzB,kBAAkB,CAACK,WAAD,CAAvF,EAAsG;MAClG,MAAM4C,EAAE,GAAGnD,aAAa,CAACO,WAAW,CAACmB,eAAb,EAA8BpB,MAA9B,EAAsCa,OAAtC,CAAxB;MACA,MAAM0B,QAAQ,GAAGzC,WAAW,CAACqB,UAAD,EAAa0B,EAAb,EAAiB5C,WAAjB,CAA5B;MACA,OAAO;QACHA,WADG;QAEHsC;MAFG,CAAP;IAIH;;IACD,OAAOrB,SAAS,CAACC,UAAD,EAAalB,WAAb,EAA0BD,MAA1B,EAAkCa,OAAlC,CAAhB;EACH,C;;;;AAED,SAASK,SAAT"},"metadata":{},"sourceType":"module"}