{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { clone } from '../util/object.js';\nimport { getOAuthUrls } from './util/oauth.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport OAuthError from '../errors/OAuthError.js';\nimport { verifyToken } from './verifyToken.js';\nimport { getDefaultTokenParams } from './util/defaultTokenParams.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\n\nfunction validateResponse(res, oauthParams) {\n  if (res['error'] && res['error_description']) {\n    throw new OAuthError(res['error'], res['error_description']);\n  }\n\n  if (res.state !== oauthParams.state) {\n    throw new AuthSdkError('OAuth flow response state doesn\\'t match request state');\n  }\n}\n\nfunction handleOAuthResponse(_x, _x2, _x3, _x4) {\n  return _handleOAuthResponse.apply(this, arguments);\n}\n\nfunction _handleOAuthResponse() {\n  _handleOAuthResponse = _asyncToGenerator(function* (sdk, tokenParams, res, urls) {\n    var pkce = sdk.options.pkce !== false;\n\n    if (pkce && (res.code || res.interaction_code)) {\n      return sdk.token.exchangeCodeForTokens(Object.assign({}, tokenParams, {\n        authorizationCode: res.code,\n        interactionCode: res.interaction_code\n      }), urls);\n    }\n\n    tokenParams = tokenParams || getDefaultTokenParams(sdk);\n    urls = urls || getOAuthUrls(sdk, tokenParams);\n    var responseType = tokenParams.responseType || [];\n\n    if (!Array.isArray(responseType)) {\n      responseType = [responseType];\n    }\n\n    var scopes;\n\n    if (res.scope) {\n      scopes = res.scope.split(' ');\n    } else {\n      scopes = clone(tokenParams.scopes);\n    }\n\n    var clientId = tokenParams.clientId || sdk.options.clientId;\n    validateResponse(res, tokenParams);\n    var tokenDict = {};\n    var expiresIn = res.expires_in;\n    var tokenType = res.token_type;\n    var accessToken = res.access_token;\n    var idToken = res.id_token;\n    var refreshToken = res.refresh_token;\n    var now = Math.floor(Date.now() / 1000);\n\n    if (accessToken) {\n      var accessJwt = sdk.token.decode(accessToken);\n      tokenDict.accessToken = {\n        accessToken: accessToken,\n        claims: accessJwt.payload,\n        expiresAt: Number(expiresIn) + now,\n        tokenType: tokenType,\n        scopes: scopes,\n        authorizeUrl: urls.authorizeUrl,\n        userinfoUrl: urls.userinfoUrl\n      };\n    }\n\n    if (refreshToken) {\n      tokenDict.refreshToken = {\n        refreshToken: refreshToken,\n        expiresAt: Number(expiresIn) + now,\n        scopes: scopes,\n        tokenUrl: urls.tokenUrl,\n        authorizeUrl: urls.authorizeUrl,\n        issuer: urls.issuer\n      };\n    }\n\n    if (idToken) {\n      var idJwt = sdk.token.decode(idToken);\n      var idTokenObj = {\n        idToken: idToken,\n        claims: idJwt.payload,\n        expiresAt: idJwt.payload.exp - idJwt.payload.iat + now,\n        scopes: scopes,\n        authorizeUrl: urls.authorizeUrl,\n        issuer: urls.issuer,\n        clientId: clientId\n      };\n      var validationParams = {\n        clientId: clientId,\n        issuer: urls.issuer,\n        nonce: tokenParams.nonce,\n        accessToken: accessToken\n      };\n\n      if (tokenParams.ignoreSignature !== undefined) {\n        validationParams.ignoreSignature = tokenParams.ignoreSignature;\n      }\n\n      yield verifyToken(sdk, idTokenObj, validationParams);\n      tokenDict.idToken = idTokenObj;\n    }\n\n    if (responseType.indexOf('token') !== -1 && !tokenDict.accessToken) {\n      throw new AuthSdkError('Unable to parse OAuth flow response: response type \"token\" was requested but \"access_token\" was not returned.');\n    }\n\n    if (responseType.indexOf('id_token') !== -1 && !tokenDict.idToken) {\n      throw new AuthSdkError('Unable to parse OAuth flow response: response type \"id_token\" was requested but \"id_token\" was not returned.');\n    }\n\n    return {\n      tokens: tokenDict,\n      state: res.state,\n      code: res.code\n    };\n  });\n  return _handleOAuthResponse.apply(this, arguments);\n}\n\nexport { handleOAuthResponse };","map":{"version":3,"names":["clone","getOAuthUrls","AuthSdkError","OAuthError","verifyToken","getDefaultTokenParams","validateResponse","res","oauthParams","state","handleOAuthResponse","sdk","tokenParams","urls","pkce","options","code","interaction_code","token","exchangeCodeForTokens","Object","assign","authorizationCode","interactionCode","responseType","Array","isArray","scopes","scope","split","clientId","tokenDict","expiresIn","expires_in","tokenType","token_type","accessToken","access_token","idToken","id_token","refreshToken","refresh_token","now","Math","floor","Date","accessJwt","decode","claims","payload","expiresAt","Number","authorizeUrl","userinfoUrl","tokenUrl","issuer","idJwt","idTokenObj","exp","iat","validationParams","nonce","ignoreSignature","undefined","indexOf","tokens"],"sources":["C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@okta/okta-auth-js/esm/browser/oidc/handleOAuthResponse.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { clone } from '../util/object.js';\nimport { getOAuthUrls } from './util/oauth.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport OAuthError from '../errors/OAuthError.js';\nimport { verifyToken } from './verifyToken.js';\nimport { getDefaultTokenParams } from './util/defaultTokenParams.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\n\nfunction validateResponse(res, oauthParams) {\n    if (res['error'] && res['error_description']) {\n        throw new OAuthError(res['error'], res['error_description']);\n    }\n    if (res.state !== oauthParams.state) {\n        throw new AuthSdkError('OAuth flow response state doesn\\'t match request state');\n    }\n}\nasync function handleOAuthResponse(sdk, tokenParams, res, urls) {\n    var pkce = sdk.options.pkce !== false;\n    if (pkce && (res.code || res.interaction_code)) {\n        return sdk.token.exchangeCodeForTokens(Object.assign({}, tokenParams, {\n            authorizationCode: res.code,\n            interactionCode: res.interaction_code\n        }), urls);\n    }\n    tokenParams = tokenParams || getDefaultTokenParams(sdk);\n    urls = urls || getOAuthUrls(sdk, tokenParams);\n    var responseType = tokenParams.responseType || [];\n    if (!Array.isArray(responseType)) {\n        responseType = [responseType];\n    }\n    var scopes;\n    if (res.scope) {\n        scopes = res.scope.split(' ');\n    }\n    else {\n        scopes = clone(tokenParams.scopes);\n    }\n    var clientId = tokenParams.clientId || sdk.options.clientId;\n    validateResponse(res, tokenParams);\n    var tokenDict = {};\n    var expiresIn = res.expires_in;\n    var tokenType = res.token_type;\n    var accessToken = res.access_token;\n    var idToken = res.id_token;\n    var refreshToken = res.refresh_token;\n    var now = Math.floor(Date.now() / 1000);\n    if (accessToken) {\n        var accessJwt = sdk.token.decode(accessToken);\n        tokenDict.accessToken = {\n            accessToken: accessToken,\n            claims: accessJwt.payload,\n            expiresAt: Number(expiresIn) + now,\n            tokenType: tokenType,\n            scopes: scopes,\n            authorizeUrl: urls.authorizeUrl,\n            userinfoUrl: urls.userinfoUrl\n        };\n    }\n    if (refreshToken) {\n        tokenDict.refreshToken = {\n            refreshToken: refreshToken,\n            expiresAt: Number(expiresIn) + now,\n            scopes: scopes,\n            tokenUrl: urls.tokenUrl,\n            authorizeUrl: urls.authorizeUrl,\n            issuer: urls.issuer,\n        };\n    }\n    if (idToken) {\n        var idJwt = sdk.token.decode(idToken);\n        var idTokenObj = {\n            idToken: idToken,\n            claims: idJwt.payload,\n            expiresAt: idJwt.payload.exp - idJwt.payload.iat + now,\n            scopes: scopes,\n            authorizeUrl: urls.authorizeUrl,\n            issuer: urls.issuer,\n            clientId: clientId\n        };\n        var validationParams = {\n            clientId: clientId,\n            issuer: urls.issuer,\n            nonce: tokenParams.nonce,\n            accessToken: accessToken\n        };\n        if (tokenParams.ignoreSignature !== undefined) {\n            validationParams.ignoreSignature = tokenParams.ignoreSignature;\n        }\n        await verifyToken(sdk, idTokenObj, validationParams);\n        tokenDict.idToken = idTokenObj;\n    }\n    if (responseType.indexOf('token') !== -1 && !tokenDict.accessToken) {\n        throw new AuthSdkError('Unable to parse OAuth flow response: response type \"token\" was requested but \"access_token\" was not returned.');\n    }\n    if (responseType.indexOf('id_token') !== -1 && !tokenDict.idToken) {\n        throw new AuthSdkError('Unable to parse OAuth flow response: response type \"id_token\" was requested but \"id_token\" was not returned.');\n    }\n    return {\n        tokens: tokenDict,\n        state: res.state,\n        code: res.code\n    };\n}\n\nexport { handleOAuthResponse };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}