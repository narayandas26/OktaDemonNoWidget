{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getOAuthUrls } from './util/oauth.js';\nimport { isSameRefreshToken } from './util/refreshToken.js';\nimport { handleOAuthResponse } from './handleOAuthResponse.js';\nimport { postRefreshToken } from './endpoints/token.js';\nimport { isRefreshTokenInvalidError } from './util/errors.js';\n\nfunction renewTokensWithRefresh(_x, _x2, _x3) {\n  return _renewTokensWithRefresh.apply(this, arguments);\n}\n\nfunction _renewTokensWithRefresh() {\n  _renewTokensWithRefresh = _asyncToGenerator(function* (sdk, tokenParams, refreshTokenObject) {\n    const {\n      clientId\n    } = sdk.options;\n\n    if (!clientId) {\n      throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to renew tokens');\n    }\n\n    try {\n      const renewTokenParams = Object.assign({}, tokenParams, {\n        clientId\n      });\n      const tokenResponse = yield postRefreshToken(sdk, renewTokenParams, refreshTokenObject);\n      const urls = getOAuthUrls(sdk, tokenParams);\n      const {\n        tokens\n      } = yield handleOAuthResponse(sdk, renewTokenParams, tokenResponse, urls);\n      const {\n        refreshToken\n      } = tokens;\n\n      if (refreshToken && !isSameRefreshToken(refreshToken, refreshTokenObject)) {\n        sdk.tokenManager.updateRefreshToken(refreshToken);\n      }\n\n      return tokens;\n    } catch (err) {\n      if (isRefreshTokenInvalidError(err)) {\n        sdk.tokenManager.removeRefreshToken();\n      }\n\n      throw err;\n    }\n  });\n  return _renewTokensWithRefresh.apply(this, arguments);\n}\n\nexport { renewTokensWithRefresh };","map":{"version":3,"names":["AuthSdkError","getOAuthUrls","isSameRefreshToken","handleOAuthResponse","postRefreshToken","isRefreshTokenInvalidError","renewTokensWithRefresh","sdk","tokenParams","refreshTokenObject","clientId","options","renewTokenParams","Object","assign","tokenResponse","urls","tokens","refreshToken","tokenManager","updateRefreshToken","err","removeRefreshToken"],"sources":["C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@okta/okta-auth-js/esm/browser/oidc/renewTokensWithRefresh.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getOAuthUrls } from './util/oauth.js';\nimport { isSameRefreshToken } from './util/refreshToken.js';\nimport { handleOAuthResponse } from './handleOAuthResponse.js';\nimport { postRefreshToken } from './endpoints/token.js';\nimport { isRefreshTokenInvalidError } from './util/errors.js';\n\nasync function renewTokensWithRefresh(sdk, tokenParams, refreshTokenObject) {\n    const { clientId } = sdk.options;\n    if (!clientId) {\n        throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to renew tokens');\n    }\n    try {\n        const renewTokenParams = Object.assign({}, tokenParams, {\n            clientId,\n        });\n        const tokenResponse = await postRefreshToken(sdk, renewTokenParams, refreshTokenObject);\n        const urls = getOAuthUrls(sdk, tokenParams);\n        const { tokens } = await handleOAuthResponse(sdk, renewTokenParams, tokenResponse, urls);\n        const { refreshToken } = tokens;\n        if (refreshToken && !isSameRefreshToken(refreshToken, refreshTokenObject)) {\n            sdk.tokenManager.updateRefreshToken(refreshToken);\n        }\n        return tokens;\n    }\n    catch (err) {\n        if (isRefreshTokenInvalidError(err)) {\n            sdk.tokenManager.removeRefreshToken();\n        }\n        throw err;\n    }\n}\n\nexport { renewTokensWithRefresh };\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,kBAAT,QAAmC,wBAAnC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,0BAAT,QAA2C,kBAA3C;;SAEeC,sB;;;;;8CAAf,WAAsCC,GAAtC,EAA2CC,WAA3C,EAAwDC,kBAAxD,EAA4E;IACxE,MAAM;MAAEC;IAAF,IAAeH,GAAG,CAACI,OAAzB;;IACA,IAAI,CAACD,QAAL,EAAe;MACX,MAAM,IAAIV,YAAJ,CAAiB,0EAAjB,CAAN;IACH;;IACD,IAAI;MACA,MAAMY,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,WAAlB,EAA+B;QACpDE;MADoD,CAA/B,CAAzB;MAGA,MAAMK,aAAa,SAASX,gBAAgB,CAACG,GAAD,EAAMK,gBAAN,EAAwBH,kBAAxB,CAA5C;MACA,MAAMO,IAAI,GAAGf,YAAY,CAACM,GAAD,EAAMC,WAAN,CAAzB;MACA,MAAM;QAAES;MAAF,UAAmBd,mBAAmB,CAACI,GAAD,EAAMK,gBAAN,EAAwBG,aAAxB,EAAuCC,IAAvC,CAA5C;MACA,MAAM;QAAEE;MAAF,IAAmBD,MAAzB;;MACA,IAAIC,YAAY,IAAI,CAAChB,kBAAkB,CAACgB,YAAD,EAAeT,kBAAf,CAAvC,EAA2E;QACvEF,GAAG,CAACY,YAAJ,CAAiBC,kBAAjB,CAAoCF,YAApC;MACH;;MACD,OAAOD,MAAP;IACH,CAZD,CAaA,OAAOI,GAAP,EAAY;MACR,IAAIhB,0BAA0B,CAACgB,GAAD,CAA9B,EAAqC;QACjCd,GAAG,CAACY,YAAJ,CAAiBG,kBAAjB;MACH;;MACD,MAAMD,GAAN;IACH;EACJ,C;;;;AAED,SAASf,sBAAT"},"metadata":{},"sourceType":"module"}