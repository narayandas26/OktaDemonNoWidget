{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport OAuthError from '../errors/OAuthError.js';\n\nfunction handleInteractionCodeRedirect(_x, _x2) {\n  return _handleInteractionCodeRedirect.apply(this, arguments);\n}\n\nfunction _handleInteractionCodeRedirect() {\n  _handleInteractionCodeRedirect = _asyncToGenerator(function* (authClient, url) {\n    const meta = authClient.transactionManager.load();\n\n    if (!meta) {\n      throw new AuthSdkError('No transaction data was found in storage');\n    }\n\n    const {\n      codeVerifier,\n      state: savedState\n    } = meta;\n    const {\n      searchParams\n    } = new URL(url);\n    const state = searchParams.get('state');\n    const interactionCode = searchParams.get('interaction_code');\n    const error = searchParams.get('error');\n\n    if (error) {\n      throw new OAuthError(error, searchParams.get('error_description'));\n    }\n\n    if (state !== savedState) {\n      throw new AuthSdkError('State in redirect uri does not match with transaction state');\n    }\n\n    if (!interactionCode) {\n      throw new AuthSdkError('Unable to parse interaction_code from the url');\n    }\n\n    const {\n      tokens\n    } = yield authClient.token.exchangeCodeForTokens({\n      interactionCode,\n      codeVerifier\n    });\n    authClient.tokenManager.setTokens(tokens);\n  });\n  return _handleInteractionCodeRedirect.apply(this, arguments);\n}\n\nexport { handleInteractionCodeRedirect }; //# sourceMappingURL=handleInteractionCodeRedirect.js.map","map":null,"metadata":{},"sourceType":"module"}