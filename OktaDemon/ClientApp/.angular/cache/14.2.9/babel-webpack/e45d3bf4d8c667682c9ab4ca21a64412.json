{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { warn } from '../util/console.js';\nimport { removeNils } from '../util/object.js';\nimport { createOAuthMeta } from '../oidc/util/oauthMeta.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\n\nfunction createTransactionMeta(_x) {\n  return _createTransactionMeta.apply(this, arguments);\n}\n\nfunction _createTransactionMeta() {\n  _createTransactionMeta = _asyncToGenerator(function* (authClient, options = {}) {\n    const tokenParams = yield authClient.token.prepareTokenParams(options);\n    const pkceMeta = createOAuthMeta(authClient, tokenParams);\n    let {\n      flow = 'default',\n      withCredentials = true,\n      activationToken = undefined,\n      recoveryToken = undefined,\n      maxAge = undefined\n    } = Object.assign(Object.assign({}, authClient.options), options);\n    const meta = Object.assign(Object.assign({}, pkceMeta), {\n      flow,\n      withCredentials,\n      activationToken,\n      recoveryToken,\n      maxAge\n    });\n    return meta;\n  });\n  return _createTransactionMeta.apply(this, arguments);\n}\n\nfunction hasSavedInteractionHandle(authClient, options) {\n  const savedMeta = getSavedTransactionMeta(authClient, options);\n\n  if (savedMeta === null || savedMeta === void 0 ? void 0 : savedMeta.interactionHandle) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction getSavedTransactionMeta(authClient, options) {\n  options = removeNils(options);\n  options = Object.assign(Object.assign({}, authClient.options), options);\n  let savedMeta;\n\n  try {\n    savedMeta = authClient.transactionManager.load(options);\n  } catch (e) {}\n\n  if (!savedMeta) {\n    return;\n  }\n\n  if (isTransactionMetaValid(savedMeta, options)) {\n    return savedMeta;\n  }\n\n  warn('Saved transaction meta does not match the current configuration. ' + 'This may indicate that two apps are sharing a storage key.');\n}\n\nfunction getTransactionMeta(_x2, _x3) {\n  return _getTransactionMeta.apply(this, arguments);\n}\n\nfunction _getTransactionMeta() {\n  _getTransactionMeta = _asyncToGenerator(function* (authClient, options) {\n    options = removeNils(options);\n    options = Object.assign(Object.assign({}, authClient.options), options);\n    const validExistingMeta = getSavedTransactionMeta(authClient, options);\n\n    if (validExistingMeta) {\n      return validExistingMeta;\n    }\n\n    return createTransactionMeta(authClient, options);\n  });\n  return _getTransactionMeta.apply(this, arguments);\n}\n\nfunction saveTransactionMeta(authClient, meta) {\n  authClient.transactionManager.save(meta, {\n    muteWarning: true\n  });\n}\n\nfunction clearTransactionMeta(authClient) {\n  authClient.transactionManager.clear();\n}\n\nfunction isTransactionMetaValid(meta, options = {}) {\n  const keys = ['issuer', 'clientId', 'redirectUri', 'state', 'codeChallenge', 'codeChallengeMethod', 'activationToken', 'recoveryToken'];\n\n  if (isTransactionMetaValidForOptions(meta, options, keys) === false) {\n    return false;\n  }\n\n  const {\n    flow\n  } = options;\n\n  if (isTransactionMetaValidForFlow(meta, flow) === false) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isTransactionMetaValidForFlow(meta, flow) {\n  const shouldValidateFlow = flow && flow !== 'default' && flow !== 'proceed';\n\n  if (shouldValidateFlow) {\n    if (flow !== meta.flow) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isTransactionMetaValidForOptions(meta, options, keys) {\n  const mismatch = keys.some(key => {\n    const value = options[key];\n\n    if (value && value !== meta[key]) {\n      return true;\n    }\n  });\n  return !mismatch;\n}\n\nexport { clearTransactionMeta, createTransactionMeta, getSavedTransactionMeta, getTransactionMeta, hasSavedInteractionHandle, isTransactionMetaValid, isTransactionMetaValidForFlow, isTransactionMetaValidForOptions, saveTransactionMeta }; //# sourceMappingURL=transactionMeta.js.map","map":null,"metadata":{},"sourceType":"module"}