{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getWithoutPrompt } from './getWithoutPrompt.js';\nimport { renewTokensWithRefresh } from './renewTokensWithRefresh.js';\nimport { getDefaultTokenParams } from './util/defaultTokenParams.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\n\nfunction renewTokens(_x, _x2) {\n  return _renewTokens.apply(this, arguments);\n}\n\nfunction _renewTokens() {\n  _renewTokens = _asyncToGenerator(function* (sdk, options) {\n    const tokens = sdk.tokenManager.getTokensSync();\n\n    if (tokens.refreshToken) {\n      return renewTokensWithRefresh(sdk, options || {}, tokens.refreshToken);\n    }\n\n    if (!tokens.accessToken && !tokens.idToken) {\n      throw new AuthSdkError('renewTokens() was called but there is no existing token');\n    }\n\n    const accessToken = tokens.accessToken || {};\n    const idToken = tokens.idToken || {};\n    const scopes = accessToken.scopes || idToken.scopes;\n\n    if (!scopes) {\n      throw new AuthSdkError('renewTokens: invalid tokens: could not read scopes');\n    }\n\n    const authorizeUrl = accessToken.authorizeUrl || idToken.authorizeUrl;\n\n    if (!authorizeUrl) {\n      throw new AuthSdkError('renewTokens: invalid tokens: could not read authorizeUrl');\n    }\n\n    const userinfoUrl = accessToken.userinfoUrl || sdk.options.userinfoUrl;\n    const issuer = idToken.issuer || sdk.options.issuer;\n    options = Object.assign({\n      scopes,\n      authorizeUrl,\n      userinfoUrl,\n      issuer\n    }, options);\n\n    if (sdk.options.pkce) {\n      options.responseType = 'code';\n    } else {\n      const {\n        responseType\n      } = getDefaultTokenParams(sdk);\n      options.responseType = responseType;\n    }\n\n    return getWithoutPrompt(sdk, options).then(res => res.tokens);\n  });\n  return _renewTokens.apply(this, arguments);\n}\n\nexport { renewTokens }; //# sourceMappingURL=renewTokens.js.map","map":null,"metadata":{},"sourceType":"module"}