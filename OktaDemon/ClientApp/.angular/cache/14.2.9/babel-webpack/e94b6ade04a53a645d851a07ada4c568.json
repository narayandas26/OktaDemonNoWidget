{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Narean/source/repos/OktaDemon/OktaDemon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { proceed } from './proceed.js';\nimport { getSavedTransactionMeta } from './transactionMeta.js';\nimport { warn } from '../util/console.js';\n\nfunction poll(_x) {\n  return _poll.apply(this, arguments);\n}\n\nfunction _poll() {\n  _poll = _asyncToGenerator(function* (authClient, options = {}) {\n    var _a;\n\n    let transaction = yield proceed(authClient, {\n      startPolling: true\n    });\n    const meta = getSavedTransactionMeta(authClient);\n    let availablePollingRemeditaions = (_a = meta === null || meta === void 0 ? void 0 : meta.remediations) === null || _a === void 0 ? void 0 : _a.find(remediation => remediation.includes('poll'));\n\n    if (!(availablePollingRemeditaions === null || availablePollingRemeditaions === void 0 ? void 0 : availablePollingRemeditaions.length)) {\n      warn('No polling remediations available at the current IDX flow stage');\n    }\n\n    if (Number.isInteger(options.refresh)) {\n      return new Promise(function (resolve, reject) {\n        setTimeout( /*#__PURE__*/_asyncToGenerator(function* () {\n          var _a, _b;\n\n          try {\n            const refresh = (_b = (_a = transaction.nextStep) === null || _a === void 0 ? void 0 : _a.poll) === null || _b === void 0 ? void 0 : _b.refresh;\n\n            if (refresh) {\n              resolve(poll(authClient, {\n                refresh\n              }));\n            } else {\n              resolve(transaction);\n            }\n          } catch (err) {\n            reject(err);\n          }\n        }), options.refresh);\n      });\n    }\n\n    return transaction;\n  });\n  return _poll.apply(this, arguments);\n}\n\nexport { poll }; //# sourceMappingURL=poll.js.map","map":null,"metadata":{},"sourceType":"module"}