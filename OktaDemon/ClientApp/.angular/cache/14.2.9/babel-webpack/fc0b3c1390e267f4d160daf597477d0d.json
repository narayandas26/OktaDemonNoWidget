{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { Remediator } from './Base/Remediator.js';\nlet EnrollPoll = /*#__PURE__*/(() => {\n  class EnrollPoll extends Remediator {\n    canRemediate() {\n      return !!this.values.startPolling || this.options.step === 'enroll-poll';\n    }\n\n    getNextStep(authClient, context) {\n      const common = super.getNextStep(authClient, context);\n      let authenticator = this.getAuthenticator();\n\n      if (!authenticator && (context === null || context === void 0 ? void 0 : context.currentAuthenticator)) {\n        authenticator = context.currentAuthenticator.value;\n      }\n\n      return Object.assign(Object.assign({}, common), {\n        authenticator,\n        poll: {\n          required: true,\n          refresh: this.remediation.refresh\n        }\n      });\n    }\n\n    getValuesAfterProceed() {\n      let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'startPolling');\n      return trimmedValues.reduce((values, valueKey) => Object.assign(Object.assign({}, values), {\n        [valueKey]: this.values[valueKey]\n      }), {});\n    }\n\n  }\n\n  EnrollPoll.remediationName = 'enroll-poll';\n  return EnrollPoll;\n})();\nexport { EnrollPoll }; //# sourceMappingURL=EnrollPoll.js.map","map":null,"metadata":{},"sourceType":"module"}